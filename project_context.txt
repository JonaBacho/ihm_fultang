Project Context From: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang
Generated On: sam. 14 juin 2025 11:09:02 WAT
===============================================
Ignored Directory Patterns: .* node_modules vendor build dist target __pycache__ .next cache target venv storage
Ignored File Patterns: *.log *.jar *.pdf *.png *.jpg *.class *.sqlite *.csv project_context.txt package-lock.json yarn.lock composer.lock *.ico pnpm-lock.yaml
===============================================

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/Dockerfile

FROM node:18-alpine

WORKDIR /app

COPY package.json .

RUN npm install

RUN npm i react-icons && npm i jquery && npm i lucide-react 

COPY . .

# Comment the line below if you want to run the dev mode
RUN npm run build

EXPOSE 9000

CMD [ "npm", "run", "preview" ]// END OF FILE: Dockerfile

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/.env

VITE_BACKEND_FULTANG_API_BASE_ACCOUNTANT_URL=http://fultang.ddns.net:8009/api/v1/accounting
VITE_BACKEND_FULTANG_API_BASE_MEDICALSTAFF_URL=http://fultang.ddns.net:8009/api/v1/medical// END OF FILE: .env

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/eslint.config.js

import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
// END OF FILE: eslint.config.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/.gitignore

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# à cause du backend present sur une autre branche
accounting/
authentication/
polyclinic/
fultang/
db.sqlite3
// END OF FILE: .gitignore

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/index.html

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>Fultang</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
// END OF FILE: index.html

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/package.json

{
  "name": "fultang-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@ant-design/icons": "^5.5.1",
    "antd": "^5.21.6",
    "axios": "^1.7.7",
    "constate": "^3.3.2",
    "date-fns": "^4.1.0",
    "file-saver": "^2.0.5",
    "framer-motion": "^12.0.6",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.1",
    "lucide-react": "^0.460.0",
    "prop-types": "^15.8.1",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.3.0",
    "react-datepicker": "^7.6.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-router-dom": "^6.27.0",
    "react-tabs": "^6.1.0",
    "react-tooltip": "^5.28.0",
    "recharts": "^2.15.0",
    "use-debounce": "^10.0.4",
    "uuid": "^11.1.0",
    "xlsx": "^0.18.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.13.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.11.0",
    "postcss": "^8.4.47",
    "tailwind-scrollbar": "^3.1.0",
    "tailwindcss": "^3.4.14",
    "vite": "^5.4.10"
  }
}
// END OF FILE: package.json

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/postcss.config.js

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
// END OF FILE: postcss.config.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/public/vite.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/vite.svg

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/README.md

# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
// END OF FILE: README.md

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/App.jsx

import {BrowserRouter} from "react-router-dom";
import {AppRoute} from "./Router/AppRouter.jsx";
import {FultangProvider} from "./Utils/Provider.jsx";




export default function App() {
  return (
      <FultangProvider>
          <BrowserRouter>
              <div className='min-h-screen overflow-y-auto overflow-x-hidden'>
                  <AppRoute />
              </div>
          </BrowserRouter>
      </FultangProvider>
  )
}// END OF FILE: src/App.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/AccessDenied.jsx

import PropTypes from 'prop-types';
import {useNavigate} from "react-router-dom";
import accessDeniedImage from "../assets/accessDenied.png";
import {AppRoutesPaths} from "../Router/appRouterPaths.js";




export function AccessDenied({Role})
{
    AccessDenied.propTypes = {
        Role: PropTypes.string.isRequired,
    };


    const navigate = useNavigate();


   return (
        <div
            style={{
                backgroundImage: `url(${accessDeniedImage})`,
                height: "100vh",
                width: "100%",
                backgroundSize: "cover",
                backgroundRepeat: "no-repeat",
            }}
            className="flex flex-col ml-5 ">
            <div>
                <p className="mt-32  text-8xl mb-10 font-bold text-primary-start">Fultang</p>
                <p className="text-5xl mb-6 font-bold text-red-500"> 403 ERROR : Access Denied</p>
                <h1 className="text-2xl text-black font-bold ">
                    Access denied for {Role} view, please log in as a {Role}
                </h1>
                <div className="flex">
                    <button
                        onClick={() => navigate(AppRoutesPaths.loginPage)}
                        className="mt-6 hover:bg-blue-800 duration-300 transition-all justify-start w-20 h-12 bg-primary-start text-white font-bold rounded-lg mr-3">
                        Log In
                    </button>

                    <button
                        onClick={() => navigate(-1)}
                        className="mt-6 hover:bg-blue-800 duration-300 transition-all justify-start w-20 h-12 bg-primary-start text-white font-bold rounded-lg">
                        Go Back
                    </button>
                </div>
            </div>
        </div>
    )
}
// END OF FILE: src/GlobalComponents/AccessDenied.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/ChatWindow.jsx

import { useState } from "react";
import axiosInstance from "../Utils/axiosInstance.js";

// Icône de message (vous pouvez utiliser une bibliothèque comme react-icons ou une image SVG)
const MessageIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className="h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"
    />
  </svg>
);

// Icône de flèche d'envoi (send)
const SendIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className="h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
    />
  </svg>
);

const ChatWindow = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");

  const toggleChat = () => {
    setIsOpen(!isOpen);
  };

  const sendMessage = async () => {
    if (input.trim() === "") return;

    const newMessage = { text: input, sender: "user" };
    setMessages([...messages, newMessage]);
    setInput("");

    try {
      const response = await axiosInstance.post("/chatbot/", {
        question: input,
      });
      console.log(response);
      const botMessage = { text: response.data.response, sender: "bot" };
      setMessages([...messages, newMessage, botMessage]);
    } catch (error) {
      console.error("Erreur lors de l'envoi du message", error);
    }
  };

  return (
    <div className="fixed bottom-4 right-4">
      {/* Bouton pour ouvrir/fermer le chat */}
      <button
        onClick={toggleChat}
        className="bg-gradient-to-r from-primary-start to-primary-end text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-shadow duration-300 flex items-center justify-center"
      >
        <MessageIcon />
      </button>

      {/* Fenêtre de chat */}
      {isOpen && (
        <div className="fixed right-4 bottom-20 w-96 h-[500px] bg-white rounded-lg shadow-2xl flex flex-col">
          {/* En-tête de la fenêtre de chat */}
          <div className="bg-gradient-to-r from-primary-start to-primary-end text-white p-4 rounded-t-lg">
            <h2 className="text-lg font-semibold">Chat Bot</h2>
          </div>

          {/* Corps de la fenêtre de chat (messages) */}
          <div className="flex-1 p-4 overflow-y-auto">
            {messages.map((msg, index) => (
              <div
                key={index}
                className={`mb-4 ${
                  msg.sender === "user" ? "text-right" : "text-left"
                }`}
              >
                <div
                  className={`inline-block p-3 rounded-lg ${
                    msg.sender === "user"
                      ? "bg-primary-start text-white"
                      : "bg-gray-100"
                  }`}
                >
                  <p>{msg.text}</p>
                </div>
              </div>
            ))}
          </div>

          {/* Zone de saisie de message */}
          <div className="p-4 border-t border-gray-200 flex items-center">
            <input
              type="text"
              placeholder="Tapez votre message..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === "Enter" && sendMessage()}
              className="w-full px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-primary-start"
            />
            <button
              onClick={sendMessage}
              className="ml-2 p-2 bg-gradient-to-r from-primary-start to-primary-end text-white rounded-full hover:opacity-90 transition-opacity duration-300"
            >
              <SendIcon />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatWindow;
// END OF FILE: src/GlobalComponents/ChatWindow.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/CustomDashboard.jsx

import {useEffect, useState} from 'react';
import {Link, Navigate, useLocation} from "react-router-dom";
import PropTypes from "prop-types";
import { AccessDenied } from "./AccessDenied.jsx";
import { useAuthentication } from "../Utils/Provider.jsx";
import { ChevronDown, ChevronUp } from 'lucide-react';
import {Loading} from "./Loading.jsx";

export function CustomDashboard({ children, linkList, requiredRole}) {


    CustomDashboard.propTypes = {
        children: PropTypes.node.isRequired,
        linkList: PropTypes.array.isRequired,
        requiredRole: PropTypes.string.isRequired,
    }


    const location = useLocation();
    const activeLink = location.pathname;
    const { isAuthenticated, hasRole } = useAuthentication();
    const [isLoading, setIsLoading] = useState(true);
    const [expandedLinks, setExpandedLinks] = useState({});



    function toggleSubMenu  (linkName)
    {
        setExpandedLinks(prev => ({
            ...prev,
            [linkName]: !prev[linkName]
        }));
    }


    function renderLink(item, index, isSubLink = false)
    {
        const IconComponent = item.icon;
        const isActive = activeLink.startsWith(item.link);
        const hasSubLinks = item.subLinks && item.subLinks.length > 0;



        return (
            <div key={index}>
                {!hasSubLinks ? (
                        <Link className={`transition-all duration-400 flex p-3 items-center cursor-pointer ${isActive ? "bg-white rounded-l-full mb-2 mt-2" : "hover:bg-white/20 hover:rounded-l-full"} ${isSubLink ? "ml-4" : "ml-5"}`}
                             to={item.link}
                        >
                            {IconComponent && (
                                <IconComponent
                                    className={isActive ? "text-black text-xl mr-3" : "text-xl mr-3 text-white"}
                                />
                            )}
                            <p className={isActive ? "text-black font-bold text-md" : "text-md font-bold text-white"}>
                                {item.name}
                            </p>
                        </Link>
                ) : (
                    <div
                        className="transition-all duration-400 flex p-3.5 items-center cursor-pointer ml-5 hover:bg-white/20 hover:rounded-l-full"
                        onClick={() => toggleSubMenu(item.name)}
                    >
                        {IconComponent && (
                            <IconComponent
                                className={isActive ? "text-black text-xl mr-3" : "text-xl mr-3 text-white"}
                            />
                        )}
                        <p className={isActive ? "text-black font-bold text-md" : "text-md font-bold text-white"}>
                            {item.name}
                        </p>
                        {hasSubLinks && (expandedLinks[item.name] ? (
                                <ChevronUp className={`ml-auto ${isActive ? "text-black" : "text-white"}`}/>
                            ) : (
                                <ChevronDown className={`ml-auto ${isActive ? "text-black" : "text-white"}`}/>
                            )
                        )}
                    </div>
                )
                }
                {hasSubLinks && !expandedLinks[item.name] && (
                    <div className="ml-8 mt-2">
                        {item.subLinks.map((subItem, subIndex) => renderLink(subItem, subIndex, true))}
                    </div>
                )}
            </div>
        );
    }


   useEffect(() => {
        const checkAuth = async () => {
            await new Promise(resolve => setTimeout(resolve, 500));
            setIsLoading(false);
        };
        checkAuth();
    }, []);




    if (isLoading) {
        return <Loading/>
    }

    if (!isAuthenticated()) {
        return <Navigate to="/login" />;
    }

    if (!hasRole(requiredRole)) {
        return <AccessDenied Role={requiredRole} />;
    }

    return (
        <div className="flex h-screen">
            <div
                className="w-[18%] fixed h-screen bg-gradient-to-t from-primary-start to-primary-end flex flex-col overflow-y-auto scrollbar">
                <h1 className="text-3xl font-bold ml-6 mb-10 mt-7 text-white">
                    Fultang Clinic
                </h1>
                <nav className="flex flex-col space-y-1.5 mb-2 ">
                    {linkList.map((item, index) => renderLink(item, index))}
                </nav>
            </div>
            <div className="flex-1 min-h-screen overflow-x-hidden ml-[17.5%]">
                {children}
            </div>
        </div>
    )
}

// END OF FILE: src/GlobalComponents/CustomDashboard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/DashBoard.jsx

import {Link, Navigate, useLocation} from "react-router-dom";
import PropTypes from "prop-types";
import {AccessDenied} from "./AccessDenied.jsx";
import {useAuthentication} from "../Utils/Provider.jsx";
import {useEffect, useState} from "react";
import {Loading} from "./Loading.jsx";

export function DashBoard ({children,linkList, requiredRole})
{
    DashBoard.propTypes = {
        children: PropTypes.node.isRequired,
        linkList: PropTypes.array.isRequired,
        requiredRole: PropTypes.string.isRequired
    }

    const location = useLocation();
    const activeLink = location.pathname;
    const {isAuthenticated, hasRole} = useAuthentication();
    const [isLoading, setIsLoading] = useState(true);


    useEffect(() => {
        const checkAuth = async () => {
            await new Promise(resolve => setTimeout(resolve, 500));
            setIsLoading(false);
        };
        checkAuth();
    }, []);




      if (isLoading) {
        return <Loading/>
      }

      if (!isAuthenticated()) {
          return <Navigate to="/login" />;
      }

      if (!hasRole(requiredRole)) {
         return <AccessDenied Role={requiredRole}/>;
      }


    return (
        <div className="flex  h-screen">
            <div className="w-[15%] fixed h-screen bg-gradient-to-t from-primary-start to-primary-end  flex flex-col">
                <h1 className="text-3xl text-white font-bold ml-6 mb-10 mt-7">
                    Fultang Clinic
                </h1>
                <nav className="flex flex-col">
                    {linkList.map((item, index) => {
                        const IconComponent = item.icon;
                        const isActive = activeLink.startsWith(item.link);
                        //const isActive = activeLink === item.link;
                        return (
                            <Link
                                key={index}
                                className={`transition-all duration-400 flex p-4  ml-8 ${isActive ? "mt-1.5 bg-white rounded-l-full" : " mt-2 hover:bg-white/20 hover:p-3.5 hover:rounded-l-full"}`}
                                to={item.link}
                            >
                                <IconComponent
                                    className={isActive ? "text-black text-xl mr-3" : "text-xl mr-3 text-white"}/>
                                <p className={isActive ? "text-black  font-bold text-md " : "text-md font-bold text-white"}>{item.name}</p>
                            </Link>
                        )
                    })}
                </nav>
            </div>
            <div className="flex-1 min-h-screen overflow-x-hidden ml-[15.5%]">
                {children}
            </div>

        </div>
    )
}// END OF FILE: src/GlobalComponents/DashBoard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/footer.jsx

// END OF FILE: src/GlobalComponents/footer.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/HelpCenter.jsx

import {FaCog, FaEnvelope, FaSignOutAlt} from "react-icons/fa";
import {Tooltip} from "antd";
import {useAuthentication} from "../Utils/Provider.jsx";
import userIcon from "../assets/userIcon.png"
import { useNavigate } from "react-router-dom"; 
import ChatWindow from "./ChatWindow.jsx";

export function HelpCenter () {

    const {logout , userData} = useAuthentication();
    const navigate = useNavigate(); 

    const applyNavLinkBtnStyle = () => {
        return " w-12 h-10 mt-1 border-2 bg-gray-100 flex justify-center items-center rounded-xl shadow-xl hover:bg-secondary text-secondary text-xl hover:text-white transition-all duration-300";
    }

  return (
    <div className="min-h-screen bg-gray-100">
      {/* En-tête */}
      <div className="border-b-2 m-3  border-b-gray-300">
                <div className="w-full h-[70px] flex justify-between">
                    <h1 className="ml-3 text-4xl text-secondary mt-3.5 font-bold">
                        Help Center
                    </h1>
                    <div className="flex gap-3 mt-3.5 mb-4 mr-5">
                        <Tooltip placement={"top"} title={"settings"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaCog/>
                            </button>

                        </Tooltip>

                        <Tooltip placement={"top"} title={"Messages"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaEnvelope/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"LogOut"}>
                            <button
                                onClick={() => {logout()}}
                                className={" w-12 h-10 mt-1 border-2 bg-red-400 flex justify-center items-center rounded-xl shadow-xl hover:bg-white text-white text-xl hover:text-red-500 transition-all duration-300"}>
                                <FaSignOutAlt/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"Profile"}>
                            <button className="ml-3 flex">
                                <p className="font-bold text-secondary text-xl mt-2">{"Hello " +userData?.username + "!"}</p>
                                <img src={userIcon} alt={"user-icon"} className="w-12 h-12 ml-2 mr-3"/>

                            </button>
                        </Tooltip>
                    </div>
                </div>
            </div>
            <div className="min-h-screen bg-gray-100">

      {/* Flèche de retour */}
      <button
        onClick={() => navigate(-1)}
        className="flex items-center text-blue-800 hover:text-blue-900 mt-4 ml-6"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-6 w-6 mr-2"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M10 19l-7-7m0 0l7-7m-7 7h18"
          />
        </svg>
        Retour
      </button>


      {/* Barre de recherche */}
      <div className="container mx-auto mt-8 px-6">
        <input
          type="text"
          placeholder="Rechercher dans l'aide..."
          className="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-800"
        />
      </div>

      {/* Help Categories */}
        <div className="container mx-auto mt-8 px-6">
            <h2 className="text-xl font-semibold mb-4">Help Categories</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-lg font-medium mb-2">Consultation & Appointments</h3>
                <p className="text-gray-600">Guide to scheduling or canceling an appointment.</p>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-lg font-medium mb-2">Payments & Billing</h3>
                <p className="text-gray-600">Information on payments and refunds.</p>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-lg font-medium mb-2">Technical Issues</h3>
                <p className="text-gray-600">Troubleshooting technical issues.</p>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-lg font-medium mb-2">FAQ</h3>
                <p className="text-gray-600">Answers to frequently asked questions.</p>
                </div>
            </div>
        </div>


      
      {/* Popular Articles */}
            <div className="container mx-auto mt-8 px-6">
                <h2 className="text-xl font-semibold mb-4">Popular Articles</h2>
                <div className="space-y-4">
                    <div className="bg-white p-4 rounded-lg shadow-md">
                        <h3 className="text-lg font-medium">How to book an appointment?</h3>
                    </div>
                    <div className="bg-white p-4 rounded-lg shadow-md">
                        <h3 className="text-lg font-medium">How to check payment history?</h3>
                    </div>
                    <div className="bg-white p-4 rounded-lg shadow-md">
                        <h3 className="text-lg font-medium">What to do in case of a technical issue?</h3>
                    </div>
                </div>
            </div>

            {/* Customer Support */}
            <div className="container mx-auto mt-8 px-6">
                <h2 className="text-xl font-semibold mb-4">Customer Support</h2>
                <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-lg font-medium mb-4">Contact Us</h3>
                    <form className="space-y-4">
                    <select className="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option>Select a topic</option>
                        <option>Technical issue</option>
                        <option>Billing</option>
                        <option>Other</option>
                    </select>
                    <textarea
                        placeholder="Describe your issue..."
                        className="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        rows="4"
                    ></textarea>
                    <button
                        type="submit"
                        className="bg-blue-900 text-white px-6 py-2 rounded-lg hover:bg-blue-800"
                    >
                        Send
                    </button>
                    </form>
                </div>
            </div>

            {/* Footer */}
            <footer className="bg-gray-800 text-white mt-8 py-6">
                <div className="container mx-auto px-6">
                    <div className="flex justify-between items-center">
                    <p>© 2025 Fultang Clinic. All rights reserved.</p>
                    <div className="flex space-x-4">
                        <a href="#" className="hover:text-blue-500">Privacy Policy</a>
                        <a href="#" className="hover:text-blue-500">Terms of Use</a>
                    </div>
                    </div>
                </div>
            </footer>

    </div>
    <ChatWindow />
    </div>
)
}// END OF FILE: src/GlobalComponents/HelpCenter.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/Loader.jsx

import PropTypes from "prop-types";

export default  function Loader ({ size , color}){

    Loader.propTypes = {
        size: PropTypes.string.isRequired,
        color: PropTypes.string.isRequired
    }
    const sizeClasses = {
        small: "w-6 h-6",
        medium: "w-12 h-12",
        large: "w-16 h-16",
    }

    return (
        <div className="flex justify-center items-center flex-col">
            <div
                className={`animate-spin rounded-full border-t-2 border-b-2 border-${color} ${sizeClasses[size]}`}></div>
                <p className="text-primary-end text-xl font-semibold animate-bounce mt-5">Loading data ... </p>
        </div>
    )
}



// END OF FILE: src/GlobalComponents/Loader.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/Loading.jsx


export function Loading()
{
    return (
        <div
            className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-r from-primary-start to-primary-end opacity-75">
            <div className="text-center">
                {/* animated logo */}
                <div className="inline-block animate-spin ">
                    <svg className="w-20 h-20 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                         xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2}
                              d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                </div>

                {/* text loading */}
                <h2 className="mt-4 text-2xl font-semibold text-white animate-pulse">
                    Loading...
                </h2>

                {/* Points de chargement animés */}
                <div className="mt-4 flex justify-center space-x-2">
                    {[0, 1, 2].map((index) => (
                        <div
                            key={index}
                            className="w-3 h-3 bg-white rounded-full animate-bounce"
                            style={{animationDelay: `${index * 0.2}s`}}
                        ></div>
                    ))}
                </div>
            </div>
        </div>
    )
}// END OF FILE: src/GlobalComponents/Loading.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/MedicalStaffList.jsx

import {FaArrowLeft, FaArrowRight, FaSearch} from "react-icons/fa";
import {Tooltip} from "antd";
import {useEffect, useState} from "react";
import axiosInstance from "../Utils/axiosInstance.js";
import Loader from "./Loader.jsx";
import ServerErrorPage from "./ServerError.jsx";
import {calculateNumberOfSlides} from "../Utils/paginationFunctions.js";


export function MedicalStaffList()
{



    const [medicalStaffList, setMedicalStaffList] = useState([]);
    const [numberOfMedicalStaff, setNumberOfMedicalStaff] = useState(0);
    const [nexUrlForRenderMedicalStaffList, setNexUrlForRenderMedicalStaffList] = useState(null);
    const [previousUrlForRenderMedicalStaffList, setPreviousUrlForRenderMedicalStaffList] = useState(null);
    const [actualPageNumber, setActualPageNumber] = useState(1);
    const [isLoading, setIsLoading] = useState(false);
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");






    async function fetchMedicalStaffData(url = "/medical-staff/") {
        setIsLoading(true);
        try {
            const response = await axiosInstance.get(url);
            setIsLoading(false);

            if (response.status === 200) {
                setMedicalStaffList(response.data.results);
                setNumberOfMedicalStaff(response.data.count);
                setNexUrlForRenderMedicalStaffList(response.data.next);
                setPreviousUrlForRenderMedicalStaffList(response.data.previous);
                console.log(response.data);
                setErrorStatus(null);
                setErrorMessage("");
            }
        } catch (error) {
            setIsLoading(false);
            setMedicalStaffList([]);
            setNumberOfMedicalStaff(0);
            setNexUrlForRenderMedicalStaffList("");
            setPreviousUrlForRenderMedicalStaffList("");
            setErrorMessage("Something went wrong went retrieving medical staff list");
            setErrorStatus(error.status);
            console.log(error);
        }
    }


    async function fetchMedicalStaffList() {
        await fetchMedicalStaffData();
    }


    async function fetchNextOrPreviousPatientList(url) {
        if (url) {
            await fetchMedicalStaffData(url);
        }
    }


    useEffect(() => {
        fetchMedicalStaffList();
    }, []);


    function updateActualPageNumber(action) {
        if (action === "next")
        {
            if(actualPageNumber < calculateNumberOfSlides(numberOfMedicalStaff,5))
            {
                setActualPageNumber(actualPageNumber + 1);
            }
        }
        else
        {
            if(actualPageNumber > 1)
            {
                setActualPageNumber(actualPageNumber - 1);
            }
        }
    }







    return (
        <>
            <div className="flex justify-between mb-5">
                <div className="flex flex-col mt-3 ml-5">
                    {/*  <p className="font-bold text-2xl">Reception</p>  */}
                    <p className="font-bold text-xl">List of Medical Staffs</p>
                </div>
                <div className="flex mr-5 mt-2">
                    <div className="flex w-[400px] h-10 border-2 border-secondary rounded-lg">
                        <FaSearch className="text-xl text-secondary m-2"/>
                        <input
                            placeholder={"search for a specific medical staff member"}
                            type="text"
                            className="w-full mr-2 border-none focus:outline-none focus:ring-0"
                        />
                    </div>
                    <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
                        Search
                    </button>
                </div>
            </div>


            {isLoading ? (<div className="h-[500px] w-full flex justify-center items-center">
                <Loader size={"medium"} color={"primary-end"}/>
            </div>): errorStatus ? (
                    <div className="mt-16">
                        <ServerErrorPage errorStatus={errorStatus} message={errorMessage}/>
                    </div>
                ) : medicalStaffList.length > 0 ?
                (
                    <>
                        <div className="ml-5 mr-5 mt-2 border-2 h-[500px] rounded-lg shadow-lg  p-2">
                            <table className="w-full border-separate border-spacing-y-2">
                                <thead>
                                <tr>
                                    <th className="text-center p-3 text-xl font-bold border-r-2 border-gray-200">No</th>
                                    <th className="text-center p-3 text-xl font-bold border-r-2 border-gray-200">First
                                        Name
                                    </th>
                                    <th className="text-center p-3 text-xl font-bold border-r-2 border-gray-200 ">Last
                                        Name
                                    </th>
                                    <th className="text-center p-3 text-xl font-bold border-r-2 border-gray-200 ">Gender</th>
                                    <th className="text-center p-3 text-xl font-bold border-r-2 border-gray-200 ">Email</th>
                                    <th className="text-center p-3 text-xl font-bold border-r-2 border-gray-200 ">Role</th>
                                    <th className="text-center p-3 text-xl font-bold ">CNI number</th>
                                </tr>
                                </thead>
                                <tbody className="mt-5">
                                {medicalStaffList.map((person, index) => (
                                    <tr key={index} className="bg-gray-100">
                                        <td className="p-6 text-md text-blue-900 rounded-l-lg text-center">{index + 1}</td>
                                        <td className="p-6 text-md text-blue-900  text-center">{person.first_name}</td>
                                        <td className="p-6 text-md text-center ">{person.last_name}</td>
                                        <td className="p-6 text-md text-center ">{person.gender}</td>
                                        <td className="p-6 text-md text-center ">{person.email}</td>
                                        <td className="p-6 text-md text-center ">{person.role}</td>
                                        <td className="p-6 flex justify-center rounded-r-xl">{person.cniNumber}</td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>


                        <div className="fixed w-full justify-center -right-16 bottom-0 flex mt-6 mb-4">
                            <div className="flex gap-4">
                                <Tooltip placement={"left"} title={"previous slide"}>
                                    <button
                                        onClick={async () => {await fetchNextOrPreviousPatientList(previousUrlForRenderMedicalStaffList), updateActualPageNumber("prev")}}
                                        className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                        <FaArrowLeft/>
                                    </button>
                                </Tooltip>
                                <p className="text-secondary text-2xl font-bold mt-4">{actualPageNumber}/{calculateNumberOfSlides(numberOfMedicalStaff,5)}</p>
                                <Tooltip placement={"right"} title={"next slide"}>
                                    <button
                                        onClick={async () => {await fetchNextOrPreviousPatientList(nexUrlForRenderMedicalStaffList), updateActualPageNumber("next")}}
                                        className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                        <FaArrowRight/>
                                    </button>
                                </Tooltip>
                            </div>
                        </div>
                    </>
                ) :(
                    <div className="flex flex-col items-center justify-center h-[500px]  p-8">
                        <div className="mb-6 relative">
                            <svg
                                className="w-24 h-24 text-teal-500"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                                />
                            </svg>
                            {/* Animation de pulsation */}
                            <span className="absolute top-0 left-0 w-full h-full bg-teal-200 rounded-full animate-ping opacity-75"></span>
                        </div>
                        <h2 className="mt-4 text-2xl font-bold text-teal-700 mb-4">No medical personnel have been registered at this time.</h2>
                    </div>
                )
            }
        </>
    )
}// END OF FILE: src/GlobalComponents/MedicalStaffList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/NotFound.jsx

import { useNavigate} from 'react-router-dom';
import robotImage from "../assets/robotNotFound.png";



export function NotFound () {

    const navigate = useNavigate()
    return (
        <div className="h-screen overflow-hidden bg-gradient-to-r from-primary-start to-primary-end flex justify-between ">
            <div className=" mt-36  flex flex-col ml-10" >
                <span className="text-9xl font-bold mb-16 text-white">Fultang</span>
                <span className="text-5xl font-bold text-white mb-4">404 Not Found</span>
                <div className="text-2xl text-white font-bold ">
                    The page you are trying to access does not exist.
                </div>
                <button
                    onClick={()=>navigate(-1)}
                    className="mt-6  hover:bg-blue-800 duration-300 transition-all justify-start w-20 h-12 bg-secondary text-white font-bold rounded-lg ">
                    Go Back
                </button>

            </div>
            <div className="mt-32">
                <img src={robotImage} alt="404 Error" className="w-[400px] h-[500px] mr-16"/>
            </div>
        </div>
    );
}


// END OF FILE: src/GlobalComponents/NotFound.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/Notification.jsx

"use client";

import { useState, useEffect } from "react";
import { Bell } from "lucide-react";

export default function NotificationsList() {
    const [notifications, setNotifications] = useState([]);

    // Exemple de chargement de notifications (simulé)
    useEffect(() => {
        setNotifications([
            {
                id: 1,
                title: "Nouvelle alerte de sécurité",
                message: "Votre compte a détecté une activité suspecte. Veuillez vérifier.",
                date: "2025-03-20T14:00:00",
                isRead: false,
            },
            {
                id: 2,
                title: "Mise à jour de l'application",
                message: "L'application a été mise à jour avec de nouvelles fonctionnalités.",
                date: "2025-03-19T09:30:00",
                isRead: true,
            },
            {
                id: 3,
                title: "Rappel de réunion",
                message: "N'oubliez pas votre réunion à 11:00 AM demain.",
                date: "2025-03-21T11:00:00",
                isRead: false,
            },
        ]);
    }, []);

    const toggleReadStatus = (id) => {
        setNotifications((prev) =>
            prev.map((notification) =>
                notification.id === id
                    ? { ...notification, isRead: !notification.isRead }
                    : notification
            )
        );
    };

    return (
        <div className="min-h-screen bg-gray-50 p-6">
            <h1 className="text-3xl font-bold text-gray-800 mb-6">Notifications</h1>
            <div className="grid gap-4">
                {notifications.map((notification) => (
                    <div
                        key={notification.id}
                        className={`flex flex-col md:flex-row items-center justify-between p-4 rounded-lg shadow-md transition-colors duration-300 ${
                            notification.isRead
                                ? "bg-white border-l-4 border-green-500"
                                : "bg-blue-50 border-l-4 border-blue-500"
                        }`}
                    >
                        <div className="flex flex-col md:flex-row items-start md:items-center">
                            <Bell className="h-6 w-6 text-blue-600 mr-4" />
                            <div>
                                <p className="text-lg font-medium text-gray-800">
                                    {notification.title}
                                </p>
                                <p className="text-sm text-gray-600">{notification.message}</p>
                                <p className="text-sm text-gray-500">
                                    {new Date(notification.date).toLocaleString()}
                                </p>
                            </div>
                        </div>
                        <button
                            onClick={() => toggleReadStatus(notification.id)}
                            className={`mt-4 md:mt-0 px-4 py-2 rounded-md text-sm font-semibold transition-colors duration-300 shadow hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 ${
                                notification.isRead
                                    ? "bg-green-600 text-white hover:bg-green-700"
                                    : "bg-blue-600 text-white hover:bg-blue-700"
                            }`}
                        >
                            {notification.isRead ? "Marquer comme non lue" : "Marquer comme lue"}
                        </button>
                    </div>
                ))}
            </div>
        </div>
    );
}
// END OF FILE: src/GlobalComponents/Notification.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/Pagination.jsx

import { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from 'lucide-react';
import PropTypes from "prop-types";

function Pagination({
                        currentPage,
                        totalPages,
                        onPageChange,
                        fetchNextOrPreviousPatientList,
                        nextUrlForRenderPatientList,
                        previousUrlForRenderPatientList
                    }) {
    const [pageNumbers, setPageNumbers] = useState([]);

    useEffect(() => {
        const generatePageNumbers = () => {
            let numbers = [];
            const maxVisiblePages = 5;

            if (totalPages <= maxVisiblePages) {
                numbers = Array.from({ length: totalPages }, (_, i) => i + 1);
            } else {
                let start = Math.max(currentPage - 2, 1);
                let end = Math.min(start + maxVisiblePages - 1, totalPages);

                if (end - start < maxVisiblePages - 1) {
                    start = Math.max(end - maxVisiblePages + 1, 1);
                }

                numbers = Array.from({ length: end - start + 1 }, (_, i) => start + i);

                if (start > 1) {
                    numbers = [1, '...', ...numbers];
                }
                if (end < totalPages) {
                    numbers = [...numbers, '...', totalPages];
                }
            }
            setPageNumbers(numbers);
        };

        generatePageNumbers();
    }, [currentPage, totalPages]);

    const handlePageChange = async (newPage) => {
        if (newPage === currentPage || newPage < 1 || newPage > totalPages) return;

        const url = newPage > currentPage ? nextUrlForRenderPatientList : previousUrlForRenderPatientList;

        try {
            await fetchNextOrPreviousPatientList(url);
            onPageChange(newPage);
        } catch (error) {
            console.error('Error changing page:', error);
        }
    };

    return (
        <div className="flex justify-center items-center space-x-2 mt-8">
            <button
                onClick={() => handlePageChange(1)}
                disabled={currentPage <= 1}
                className="p-2 rounded-md bg-white border border-gray-300 shadow-sm text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
                <ChevronsLeft className="h-5 w-5" />
            </button>

            <button
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage <= 1}
                className="p-2 rounded-md bg-white border border-gray-300 shadow-sm text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
                <ChevronLeft className="h-5 w-5" />
            </button>

            {pageNumbers.map((number, index) => (
                <button
                    key={index}
                    onClick={() => typeof number === 'number' && handlePageChange(number)}
                    disabled={typeof number !== 'number'}
                    className={`px-4 py-2 rounded-md ${
                        number === currentPage
                            ? 'bg-blue-600 text-white'
                            : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'
                    } ${typeof number !== 'number' ? 'cursor-default' : ''}`}
                >
                    {number}
                </button>
            ))}

            <button
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage >= totalPages}
                className="p-2 rounded-md bg-white border border-gray-300 shadow-sm text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
                <ChevronRight className="h-5 w-5" />
            </button>

            <button
                onClick={() => handlePageChange(totalPages)}
                disabled={currentPage >= totalPages}
                className="p-2 rounded-md bg-white border border-gray-300 shadow-sm text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
                <ChevronsRight className="h-5 w-5" />
            </button>
        </div>
    );
}

Pagination.propTypes = {
    currentPage: PropTypes.number.isRequired,
    totalPages: PropTypes.number.isRequired,
    onPageChange: PropTypes.func.isRequired,
    fetchNextOrPreviousPatientList: PropTypes.func.isRequired,
    nextUrlForRenderPatientList: PropTypes.string,
    previousUrlForRenderPatientList: PropTypes.string
};

export default Pagination;// END OF FILE: src/GlobalComponents/Pagination.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/QuickActionButton.jsx

import PropTypes from "prop-types";

export default function QuickActionButton({icon: Icon, label, onClick}) {

    QuickActionButton.propTypes = {
        icon: PropTypes.element.isRequired,
        label: PropTypes.string.isRequired,
        onClick: PropTypes.func.isRequired
    }
    return (
        <button
            onClick={onClick}
            className="flex flex-col items-center gap-2 p-4  rounded-lg border border-gray-200 hover:border-2 hover:border-primary-end hover:bg-gray-100 transition-all duration-300"
        >
            <Icon className="w-6 h-6 text-primary-end"/>
            <span className="text-md text-gray-600 font-bold text-center">{label}</span>
        </button>
    );
}
// END OF FILE: src/GlobalComponents/QuickActionButton.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/ServerError.jsx

import {ServerCrash, RefreshCcw, MailIcon, PhoneCall} from 'lucide-react';
import PropTypes from "prop-types";

export default function ServerErrorPage({errorStatus, message}) {

    ServerErrorPage.propTypes = {
        errorStatus: PropTypes.number.isRequired,
        message: PropTypes.string,
    }


    const handleRefresh = () => {
        window.location.reload();
    };

    if (errorStatus)
    return (
        <div className="h-screen overflow-y-hidden flex justify-center p-4">
            <div className="max-w-4xl w-full text-center">
                <div className="mb-8 relative">
                    <div className="w-24 h-24 bg-red-100 rounded-full mx-auto flex items-center justify-center">
                        <ServerCrash className="w-12 h-12 text-red-600"/>
                    </div>
                    <div
                        className="w-32 h-32 bg-red-50 rounded-full absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 -z-10 animate-pulse"/>
                </div>

                <h1 className="text-3xl font-bold  mb-4">
                    Server Error
                </h1>
                <div className="flex flex-col text-gray-600 w-2xl text-md mx-auto gap-3">
                    {message && <p>{message}</p>}
                    {errorStatus === 503  || errorStatus===500 && <p>An internal error has occurred on our servers, try refreshing the page, or going back and attempting the action again.</p>}
                </div>

                <div className="mt-4 text-md max-w-4xl text-gray-500 inline-flex gap-2 mb-8">
                    <p>If the problem persists, contact our technical support: </p>
                    <div className="text-primary-start font-semibold flex gap-1">
                        <MailIcon/>
                        <p className="mr-4">technicalsupport@fultang.com</p>
                        <PhoneCall/>
                        <p>+237 6 98 55 25 32</p>
                    </div>
                </div>

                <div className="space-y-4">
                    <div className="text-xl text-gray-500">
                        Error code: <span className="font-mono">{errorStatus}</span>
                    </div>
                    <button
                        onClick={handleRefresh}
                        className="inline-flex items-center font-bold px-6 py-3 bg-red-500 text-white rounded-lg hover:bg-red-700 transition-all duration-300 group"
                    >
                        <RefreshCcw className="w-6 h-6 mr-2 group-hover:rotate-180 transition-transform duration-500"/>
                        Retry !!
                    </button>
                </div>

            </div>
        </div>
    );
}
// END OF FILE: src/GlobalComponents/ServerError.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/GlobalComponents/StatCard.jsx

import PropTypes from "prop-types";

export default function StatCard({icon: Icon, title, value, description, color}) {

    StatCard.propTypes = {
        icon: PropTypes.element.isRequired,
        title: PropTypes.string.isRequired,
        value: PropTypes.number.isRequired,
        description: PropTypes.string.isRequired,
        color: PropTypes.string
    }

    return (
        <div className="bg-gray-100 rounded-lg hover:shadow-lg p-6 flex items-start transition-all duration-500 hover:-translate-y-2   gap-4">
            <div className={`${color} rounded-full p-3 text-white`}>
                <Icon className="w-6 h-6"/>
            </div>
            <div>
                <h3 className="font-semibold text-gray-800">{title}</h3>
                <p className="text-2xl font-bold text-gray-900 mb-1">{value}</p>
                <p className="text-sm text-gray-500">{description}</p>
            </div>
        </div>
    );
}
// END OF FILE: src/GlobalComponents/StatCard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/index.css

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
    /* Largeur de la barre de défilement */
    .scrollbar::-webkit-scrollbar {
        width: 5px;
        height: 5px;
    }

    /* Piste de la barre de défilement */
    .scrollbar::-webkit-scrollbar-track {
        border-radius: 100vh;
        background: #f7f4ed;
    }

    /* Pouce de la barre de défilement */
    .scrollbar::-webkit-scrollbar-thumb {

        border-radius: 100vh;
        border: 2px solid #f6f7ed;
    }

    /* Effet hover sur le pouce */
    .scrollbar::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(to bottom, #3d9d94, #1976D2);
    }
}

/* Pour Firefox */
@supports (scrollbar-color: #E5E7EB #f6f7ed) {
    * {
        scrollbar-color:#E5E7EB #f6f7ed;
        scrollbar-width: thin;
    }
}// END OF FILE: src/index.css

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/main.jsx

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
// END OF FILE: src/main.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/Accountant.jsx

import { AccountantDashBoard } from "./Components/AccountantDashboard";
import { AccountantNavLink } from "./AccountantNavLink";
import { AccountantNavBar } from "./Components/AccountantNavBar";
import {
  Users,
  DollarSign,
  FileText,
  Settings,
  WalletCards,
} from "lucide-react";
import PropTypes from "prop-types";
import { useNavigate } from "react-router-dom";

import { useState, useEffect } from "react";
import axiosInstanceAccountant from "../../Utils/axiosInstanceAccountant";

export function Accountant() {
  const navigate = useNavigate();
  const [stats, setStats] = useState({
    totalInvoices: 0,
    totalAccounts: 0,
    totalFinancialOperations: 0,
  });

  // Fonction pour récupérer le nombre total de factures
  const fetchTotalInvoices = async () => {
    try {
      const response = await axiosInstanceAccountant.get("/invoice/total");
      setStats((prev) => ({ ...prev, totalInvoices: response.data.total }));
    } catch (error) {
      console.error("Error fetching total invoices:", error);
    }
  };

  // Fonction pour récupérer le nombre total de comptes
  const fetchTotalAccounts = async () => {
    try {
      const response = await axiosInstanceAccountant.get("/account/total");
      setStats((prev) => ({ ...prev, totalAccounts: response.data.total }));
    } catch (error) {
      console.error("Error fetching total accounts:", error);
    }
  };

  // Fonction pour récupérer le nombre total d'opérations financières
  const fetchTotalFinancialOperations = async () => {
    try {
      const response = await axiosInstanceAccountant.get(
        "/financial-operation/total"
      );
      setStats((prev) => ({
        ...prev,
        totalFinancialOperations: response.data.total,
      }));
    } catch (error) {
      console.error("Error fetching total financial operations:", error);
    }
  };

  // Charger les données au montage du composant
  useEffect(() => {
    fetchTotalInvoices();
    fetchTotalAccounts();
    fetchTotalFinancialOperations();
  }, []);

  const quickActions = [
    {
      icon: DollarSign,
      label: "Add Expense",
      onClick: () => navigate("/accountant/create-facture"),
    },
    {
      icon: WalletCards,
      label: "View Account",
      onClick: () => navigate("/accountant/account-list"),
    },
    {
      icon: FileText,
      label: "View Reports",
      onClick: () => navigate("/accountant/financial-reports"),
    },
  ];

  return (
    <AccountantDashBoard
      linkList={AccountantNavLink}
      requiredRole={"Accountant"}
    >
      <AccountantNavBar />
      <div className="p-6 space-y-6">
        <h1 className="text-3xl font-bold mb-4">Accounting Dashboard</h1>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <StatCard
            title="Total Invoices"
            value={stats.totalInvoices}
            description="Total number of invoices"
            color="bg-blue-500"
            icon={FileText}
          />
          <StatCard
            title="Total Accounts"
            value={stats.totalAccounts}
            description="Total number of accounts"
            color="bg-green-500"
            icon={WalletCards}
          />
          <StatCard
            title="Financial Operations"
            value={stats.totalFinancialOperations}
            description="Total financial operations"
            color="bg-purple-500"
            icon={DollarSign}
          />
        </div>

        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-bold text-gray-800 mb-4">
            Quick Actions
          </h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {quickActions.map((action, index) => (
              <QuickActionButton
                key={index}
                icon={action.icon}
                label={action.label}
                onClick={action.onClick}
              />
            ))}
          </div>
        </div>
      </div>
    </AccountantDashBoard>
  );
}

function StatCard({ title, value, description, color }) {
  return (
    <div className={`bg-white rounded-lg shadow-lg p-6 flex items-start gap-4`}>
      <div className={`${color} rounded-full p-3 text-white`}>
        <DollarSign className="w-6 h-6" />
      </div>
      <div>
        <h3 className="font-semibold text-gray-800">{title}</h3>
        <p className="text-2xl font-bold text-gray-900 mb-1">{value}</p>
        <p className="text-sm text-gray-500">{description}</p>
      </div>
    </div>
  );
}

function QuickActionButton({ icon: Icon, label, onClick }) {
  return (
    <button
      onClick={onClick}
      className="flex flex-col items-center gap-2 p-4 rounded-lg border border-gray-200 hover:border-2 hover:border-primary-end hover:bg-gray-100 transition-all duration-300"
    >
      <Icon className="w-6 h-6 text-primary-end" />
      <span className="text-md text-gray-600 font-bold text-center">
        {label}
      </span>
    </button>
  );
}

StatCard.propTypes = {
  title: PropTypes.string.isRequired,
  value: PropTypes.number.isRequired,
  description: PropTypes.string.isRequired,
  color: PropTypes.string.isRequired,
};

QuickActionButton.propTypes = {
  icon: PropTypes.elementType.isRequired,
  label: PropTypes.string.isRequired,
  onClick: PropTypes.func.isRequired,
};
// END OF FILE: src/Pages/Accountant/Accountant.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/AccountantNavLink.js

import { AppRoutesPaths as appRoutes } from "../../Router/appRouterPaths";
import {
  FaHome,
  FaWallet,
  FaFileInvoice,
  FaCashRegister,
  FaChartLine,
} from "react-icons/fa";
export const AccountantNavLink = [
  {
    name: "Dashboard",
    link: appRoutes.accountantPage,
    icon: FaHome,
  },

  {
    name: "Account List",
    link: appRoutes.accountList,
    icon: FaWallet,
  },

  {
    name: "Create a bill",
    link: appRoutes.createFactureAccountant,
    icon: FaFileInvoice,
  },

  {
    name: "Statistics",
    icon: FaWallet,
    subLinks: [
      {
        name: "Financial Contribution",
        link: appRoutes.financialContributions,
        icon: FaCashRegister,
      },
      {
        name: "Financial Report",
        link: appRoutes.financialReportsAccountant,
        icon: FaChartLine,
      },
    ],
  },
];
// END OF FILE: src/Pages/Accountant/AccountantNavLink.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/AccountDetailsPage.jsx

import { useEffect, useState, useCallback } from "react";
import { useParams, useLocation } from "react-router-dom";
import axiosInstanceAccountant from "../../Utils/axiosInstanceAccountant";
import axiosInstance from "../../Utils/axiosInstance";
import { ErrorModal } from "../Modals/ErrorModal";
import { SuccessModal } from "../Modals/SuccessModal";
import {
  FaEye,
  FaArrowLeft,
  FaArrowRight,
  FaSort,
  FaPlus,
  FaHashtag,
  FaTimes,
} from "react-icons/fa";
import { InvoiceDetailsModal } from "./Components/InvoiceDetailsModal.jsx";
import { Tooltip } from "antd";
import { AccountantDashBoard } from "./Components/AccountantDashboard.jsx";
import { AccountantNavLink } from "./AccountantNavLink";
import { formatDateOnlyWithoutWeekDay } from "../../Utils/formatDateMethods.js";
import { AccountantNavBar } from "./Components/AccountantNavBar.jsx";
import { useNavigate } from "react-router-dom"; // Ajoutez cette importation

export function AccountDetailsPage() {
  const { accountId } = useParams();
  const { state } = useLocation();
  const accountDetail = state.account;
  const [accountDetails, setAccountDetails] = useState({});
  const [invoices, setInvoices] = useState([]);
  const [unvalidatedInvoices, setUnvalidatedInvoices] = useState(0);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [canOpenErrorMessageModal, setCanOpenErrorMessageModal] =
    useState(false);
  const [canOpenSuccessModal, setCanOpenSuccessModal] = useState(false);
  const [canOpenInvoiceDetailsModal, setCanOpenInvoiceDetailsModal] =
    useState(false);
  const [selectedInvoice, setSelectedInvoice] = useState(null);
  const [isAddOperationModalVisible, setIsAddOperationModalVisible] =
    useState(false);
  const [newOperationName, setNewOperationName] = useState("");

  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [nextUrl, setNextUrl] = useState(null);
  const [previousUrl, setPreviousUrl] = useState(null);

  const navigate = useNavigate(); // Utilisez useNavigate pour la navigation

  const fetchAccountDetails = useCallback(
    async (url = `/bill/get_for_account`) => {
      try {
        const accountResponse = await axiosInstanceAccountant.get(
          `/acccount-state/${accountId}/`
        );
        const unacountedBillResponse = await axiosInstance.get(
          `/bill/bill-unaccounted/?account_id=${accountDetail.id}`
        );
        const invoicesResponse = await axiosInstance.get(
          url + `/?account_id=${accountDetail.id}`
        );
        setUnvalidatedInvoices(unacountedBillResponse.data.length);
        if (accountResponse.status === 200 && invoicesResponse.status === 200) {
          setAccountDetails(accountResponse.data);
          setInvoices(invoicesResponse.data || []);
          setTotalPages(
            Math.ceil(
              invoicesResponse.data.count ? invoicesResponse.data.count / 10 : 1
            )
          );
          setNextUrl(invoicesResponse.data.next);
          setPreviousUrl(invoicesResponse.data.previous);
        }
      } catch (error) {
        console.error("Error fetching account details:", error);
        setErrorMessage(
          error.response?.data?.detail ||
            "An error occurred while loading the data."
        );
        setCanOpenErrorMessageModal(true);
        setInvoices([]);
      }
    },
    [accountId, accountDetail.id]
  );

  useEffect(() => {
    fetchAccountDetails();
  }, [accountId, accountDetail, currentPage]);

  const validateInvoice = async (invoiceId) => {
    const isAccounted = true;
    try {
      const response = await axiosInstance.patch(
        `/bill/${invoiceId}/account/`,
        isAccounted
      );
      if (response.status === 200) {
        setSuccessMessage("Invoice validated successfully!");
        setCanOpenSuccessModal(true);
        await fetchAccountDetails();
      }
    } catch (error) {
      setErrorMessage(error.response?.data?.detail || "An error occurred");
      setCanOpenErrorMessageModal(true);
    }
  };

  const refreshInvoices = useCallback(async () => {
    await fetchAccountDetails();
  }, [fetchAccountDetails]);

  const handlePageChange = (action) => {
    if (action === "next" && nextUrl) {
      setCurrentPage(currentPage + 1);
    } else if (action === "prev" && previousUrl) {
      setCurrentPage(currentPage - 1);
    }
  };

  const handleAddOperation = useCallback(async () => {
    try {
      const response = await axiosInstanceAccountant.post(
        "/financial-operation/",
        {
          name: newOperationName,
          account: accountDetail.id,
        }
      );
      if (response.status === 201) {
        setIsAddOperationModalVisible(false);
        setNewOperationName("");
        setSuccessMessage("Operation added successfully!");
        setCanOpenSuccessModal(true);
        await fetchAccountDetails();
      }
    } catch (error) {
      setErrorMessage(
        error.response?.data?.detail ||
          "An error occurred while adding the operation"
      );
      setCanOpenErrorMessageModal(true);
    }
  }, [newOperationName, accountDetail.id]);

  return (
    <AccountantDashBoard
      requiredRole={"Accountant"}
      linkList={AccountantNavLink}
    >
      <AccountantNavBar />

      <div className="p-5">
        <div className="flex items-center space-x-5">
          {" "}
          {/* Ajoutez une flèche de retour avec un message au survol */}
          <Tooltip placement="right" title="Back to Account List">
            <button
              onClick={() => navigate(-1)} // Retourne à la page précédente
              className="flex items-center text-secondary hover:text-primary-end transition duration-300 mb-5"
            >
              <FaArrowLeft className="text-4xl" /> {/* Flèche plus grosse */}
            </button>
          </Tooltip>
          <h1 className="text-2xl font-bold mb-5">
            Account Details - {accountDetail.account?.libelle}
          </h1>
        </div>

        <div className="grid grid-cols-3 gap-4 mb-8">
          <div className="bg-blue-100 p-4 rounded-lg shadow-md">
            <p className="text-lg font-semibold">Total Value</p>
            <p className="text-2xl">{accountDetails.soldePrevu} FCFA</p>
          </div>
          <div className="bg-green-100 p-4 rounded-lg shadow-md">
            <p className="text-lg font-semibold">Actual Value</p>
            <p className="text-2xl">{accountDetails.soldeReel} FCFA</p>
          </div>
          <div className="bg-red-100 p-4 rounded-lg shadow-md">
            <p className="text-lg font-semibold">Unvalidated Invoices</p>
            <p className="text-2xl">{unvalidatedInvoices}</p>
          </div>
        </div>

        <div className="bg-white p-5 rounded-lg shadow-md">
          {invoices.length === 0 ? (
            <p className="text-center text-lg">No invoices available.</p>
          ) : (
            <>
              <table className="w-full border-separate border-spacing-y-2">
                <thead>
                  <tr className="bg-gradient-to-l from-primary-start to-primary-end">
                    <th className="text-center text-white p-4 text-xl font-bold border-gray-200 rounded-l-2xl">
                      #
                    </th>
                    <th className="text-center text-white p-4 text-xl font-bold border-gray-200">
                      Date
                    </th>
                    <th className="text-center text-white p-4 text-xl font-bold border-gray-200">
                      Amount
                    </th>
                    <th className="text-center text-white p-4 text-xl font-bold border-gray-200">
                      Operator
                    </th>
                    <th className="text-center text-white p-4 text-xl font-bold border-gray-200 rounded-r-2xl">
                      Operations
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {invoices.map((invoice, index) => (
                    <tr key={index} className="bg-gray-100 shadow-sm">
                      <td
                        className={`p-4 text-md text-blue-900 text-center rounded-l-lg border-l-4 ${
                          invoice.isAccounted
                            ? "border-green-500"
                            : "border-red-500"
                        }`}
                      >
                        {index + 1}
                      </td>
                      <td className="p-4 text-md text-center">
                        {formatDateOnlyWithoutWeekDay(invoice.date)}
                      </td>
                      <td className="p-4 text-md text-center">
                        {invoice.amount} FCFA
                      </td>
                      <td className="p-4 text-md text-center">
                        {invoice.operator.first_name}{" "}
                        {invoice.operator.last_name}
                      </td>
                      <td className="p-4 text-center rounded-r-lg">
                        <div className="w-full items-center justify-center flex gap-6">
                          <Tooltip placement="left" title="View details">
                            <button
                              onClick={() => {
                                const fullInvoice = invoices.find(
                                  (inv) => inv.id === invoice.id
                                );
                                setSelectedInvoice(fullInvoice);
                                setCanOpenInvoiceDetailsModal(true);
                              }}
                              className="flex items-center justify-center w-9 h-9 text-primary-end text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300"
                            >
                              <FaEye />
                            </button>
                          </Tooltip>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>

              <div className="flex justify-center mt-6">
                <div className="flex gap-4">
                  <Tooltip placement="left" title="Previous page">
                    <button
                      onClick={() => handlePageChange("prev")}
                      disabled={!previousUrl}
                      className={`w-10 h-10 border-2 rounded-lg flex items-center justify-center ${
                        !previousUrl
                          ? "text-gray-400 cursor-not-allowed"
                          : "text-secondary hover:bg-secondary hover:text-white"
                      }`}
                    >
                      <FaArrowLeft />
                    </button>
                  </Tooltip>
                  <p className="text-secondary text-2xl font-bold mt-2">
                    Page {currentPage} of {totalPages}
                  </p>
                  <Tooltip placement="right" title="Next page">
                    <button
                      onClick={() => handlePageChange("next")}
                      disabled={!nextUrl}
                      className={`w-10 h-10 border-2 rounded-lg flex items-center justify-center ${
                        !nextUrl
                          ? "text-gray-400 cursor-not-allowed"
                          : "text-secondary hover:bg-secondary hover:text-white"
                      }`}
                    >
                      <FaArrowRight />
                    </button>
                  </Tooltip>
                </div>
              </div>
            </>
          )}
        </div>

        <InvoiceDetailsModal
          isOpen={canOpenInvoiceDetailsModal}
          onClose={() => setCanOpenInvoiceDetailsModal(false)}
          invoice={selectedInvoice}
          validateInvoice={validateInvoice}
          refreshInvoice={refreshInvoices}
        />

        <ErrorModal
          isOpen={canOpenErrorMessageModal}
          onCloseErrorModal={() => setCanOpenErrorMessageModal(false)}
          message={errorMessage}
        />

        <SuccessModal
          isOpen={canOpenSuccessModal}
          canOpenSuccessModal={setCanOpenSuccessModal}
          message={successMessage}
          makeAction={() => fetchAccountDetails()} // Rafraîchir les données après succès
        />

        <Tooltip placement="top" title="Add a new operation">
          <button
            onClick={() => setIsAddOperationModalVisible(true)}
            className="fixed bottom-5 right-5 rounded-full w-14 h-14 bg-gradient-to-r text-4xl font-bold text-white from-primary-start to-primary-end hover:text-5xl transition-all duration-300 flex items-center justify-center"
          >
            <FaPlus />
          </button>
        </Tooltip>

        {isAddOperationModalVisible && (
          <div className="fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-md relative">
              <div className="flex justify-between items-center bg-gradient-to-r from-primary-start to-primary-end p-4 rounded-t-lg">
                <h2 className="text-xl font-bold text-white">
                  Add a new financial operation
                </h2>
                <button
                  onClick={() => setIsAddOperationModalVisible(false)}
                  className="text-white hover:text-gray-200 transition duration-300"
                >
                  <FaTimes size={24} />
                </button>
              </div>

              <div className="p-6 space-y-4">
                <div>
                  <label
                    htmlFor="newOperationName"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Operation Name
                  </label>
                  <div className="relative">
                    <FaHashtag className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                      id="newOperationName"
                      type="text"
                      placeholder="Operation Name"
                      value={newOperationName}
                      onChange={(e) => setNewOperationName(e.target.value)}
                      className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
              </div>

              <div className="bg-gray-50 px-6 py-4 flex justify-end items-center rounded-b-lg">
                <button
                  onClick={() => setIsAddOperationModalVisible(false)}
                  className="flex items-center px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition duration-300 mr-2"
                >
                  Cancel
                </button>
                <button
                  onClick={handleAddOperation}
                  disabled={!newOperationName}
                  className={`flex items-center px-4 py-2 ${
                    newOperationName
                      ? "bg-green-500 text-white hover:bg-green-600"
                      : "bg-gray-300 text-gray-700 cursor-not-allowed"
                  } rounded-md transition duration-300`}
                >
                  Add
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </AccountantDashBoard>
  );
}
// END OF FILE: src/Pages/Accountant/AccountDetailsPage.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/AccountList.jsx

import {
  FaArrowLeft,
  FaArrowRight,
  FaEye,
  FaSearch,
  FaTrash,
  FaPlus,
} from "react-icons/fa";
import { Tooltip } from "antd";
import { useEffect, useState } from "react";
import { SuccessModal } from "../Modals/SuccessModal.jsx";
import Wait from "../Modals/wait.jsx";
import { ErrorModal } from "../Modals/ErrorModal.jsx";
import axiosInstanceAccountant from "../../Utils/axiosInstanceAccountant.js";
import { ConfirmationModal } from "../Modals/ConfirmAction.Modal.jsx";
import { useNavigate } from "react-router-dom";
import { AccountantNavLink } from "./AccountantNavLink";
import { AccountantDashBoard } from "./Components/AccountantDashboard";
//import { ViewAccountDetailsModal } from "./ViewAccountDetailsModal.jsx";
import { AddAccountModal } from "./Components/AddAccountModal.jsx";
import { AccountantNavBar } from "./Components/AccountantNavBar";

export function AccountList() {
  const [errorMessage, setErrorMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [canOpenSuccessModal, setCanOpenSuccessModal] = useState(false);
  const [canOpenErrorMessageModal, setCanOpenErrorMessageModal] =
    useState(false);
  useState(false);
  const [canOpenConfirmActionModal, setCanOpenConfirmActionModal] =
    useState(false);
  const [accountToDelete, setAccountToDelete] = useState({});
  const [canOpenAddAccountModal, setCanOpenAddAccountModal] = useState(false);
  const [accountList, setAccountList] = useState([]);
  const [numberOfAccounts, setNumberOfAccounts] = useState(0);
  const [nextUrlForRenderAccountList, setNextUrlForRenderAccountList] =
    useState("");
  const [previousUrlForRenderAccountList, setPreviousUrlForRenderAccountList] =
    useState("");
  const [actualPageNumber, setActualPageNumber] = useState(1);
  const [successMessage, setSuccessMessage] = useState("");

  const navigate = useNavigate();
  // Fonction pour rediriger vers la page de détails du compte
  const handleViewAccountDetails = (account) => {
    navigate(`/accountant/account-details/${account.id}`, {
      state: { account },
    });
  };

  function calculateNumberOfSlide() {
    return numberOfAccounts % 5 === 0
      ? numberOfAccounts / 5
      : Math.floor(numberOfAccounts / 5) + 1;
  }

  function updateActualPageNumber(action) {
    if (action === "next") {
      if (actualPageNumber < calculateNumberOfSlide()) {
        setActualPageNumber(actualPageNumber + 1);
      }
    } else {
      if (actualPageNumber > 1) {
        setActualPageNumber(actualPageNumber - 1);
      }
    }
  }

  async function fetchAccountList() {
    try {
      const response = await axiosInstanceAccountant.get(
        "/acccount-state/get_by_budget_exercise/"
      );
      console.log(response);
      if (response.status === 200) {
        setAccountList(response.data);
        setNumberOfAccounts(response.data.length);
        setNextUrlForRenderAccountList(response.data.next);
        setPreviousUrlForRenderAccountList(response.data.previous);
      }
    } catch (error) {
      setAccountList([]);
      setNumberOfAccounts(0);
      setNextUrlForRenderAccountList("");
      setPreviousUrlForRenderAccountList("");
      console.log(error);
    }
  }

  useEffect(() => {
    fetchAccountList();
  }, []);

  async function fetchNextOrPreviousAccountList(url) {
    if (url) {
      try {
        const response = await axiosInstanceAccountant.get(url);
        if (response.status === 200) {
          setAccountList(response.data.results);
          setNumberOfAccounts(response.data.count);
          setNextUrlForRenderAccountList(response.data.next);
          setPreviousUrlForRenderAccountList(response.data.previous);
        }
      } catch (error) {
        setAccountList([]);
        setNumberOfAccounts(0);
        setPreviousUrlForRenderAccountList("");
        setNextUrlForRenderAccountList("");
        console.log(error);
      }
    }
  }

  async function deleteAccount(accountId) {
    setIsLoading(true);
    try {
      const response = await axiosInstanceAccountant.delete(
        `/account/${accountId}/`
      );
      if (response.status === 204) {
        setIsLoading(false);
        setSuccessMessage("Account deleted successfully!");
        setErrorMessage("");
        setCanOpenErrorMessageModal(false);
        setCanOpenSuccessModal(true);
      }
    } catch (error) {
      setIsLoading(false);
      setSuccessMessage("");
      setErrorMessage(error.response.data.detail);
      setCanOpenSuccessModal(false);
      setCanOpenErrorMessageModal(true);
      console.log(error);
    }
  }

  return (
    <AccountantDashBoard
      requiredRole={"Accountant"}
      linkList={AccountantNavLink}
    >
      <AccountantNavBar></AccountantNavBar>
      <div className="mt-5 flex flex-col relative">
        {/* Header content with search bar */}
        <div className="flex justify-between mb-5">
          <p className="font-bold text-xl mt-2 ml-5">List Of Accounts</p>
          <div className="flex mr-5">
            <div className="flex w-[300px] h-10 border-2 border-secondary rounded-lg">
              <FaSearch className="text-xl text-secondary m-2" />
              <input
                type="text"
                placeholder={"Search for a specific account"}
                className="border-none focus:outline-none focus:ring-0"
              />
            </div>
            <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
              Search
            </button>
          </div>
        </div>

        {/* List of registered accounts */}
        <div className="ml-5 mr-5">
          <table className="w-full border-separate border-spacing-y-2">
            <thead>
              <tr className="bg-gradient-to-l from-primary-start to-primary-end">
                <th className="text-center text-white p-4 text-xl font-bold border-gray-200 rounded-l-2xl">
                  No
                </th>
                <th className="text-center text-white p-4 text-xl font-bold border-gray-200">
                  Account Number
                </th>
                <th className="text-center text-white p-4 text-xl font-bold border-gray-200">
                  Account Label
                </th>
                <th className="text-center text-white p-4 text-xl font-bold border-gray-200">
                  Current Amount
                </th>
                <th className="text-center text-white p-4 text-xl font-bold border-gray-200">
                  Physical Amount
                </th>
                <th className="text-center text-white p-4 text-xl font-bold flex-col rounded-r-2xl">
                  <p>Operations</p>
                </th>
              </tr>
            </thead>
            <tbody>
              {accountList.length > 0 &&
                accountList &&
                accountList?.map((account, index) => (
                  <tr key={account.id || index} className="bg-gray-100">
                    <td className="p-4 text-md text-blue-900 rounded-l-lg text-center">
                      {index + 1}
                    </td>
                    <td className="p-4 text-md text-center font-bold">
                      {account.account.number}
                    </td>
                    <td className="p-4 text-md text-center">
                      {account.account.libelle}
                    </td>
                    <td className="p-4 text-md text-center">
                      {account.soldePrevu}
                    </td>
                    <td className="p-4 text-md text-center">
                      {account.soldeReel}
                    </td>
                    <td className="p-4 relative rounded-r-lg">
                      <div className="w-full items-center justify-center flex gap-6">
                        <Tooltip placement={"left"} title={"View details"}>
                          <button
                            onClick={() => handleViewAccountDetails(account)}
                            className="flex items-center justify-center w-9 h-9 text-primary-end text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300"
                          >
                            <FaEye />
                          </button>
                        </Tooltip>

                        <Tooltip placement={"right"} title={"Delete"}>
                          <button
                            onClick={() => {
                              setAccountToDelete(account),
                                setCanOpenConfirmActionModal(true);
                            }}
                            className="flex items-center justify-center w-9 h-9 text-red-400 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300"
                          >
                            <FaTrash />
                          </button>
                        </Tooltip>
                      </div>
                    </td>
                  </tr>
                ))}
            </tbody>
          </table>

          {/* Pagination content */}
          <div className="fixed w-full justify-center -right-16 bottom-0 flex mt-6 mb-4">
            <div className="flex gap-4">
              <Tooltip placement={"left"} title={"Previous slide"}>
                <button
                  onClick={async () => {
                    await fetchNextOrPreviousAccountList(
                      previousUrlForRenderAccountList
                    ),
                      updateActualPageNumber("prev");
                  }}
                  className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl text-secondary hover:text-2xl duration-300 transition-all hover:text-white shadow-xl flex justify-center items-center mt-2"
                >
                  <FaArrowLeft />
                </button>
              </Tooltip>
              <p className="text-secondary text-2xl font-bold mt-4">
                {actualPageNumber}/{calculateNumberOfSlide()}
              </p>
              <Tooltip placement={"right"} title={"Next slide"}>
                <button
                  onClick={async () => {
                    await fetchNextOrPreviousAccountList(
                      nextUrlForRenderAccountList
                    ),
                      updateActualPageNumber("next");
                  }}
                  className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl text-secondary hover:text-2xl duration-300 transition-all hover:text-white shadow-xl flex justify-center items-center mt-2"
                >
                  <FaArrowRight />
                </button>
              </Tooltip>
            </div>
          </div>

          {/* Add new account button */}
          <Tooltip placement={"top"} title={"Add New Account"}>
            <button
              onClick={() => setCanOpenAddAccountModal(true)}
              className="fixed bottom-5 right-5 rounded-full w-14 h-14 bg-gradient-to-r text-4xl font-bold text-white from-primary-start to-primary-end hover:text-5xl transition-all duration-300 flex items-center justify-center"
            >
              <FaPlus />
            </button>
          </Tooltip>

          {/* Modals content */}
          <AddAccountModal
            isOpen={canOpenAddAccountModal}
            onClose={() => setCanOpenAddAccountModal(false)}
            setCanOpenSuccessModal={setCanOpenSuccessModal}
            setSuccessMessage={setSuccessMessage}
            setIsLoading={setIsLoading}
          />
          <SuccessModal
            isOpen={canOpenSuccessModal}
            message={successMessage}
            canOpenSuccessModal={setCanOpenSuccessModal}
            makeAction={async () => {
              await fetchAccountList(), calculateNumberOfSlide();
            }}
          />
          <ErrorModal
            isOpen={canOpenErrorMessageModal}
            onCloseErrorModal={() => setCanOpenErrorMessageModal(false)}
            message={errorMessage}
          />
          {/* <ViewAccountDetailsModal
          isOpen={canOpenViewAccountDetailModal}
          account={selectedAccountDetails}
          onClose={() => setCanOpenViewAccountDetailModal(false)}
        /> */}
          {isLoading && <Wait />}
          <ConfirmationModal
            isOpen={canOpenConfirmActionModal}
            onClose={() => setCanOpenConfirmActionModal(false)}
            onConfirm={async () => await deleteAccount(accountToDelete.id)}
            title={"Delete Account"}
            message={`Are you sure you want to delete the account ${accountToDelete?.account?.number} - ${accountToDelete?.account?.libelle}?`}
          />
        </div>
      </div>
    </AccountantDashBoard>
  );
}
// END OF FILE: src/Pages/Accountant/AccountList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/Components/AccountantDashboard.jsx

import { useState } from "react";
import { Link, Navigate, useLocation } from "react-router-dom";
import PropTypes from "prop-types";
import { AccessDenied } from "../../../GlobalComponents/AccessDenied.jsx";
import { useAuthentication } from "../../../Utils/Provider.jsx";
import { ChevronDown, ChevronUp } from "lucide-react";

export function AccountantDashBoard({ children, linkList, requiredRole }) {
  AccountantDashBoard.propTypes = {
    children: PropTypes.node.isRequired,
    linkList: PropTypes.array.isRequired,
    requiredRole: PropTypes.string.isRequired,
  };

  const location = useLocation();
  const activeLink = location.pathname;
  const { isAuthenticated, hasRole } = useAuthentication();
  const [expandedLinks, setExpandedLinks] = useState({});

  function toggleSubMenu(linkName) {
    setExpandedLinks((prev) => ({
      ...prev,
      [linkName]: !prev[linkName],
    }));
  }

  function renderLink(item, index, isSubLink = false) {
    const IconComponent = item.icon;
    const isActive = activeLink.startsWith(item.link);
    const hasSubLinks = item.subLinks && item.subLinks.length > 0;

    return (
      <div key={index}>
        {!hasSubLinks ? (
          <Link
            className={`transition-all duration-400 flex p-3 items-center cursor-pointer ${
              isActive
                ? "bg-white rounded-l-full mb-2 mt-2"
                : "hover:bg-white/20 hover:rounded-l-full"
            } ${isSubLink ? "ml-4" : "ml-5"}`}
            to={item.link}
          >
            {IconComponent && (
              <IconComponent
                className={
                  isActive
                    ? "text-black text-xl mr-3"
                    : "text-xl mr-3 text-white"
                }
              />
            )}
            <p
              className={
                isActive
                  ? "text-black font-bold text-md"
                  : "text-md font-bold text-white"
              }
            >
              {item.name}
            </p>
          </Link>
        ) : (
          <div
            className="transition-all duration-400 flex p-3.5 items-center cursor-pointer ml-5 hover:bg-white/20 hover:rounded-l-full"
            onClick={() => toggleSubMenu(item.name)}
          >
            {IconComponent && (
              <IconComponent
                className={
                  isActive
                    ? "text-black text-xl mr-3"
                    : "text-xl mr-3 text-white"
                }
              />
            )}
            <p
              className={
                isActive
                  ? "text-black font-bold text-md"
                  : "text-md font-bold text-white"
              }
            >
              {item.name}
            </p>
            {hasSubLinks &&
              (expandedLinks[item.name] ? (
                <ChevronUp
                  className={`ml-auto ${
                    isActive ? "text-black" : "text-white"
                  }`}
                />
              ) : (
                <ChevronDown
                  className={`ml-auto ${
                    isActive ? "text-black" : "text-white"
                  }`}
                />
              ))}
          </div>
        )}
        {hasSubLinks && !expandedLinks[item.name] && (
          <div className="ml-8 mt-2">
            {item.subLinks.map((subItem, subIndex) =>
              renderLink(subItem, subIndex, true)
            )}
          </div>
        )}
      </div>
    );
  }

  if (!isAuthenticated()) {
    return <Navigate to="/login" />;
  }

  if (!hasRole(requiredRole)) {
    return <AccessDenied Role={requiredRole} />;
  }

  return (
    <div className="flex h-screen">
      <div className="w-[19%] fixed h-screen bg-gradient-to-t from-primary-start to-primary-end flex flex-col overflow-y-auto scrollbar">
        <h1 className="text-3xl font-bold ml-6 mb-10 mt-7 text-white">
          Fultang Clinic
        </h1>
        <nav className="flex flex-col space-y-1.5 mb-2 ">
          {linkList.map((item, index) => renderLink(item, index))}
        </nav>
      </div>
      <div className="flex-1 min-h-screen overflow-x-hidden ml-[17.5%]">
        {children}
      </div>
    </div>
  );
}
// END OF FILE: src/Pages/Accountant/Components/AccountantDashboard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/Components/AccountantNavBar.jsx

import { FaCog, FaEnvelope, FaSignOutAlt } from "react-icons/fa";
import { Tooltip } from "antd";
import { useAuthentication } from "../../../Utils/Provider.jsx";
import userIcon from "../../../assets/userIcon.png";

export function AccountantNavBar() {
  const { logout, userData } = useAuthentication();

  const applyNavLinkBtnStyle = () => {
    return " w-12 h-10 mt-1 border-2 bg-gray-100 flex justify-center items-center rounded-xl shadow-xl hover:bg-secondary text-secondary text-xl hover:text-white transition-all duration-300";
  };

  return (
    <>
      <div className="border-b-2 m-3  border-b-gray-300">
        <div className="w-full h-[70px] flex justify-between">
          <h1 className="ml-7 text-4xl text-secondary mt-3.5 font-bold">
            Accountant
          </h1>
          <div className="flex gap-3 mt-3.5 mb-4 mr-5">
            <Tooltip placement={"top"} title={"settings"}>
              <button className={applyNavLinkBtnStyle()}>
                <FaCog />
              </button>
            </Tooltip>

            <Tooltip placement={"top"} title={"Messages"}>
              <button className={applyNavLinkBtnStyle()}>
                <FaEnvelope />
              </button>
            </Tooltip>
            <Tooltip placement={"top"} title={"LogOut"}>
              <button
                onClick={() => {
                  logout();
                }}
                className={
                  " w-12 h-10 mt-1 border-2 bg-red-400 flex justify-center items-center rounded-xl shadow-xl hover:bg-white text-white text-xl hover:text-red-500 transition-all duration-300"
                }
              >
                <FaSignOutAlt />
              </button>
            </Tooltip>
            <Tooltip placement={"top"} title={"Profile"}>
              <button className="ml-3 flex">
                <p className="font-bold text-secondary text-xl mt-2">
                  {"Hello " + userData?.username + "!"}
                </p>
                <img
                  src={userIcon}
                  alt={"user-icon"}
                  className="w-12 h-12 ml-2 mr-3"
                />
              </button>
            </Tooltip>
          </div>
        </div>
      </div>
    </>
  );
}
// END OF FILE: src/Pages/Accountant/Components/AccountantNavBar.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/Components/AddAccountModal.jsx

"use client";

import { useState } from "react";
import PropTypes from "prop-types";
import {
  FaTimes,
  FaSave,
  FaBan,
  FaHashtag,
  FaTag,
  FaExchangeAlt,
} from "react-icons/fa";
import axiosInstance from "../../../Utils/axiosInstanceAccountant.js";

export function AddAccountModal({
  isOpen,
  onClose,
  setCanOpenSuccessModal,
  setSuccessMessage,
  setIsLoading,
}) {
  const [accountNumber, setAccountNumber] = useState("");
  const [accountLabel, setAccountLabel] = useState("");
  const [error, setError] = useState("");
  const [typeFlux, setTypeFlux] = useState("");
  const shouldShowTypeFlux = /^[45]/.test(accountNumber);

  // Fonction pour valider si le bouton Save doit être activé
  const isFormValid = () => {
    return (
      accountNumber &&
      accountLabel &&
      (!shouldShowTypeFlux || typeFlux) &&
      /^\d{4,}$/.test(accountNumber)
    );
  };

  const handleAddAccount = async () => {
    const shouldShowTypeFlux = /^[45]/.test(accountNumber);

    if (!accountNumber || !accountLabel || (shouldShowTypeFlux && !typeFlux)) {
      setError("All fields are required.");
      return;
    }

    if (!/^\d{4,}$/.test(accountNumber)) {
      setError(
        "The account number must contain at least 4 digits and only digits."
      );
      return;
    }

    setError("");
    setIsLoading(true);
    const accountData = {
      number: accountNumber,
      libelle: accountLabel,
    };

    if (shouldShowTypeFlux) {
      accountData.status = typeFlux;
    }

    try {
      const response = await axiosInstance.post("/account/", accountData);

      if (response.status === 201) {
        setSuccessMessage("Account added successfully!");
        setCanOpenSuccessModal(true);
        setAccountNumber("");
        setAccountLabel("");
        onClose();
      }
    } catch (error) {
      console.error("Error adding account:", error);
      setError("An error occurred while adding the account.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleAccountNumberChange = (e) => {
    const value = e.target.value;
    if (/^\d*$/.test(value)) {
      setAccountNumber(value);
      if (!/^[45]/.test(value)) {
        setTypeFlux("");
      }
    }
    setError("");
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
        <div className="flex justify-between items-center bg-gradient-to-r from-primary-start to-primary-end p-4 rounded-t-lg">
          <h2 className="text-xl font-bold text-white flex items-center">
            <FaSave className="mr-2" />
            Add New Account
          </h2>
          <button
            onClick={onClose}
            className="text-white hover:text-gray-200 transition duration-300"
          >
            <FaTimes size={24} />
          </button>
        </div>

        <div className="p-6 space-y-4">
          <p className="text-sm text-gray-600 mb-4">
            Fill in the information for the new account below.
          </p>

          <div>
            <label
              htmlFor="accountNumber"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Account Number
            </label>
            <div className="relative">
              <FaHashtag className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                id="accountNumber"
                type="text"
                value={accountNumber}
                onChange={handleAccountNumberChange}
                className={`w-full pl-10 pr-3 py-2 border ${
                  error ? "border-red-500" : "border-gray-300"
                } rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500`}
                placeholder="Enter at least 4 digits"
              />
            </div>
          </div>

          <div>
            <label
              htmlFor="accountLabel"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Account Label
            </label>
            <div className="relative">
              <FaTag className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                id="accountLabel"
                type="text"
                value={accountLabel}
                onChange={(e) => setAccountLabel(e.target.value)}
                className={`w-full pl-10 pr-3 py-2 border ${
                  error ? "border-red-500" : "border-gray-300"
                } rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500`}
                placeholder="Enter the account label"
              />
            </div>
          </div>

          {shouldShowTypeFlux && (
            <div>
              <label
                htmlFor="typeFlux"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Type of Flux
              </label>
              <div className="relative">
                <FaExchangeAlt className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <select
                  id="typeFlux"
                  value={typeFlux}
                  onChange={(e) => setTypeFlux(e.target.value)}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Select a type</option>
                  <option value="credit">Credit</option>
                  <option value="debit">Debit</option>
                  <option value="creance">Receivable</option>
                </select>
              </div>
            </div>
          )}

          {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
        </div>

        <div className="bg-gray-50 px-6 py-4 flex justify-end items-center rounded-b-lg">
          <button
            onClick={onClose}
            className="flex items-center px-4 py-2 bg-red-500 text-white rounded-md hover:bg-gray-400 transition duration-300 mr-2"
          >
            <FaBan className="mr-2" />
            Cancel
          </button>
          <button
            onClick={handleAddAccount}
            disabled={!isFormValid()}
            className={`flex items-center px-4 py-2 ${
              isFormValid()
                ? "bg-green-500 text-white hover:bg-green-600"
                : "bg-gray-300 text-gray-700 cursor-not-allowed"
            } rounded-md transition duration-300`}
          >
            <FaSave className="mr-2" />
            Save
          </button>
        </div>
      </div>
    </div>
  );
}

AddAccountModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  setCanOpenSuccessModal: PropTypes.func.isRequired,
  setSuccessMessage: PropTypes.func.isRequired,
  setIsLoading: PropTypes.func.isRequired,
};
// END OF FILE: src/Pages/Accountant/Components/AddAccountModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/Components/BalanceSheet.jsx

"use client";

import { useEffect, useState } from "react";
import axiosInstanceAccountant from "../../../Utils/axiosInstanceAccountant";
import {
  FaBalanceScale,
  FaChartLine,
  FaCoins,
  FaFileInvoice,
  FaChevronDown,
  FaChevronUp,
} from "react-icons/fa";

export default function BalanceSheet({ year }) {
  const [balanceSheetData, setBalanceSheetData] = useState({ data: [] });
  const [expandedCategories, setExpandedCategories] = useState({});

  useEffect(() => {
    async function fetchData() {
      try {
        const response = await axiosInstanceAccountant.get(
          `/budget-exercise/get_balance_sheet/`
        );
        console.log(response.data);
        setBalanceSheetData(response.data);
      } catch (error) {
        console.log(error);
      }
    }
    fetchData();
  }, []);

  const formatAmount = (amount) => {
    return new Intl.NumberFormat("fr-FR", {
      style: "currency",
      currency: "XAF",
    }).format(amount);
  };

  const toggleCategory = (category) => {
    setExpandedCategories((prev) => ({
      ...prev,
      [category]: !prev[category],
    }));
  };

  const renderCategoryCard = (data, title, icon) => (
    <div key={title} className="bg-white rounded-lg shadow-md p-4 mb-4">
      <div
        className="flex items-center justify-between cursor-pointer"
        onClick={() => toggleCategory(title)}
      >
        <div className="flex items-center">
          {icon}
          <h3 className="text-lg font-semibold text-secondary ml-2">{title}</h3>
        </div>
        {expandedCategories[title] ? (
          <FaChevronUp className="text-gray-500" />
        ) : (
          <FaChevronDown className="text-gray-500" />
        )}
      </div>
      {expandedCategories[title] && (
        <div className="mt-4">
          <table className="w-full">
            <thead>
              <tr className="border-b">
                <th className="px-2 py-1 text-left text-sm font-medium text-gray-600">
                  Code
                </th>
                <th className="px-2 py-1 text-left text-sm font-medium text-gray-600">
                  Libellé
                </th>
                <th className="px-2 py-1 text-right text-sm font-medium text-gray-600">
                  Montant
                </th>
              </tr>
            </thead>
            <tbody>
              {data.items.map((item) => (
                <tr key={item.accountNo} className="hover:bg-gray-50">
                  <td className="px-2 py-1 text-sm font-mono">
                    {item.accountNo}
                  </td>
                  <td className="px-2 py-1 text-sm">{item.label}</td>
                  <td className="px-2 py-1 text-right text-sm">
                    {formatAmount(item.amount)}
                  </td>
                </tr>
              ))}
              <tr className="bg-gray-50 font-semibold">
                <td colSpan={2} className="px-2 py-1">
                  Total
                </td>
                <td className="px-2 py-1 text-right">
                  {formatAmount(data.total)}
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      )}
    </div>
  );

  const renderSummary = (summaryData) => (
    <div className="bg-white rounded-lg shadow-md p-4 mb-6">
      <div className="flex items-center mb-4">
        <FaChartLine className="text-secondary text-xl" />
        <h3 className="text-lg font-semibold text-secondary ml-2">Summary</h3>
      </div>
      <table className="w-full">
        <thead>
          <tr className="border-b">
            <th className="px-2 py-1 text-left text-sm font-medium text-gray-600">
              Item
            </th>
            <th className="px-2 py-1 text-right text-sm font-medium text-gray-600">
              Value
            </th>
          </tr>
        </thead>
        <tbody>
          {summaryData.map((item, index) => (
            <tr key={index} className="hover:bg-gray-50">
              <td className="px-2 py-1 text-sm">{item.item}</td>
              <td className="px-2 py-1 text-right text-sm">
                {item.value !== null ? formatAmount(item.value) : "N/A"}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );

  const assetCategories = [
    "IMMOBILIZED ACTIVE",
    "CIRCULANT ACTIVE",
    "ACTIVE TREASURY",
  ];
  const liabilityCategories = [
    "EQUITY",
    "FINANCIAL DEBT",
    "CIRCULANT PASSIVE",
    "PASSIVE TREASURY",
  ];

  return (
    <div className="container mx-auto p-4">
      {/* Summary Section at the Top */}
      {balanceSheetData.data.find((section) => Array.isArray(section.data)) &&
        renderSummary(
          balanceSheetData.data.find((section) => Array.isArray(section.data))
            .data
        )}

      <div className="grid md:grid-cols-2 gap-6">
        {/* Assets Side */}
        <div>
          <div className="flex items-center mb-4">
            <FaCoins className="text-secondary text-xl" />
            <h2 className="text-xl font-bold text-secondary ml-2">Assets</h2>
          </div>
          {balanceSheetData.data
            .filter((section) => assetCategories.includes(section.category))
            .map((section) =>
              renderCategoryCard(
                section,
                section.category,
                <FaFileInvoice className="text-secondary text-lg" />
              )
            )}
        </div>

        {/* Liabilities and Equity Side */}
        <div>
          <div className="flex items-center mb-4">
            <FaBalanceScale className="text-secondary text-xl" />
            <h2 className="text-xl font-bold text-secondary ml-2">
              Liabilities & Equity
            </h2>
          </div>
          {balanceSheetData.data
            .filter((section) => liabilityCategories.includes(section.category))
            .map((section) =>
              renderCategoryCard(
                section,
                section.category,
                <FaFileInvoice className="text-secondary text-lg" />
              )
            )}
        </div>
      </div>
    </div>
  );
}
// END OF FILE: src/Pages/Accountant/Components/BalanceSheet.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/Components/FinancialCharts.jsx

import {
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";

export default function FinancialCharts({ data }) {
  // Exemple de données formatées pour les graphiques
  const assetData = [
    {
      name: "Immobilized Assets",
      value: data?.assetCategories?.[0]?.total || 0,
    },
    {
      name: "Circulating Assets",
      value: data?.assetCategories?.[1]?.total || 0,
    },
    { name: "Treasury Assets", value: data?.assetCategories?.[2]?.total || 0 },
  ];

  const liabilityData = [
    { name: "Equity", value: data?.liabilityCategories?.[0]?.total || 0 },
    {
      name: "Financial Debt",
      value: data?.liabilityCategories?.[1]?.total || 0,
    },
    {
      name: "Circulating Liabilities",
      value: data?.liabilityCategories?.[2]?.total || 0,
    },
    {
      name: "Treasury Liabilities",
      value: data?.liabilityCategories?.[3]?.total || 0,
    },
  ];

  const colors = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042"]; // Couleurs pour les graphiques

  return (
    <div className="grid md:grid-cols-2 gap-6">
      {/* Graphique en camembert pour les actifs */}
      <div className="p-6 bg-white rounded-lg shadow-md">
        <h4 className="text-lg font-semibold mb-4 text-secondary">
          Assets Distribution
        </h4>
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <Pie
              data={assetData}
              cx="50%"
              cy="50%"
              outerRadius={100}
              fill="#8884d8"
              dataKey="value"
              label
            >
              {assetData.map((entry, index) => (
                <Cell
                  key={`cell-${index}`}
                  fill={colors[index % colors.length]}
                />
              ))}
            </Pie>
            <Tooltip />
            <Legend />
          </PieChart>
        </ResponsiveContainer>
      </div>

      {/* Graphique en barres pour les passifs */}
      <div className="p-6 bg-white rounded-lg shadow-md">
        <h4 className="text-lg font-semibold mb-4 text-secondary">
          Liabilities Structure
        </h4>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={liabilityData}>
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Bar dataKey="value" fill="#8884d8" />
          </BarChart>
        </ResponsiveContainer>
      </div>

      {/* Graphique linéaire pour l'évolution des actifs et passifs */}
      <div className="col-span-2 p-6 bg-white rounded-lg shadow-md">
        <h4 className="text-lg font-semibold mb-4 text-secondary">
          Assets vs Liabilities Over Time
        </h4>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={data?.timeSeriesData || []}>
            <XAxis dataKey="date" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Bar dataKey="assets" fill="#0088FE" />
            <Bar dataKey="liabilities" fill="#FF8042" />
          </BarChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}
// END OF FILE: src/Pages/Accountant/Components/FinancialCharts.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/Components/IncomeStatement.jsx

import { useEffect } from "react";
import axiosInstanceAccountant from "../../../Utils/axiosInstanceAccountant";

export default function IncomeStatement({ year }) {
  const expenses = [
    { code: "60", label: "Achats de biens et services", amount: 2500000 },
    { code: "63", label: "Impôts et taxes", amount: 350000 },
    { code: "64", label: "Charges de personnel", amount: 4200000 },
    { code: "66", label: "Charges financières", amount: 180000 },
    { code: "68", label: "Amortissements", amount: 420000 },
  ];

  const income = [
    { code: "70", label: "Ventes (chiffre d'affaires)", amount: 8250000 },
    { code: "74", label: "Subventions d'exploitation", amount: 150000 },
    { code: "76", label: "Produits financiers", amount: 75000 },
  ];

  useEffect(() => {
    async function fetchData() {
      try {
        const response = await axiosInstanceAccountant.get(
          `/budget-exercise/get_income_statement/`
        );

        console.log(response);
      } catch (error) {
        console.log(error);
      }
    }
    fetchData();
  }, []);

  const formatAmount = (amount) => {
    return new Intl.NumberFormat("fr-FR", {
      style: "currency",
      currency: "XAF",
    }).format(amount);
  };

  const totalExpenses = expenses.reduce((sum, item) => sum + item.amount, 0);
  const totalIncome = income.reduce((sum, item) => sum + item.amount, 0);
  const netResult = totalIncome - totalExpenses;

  return (
    <div className="space-y-6">
      <div className="grid md:grid-cols-2 gap-6">
        {/* Expenses Side */}
        <div>
          <h3 className="text-lg font-semibold mb-4 text-secondary">Charges</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead>
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Code
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Libellé
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Montant
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {expenses.map((item) => (
                  <tr key={item.code} className="hover:bg-gray-50">
                    <td className="px-4 py-2 font-mono text-sm">{item.code}</td>
                    <td className="px-4 py-2 text-sm">{item.label}</td>
                    <td className="px-4 py-2 text-right text-sm">
                      {formatAmount(item.amount)}
                    </td>
                  </tr>
                ))}
                <tr className="font-semibold bg-gray-50">
                  <td colSpan={2} className="px-4 py-2">
                    Total des charges
                  </td>
                  <td className="px-4 py-2 text-right">
                    {formatAmount(totalExpenses)}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        {/* Income Side */}
        <div>
          <h3 className="text-lg font-semibold mb-4 text-secondary">
            Produits
          </h3>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead>
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Code
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Libellé
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Montant
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {income.map((item) => (
                  <tr key={item.code} className="hover:bg-gray-50">
                    <td className="px-4 py-2 font-mono text-sm">{item.code}</td>
                    <td className="px-4 py-2 text-sm">{item.label}</td>
                    <td className="px-4 py-2 text-right text-sm">
                      {formatAmount(item.amount)}
                    </td>
                  </tr>
                ))}
                <tr className="font-semibold bg-gray-50">
                  <td colSpan={2} className="px-4 py-2">
                    Total des produits
                  </td>
                  <td className="px-4 py-2 text-right">
                    {formatAmount(totalIncome)}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div className="mt-8 p-4 bg-gray-50 rounded-lg">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-semibold text-secondary">
            Résultat net de l'exercice
          </h3>
          <span
            className={`text-xl font-bold ${
              netResult >= 0 ? "text-green-600" : "text-red-600"
            }`}
          >
            {formatAmount(netResult)}
          </span>
        </div>
      </div>
    </div>
  );
}
// END OF FILE: src/Pages/Accountant/Components/IncomeStatement.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/Components/InvoiceDetailsModal.jsx

import { useState } from "react";
import { format } from "date-fns";
import {
  FaTimes,
  FaUser,
  FaCalendar,
  FaMoneyBillWave,
  FaCheckCircle,
  FaTimesCircle,
  FaFileInvoice,
  FaSpinner,
} from "react-icons/fa";
import PropTypes from "prop-types";

export function InvoiceDetailsModal({
  isOpen,
  onClose,
  invoice,
  validateInvoice,
  refreshInvoice,
}) {
  const [isLoading, setIsLoading] = useState(false);

  if (!isOpen || !invoice) return null;

  const handleValidateInvoice = async (invoiceId) => {
    setIsLoading(true);
    try {
      await validateInvoice(invoiceId);
      await refreshInvoice(); // Recharger les détails après validation
      invoice.isAccounted = true;
    } catch (error) {
      console.error("Error validating invoice:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
      <div className="bg-white rounded-lg shadow-xl w-[700px] relative">
        {/* Overlay de chargement */}
        {isLoading && (
          <div className="absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center z-50">
            <FaSpinner className="animate-spin text-primary-start text-4xl" />
          </div>
        )}

        <div className="flex justify-between items-center bg-gradient-to-r from-primary-start to-primary-end p-4">
          <h2 className="text-2xl font-bold text-white">Invoice Details</h2>
          <button
            onClick={onClose}
            className="text-white hover:text-gray-200"
            disabled={isLoading}
          >
            <FaTimes size={24} />
          </button>
        </div>

        <div className="p-6">
          <div className="grid grid-cols-2 gap-4">
            <DetailItem
              icon={<FaFileInvoice />}
              label="Invoice ID"
              value={invoice.billCode}
            />
            <DetailItem
              icon={<FaCalendar />}
              label="Date"
              value={format(new Date(invoice.date), "PPP 'at' p")}
            />
            <DetailItem
              icon={<FaMoneyBillWave />}
              label="Amount"
              value={`${invoice.amount} FCFA`}
            />
            <DetailItem
              icon={
                invoice.isAccounted ? (
                  <FaCheckCircle className="text-green-500" />
                ) : (
                  <FaTimesCircle className="text-red-500" />
                )
              }
              label="Validated"
              value={invoice.isAccounted ? "Yes" : "No"}
            />
            <DetailItem
              icon={<FaUser />}
              label="Operator"
              value={`${invoice.operator.first_name} ${invoice.operator.last_name}`}
            />
          </div>

          {/* Invoice Items */}
          <div className="mt-6">
            <h3 className="text-lg font-semibold mb-2">Invoice Items</h3>
            <table className="w-full border-separate border-spacing-y-2">
              <thead>
                <tr className="bg-gray-200">
                  <th className="p-2 text-left">Designation</th>
                  <th className="p-2 text-left">Quantity</th>
                  <th className="p-2 text-left">Unit Price</th>
                  <th className="p-2 text-left">Total</th>
                </tr>
              </thead>
              <tbody>
                {invoice.bill_items &&
                  invoice.bill_items.map((item) => (
                    <tr key={item.id} className="bg-gray-100">
                      <td className="p-2">{item.designation}</td>
                      <td className="p-2">{item.quantity}</td>
                      <td className="p-2">{item.unityPrice} FCFA</td>
                      <td className="p-2">{item.total} FCFA</td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div>

          {/* Validation Button */}
          <div className="mt-6 flex justify-end">
            {invoice.isAccounted ? (
              <button
                onClick={onClose}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300"
              >
                OK
              </button>
            ) : (
              <button
                onClick={() => handleValidateInvoice(invoice.id)}
                className="flex items-center px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled={isLoading}
              >
                {isLoading ? (
                  <FaSpinner className="animate-spin mr-2" />
                ) : (
                  <FaCheckCircle className="mr-2" />
                )}
                Validate Invoice
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

function DetailItem({ icon, label, value }) {
  return (
    <div className="flex items-center space-x-2">
      <div className="text-primary-start">{icon}</div>
      <div>
        <p className="text-sm text-gray-500">{label}</p>
        <p className="font-semibold">{value}</p>
      </div>
    </div>
  );
}
DetailItem.propTypes = {
  icon: PropTypes.element.isRequired,
  label: PropTypes.string.isRequired,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
};

InvoiceDetailsModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  invoice: PropTypes.object,
  validateInvoice: PropTypes.func.isRequired,
  refreshInvoice: PropTypes.func.isRequired, // Ajout de refreshInvoice comme prop obligatoire
};
// END OF FILE: src/Pages/Accountant/Components/InvoiceDetailsModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/Components/ViewBillDetailsModal.jsx

import { format } from "date-fns";
import {
  FaTimes,
  FaUser,
  FaCalendar,
  FaMoneyBillWave,
  FaCheckCircle,
  FaTimesCircle,
} from "react-icons/fa";

export function ViewBillDetailsModal({ isOpen, onClose, billDetails }) {
  if (!isOpen || !billDetails) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
      <div className="bg-white rounded-lg shadow-xl w-[700px]">
        <div className="bg-white rounded-xl shadow-lg overflow-hidden">
          <div className="flex justify-between items-center bg-gradient-to-r from-primary-start to-primary-end p-4">
            <h2 className="text-2xl font-bold text-white">Bill Details</h2>
            <button
              onClick={onClose}
              className="text-white hover:text-gray-200"
            >
              <FaTimes size={24} />
            </button>
          </div>
          <div className="p-6">
            <div className="grid grid-cols-2 gap-4">
              <DetailItem
                icon={<FaUser />}
                label="Bill Code"
                value={billDetails.billCode}
              />
              <DetailItem
                icon={<FaCalendar />}
                label="Date"
                value={format(new Date(billDetails.date), "PPP 'at' p")}
              />
              <DetailItem
                icon={<FaMoneyBillWave />}
                label="Amount"
                value={`$${billDetails.amount.toFixed(2)}`}
              />
              <DetailItem
                icon={
                  billDetails.isAccounted ? (
                    <FaCheckCircle className="text-green-500" />
                  ) : (
                    <FaTimesCircle className="text-red-500" />
                  )
                }
                label="Accounted"
                value={billDetails.isAccounted ? "Yes" : "No"}
              />
              <DetailItem
                icon={<FaUser />}
                label="Operation"
                value={billDetails.operation.name}
              />
              <DetailItem
                icon={<FaUser />}
                label="Operator"
                value={
                  billDetails.operator.first_name +
                  " " +
                  billDetails.operator.last_name
                }
              />
              <DetailItem
                icon={<FaUser />}
                label="Patient"
                value={
                  billDetails.patient ? billDetails.patient.toString() : "N/A"
                }
              />
              <DetailItem
                icon={<FaUser />}
                label="Source"
                value={billDetails.operator.role}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function DetailItem({ icon, label, value }) {
  return (
    <div className="flex items-center space-x-2">
      <div className="text-primary-start">{icon}</div>
      <div>
        <p className="text-sm text-gray-500">{label}</p>
        <p className="font-semibold">{value}</p>
      </div>
    </div>
  );
}
// END OF FILE: src/Pages/Accountant/Components/ViewBillDetailsModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/CreateFacture.jsx

"use client";

import { useState, useEffect } from "react";
import { Save, Plus, Trash } from "lucide-react";
import { useAuthentication } from "../../Utils/Provider";
import axiosInstanceAccountant from "../../Utils/axiosInstanceAccountant";
import axiosInstance from "../../Utils/axiosInstance.js";
import { ErrorModal } from "../Modals/ErrorModal";
import { SuccessModal } from "../Modals/SuccessModal.jsx";
import { AccountantDashBoard } from "./Components/AccountantDashboard.jsx";
import { AccountantNavBar } from "./Components/AccountantNavBar.jsx";
import { AccountantNavLink } from "./AccountantNavLink.js";

export function CreateFacturePage() {
  const [title, setTitle] = useState("");
  const [billItems, setBillItems] = useState([
    { quantity: 1, unityPrice: 0, designation: "", description: "" },
  ]);
  const [selectedOperation, setSelectedOperation] = useState("");
  const [financialOperations, setFinancialOperations] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [canOpenErrorMessageModal, setCanOpenErrorMessageModal] =
    useState(false);
  const [canOpenSuccessModal, setCanOpenSuccessModal] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const { userData } = useAuthentication();

  useEffect(() => {
    fetchFinancialOperations();
  }, []);

  async function fetchFinancialOperations() {
    try {
      const response = await axiosInstanceAccountant.get(
        "/financial-operation/"
      );
      if (response.status === 200) {
        setFinancialOperations(response.data);
      }
    } catch (error) {
      console.error("Error fetching financial operations:", error);
      setErrorMessage(
        "Failed to load financial operations. Please try again later."
      );
      setCanOpenErrorMessageModal(true);
    }
  }

  const handleBillItemChange = (index, field, value) => {
    const newBillItems = [...billItems];
    newBillItems[index][field] = value;
    if (field === "quantity" || field === "unityPrice") {
      newBillItems[index].total =
        newBillItems[index].quantity * newBillItems[index].unityPrice;
    }
    setBillItems(newBillItems);
  };

  const addBillItem = () => {
    setBillItems([
      ...billItems,
      {
        quantity: 1,
        unityPrice: 0,
        designation: "",
        description: "",
        total: 0,
      },
    ]);
  };

  const removeBillItem = (index) => {
    const newBillItems = billItems.filter((_, i) => i !== index);
    setBillItems(newBillItems);
  };

  const calculateTotal = () => {
    return billItems.reduce(
      (sum, item) => sum + item.quantity * item.unityPrice,
      0
    );
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsProcessing(true);

    const billData = {
      title,
      bill_items: billItems,
      amount: calculateTotal(),
      operation: Number(selectedOperation),
      operator: userData?.id,
    };
    console.log(billData);
    try {
      const response = await axiosInstance.post("/bill/", billData);
      if (response.status === 201) {
        setSuccessMessage("Invoice created successfully!");
        setCanOpenSuccessModal(true);
        // Reset form
        setTitle("");
        setBillItems([
          { quantity: 1, unityPrice: 0, designation: "", description: "" },
        ]);
        setSelectedOperation("");
      }
    } catch (error) {
      console.error("Error creating bill:", error);
      setErrorMessage(
        "Failed to create the invoice. Please check your inputs and try again."
      );
      setCanOpenErrorMessageModal(true);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <AccountantDashBoard
      requiredRole={"Accountant"}
      linkList={AccountantNavLink}
    >
      <AccountantNavBar></AccountantNavBar>
      <div className="container mx-auto p-6">
        <h1 className="text-3xl font-bold mb-6">Create New Invoice</h1>
        <form
          onSubmit={handleSubmit}
          className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4"
        >
          {/*
          <div className="mb-4">
            <label
              className="block text-gray-700 text-sm font-bold mb-2"
              htmlFor="title"
            >
              Invoice Name
            </label>
            <input
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="title"
              type="text"
              placeholder="e.g., Tax Payment, Staff Salaries, Equipment Purchase"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
          </div>
          */}
          <div className="mb-4">
            <label
              className="block text-gray-700 text-sm font-bold mb-2"
              htmlFor="operation"
            >
              Financial Operation Category
            </label>
            <select
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="operation"
              value={selectedOperation}
              onChange={(e) => setSelectedOperation(e.target.value)}
              required
            >
              <option value="">Select a category</option>
              {financialOperations.map((op) => (
                <option key={op.id} value={op.id}>
                  {op.name}
                </option>
              ))}
            </select>
          </div>
          <div className="mb-4">
            <h3 className="text-lg font-semibold mb-2">Invoice Items</h3>
            {billItems.map((item, index) => (
              <div key={index} className="mb-4 p-4 border rounded">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-gray-700 text-sm font-bold mb-2">
                      Designation
                    </label>
                    <input
                      className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                      value={item.designation}
                      onChange={(e) =>
                        handleBillItemChange(
                          index,
                          "designation",
                          e.target.value
                        )
                      }
                      placeholder="e.g., Office Supplies, Medical Equipment"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-gray-700 text-sm font-bold mb-2">
                      Description
                    </label>
                    <input
                      className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                      value={item.description}
                      onChange={(e) =>
                        handleBillItemChange(
                          index,
                          "description",
                          e.target.value
                        )
                      }
                      placeholder="e.g., Monthly supply of pens and paper"
                    />
                  </div>
                  <div>
                    <label className="block text-gray-700 text-sm font-bold mb-2">
                      Quantity
                    </label>
                    <input
                      className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                      type="number"
                      value={item.quantity}
                      onChange={(e) =>
                        handleBillItemChange(
                          index,
                          "quantity",
                          Number.parseInt(e.target.value)
                        )
                      }
                      min="1"
                      placeholder="e.g., 10"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-gray-700 text-sm font-bold mb-2">
                      Unit Price
                    </label>
                    <input
                      className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                      type="number"
                      value={item.unityPrice}
                      onChange={(e) =>
                        handleBillItemChange(
                          index,
                          "unityPrice",
                          Number.parseFloat(e.target.value)
                        )
                      }
                      min="0"
                      step="0.01"
                      placeholder="e.g., 5000"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-gray-700 text-sm font-bold mb-2">
                      Total
                    </label>
                    <input
                      className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline bg-gray-100"
                      value={(item.quantity * item.unityPrice).toFixed(2)}
                      disabled
                    />
                  </div>
                  <div className="flex items-end">
                    <button
                      type="button"
                      className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                      onClick={() => removeBillItem(index)}
                      disabled={billItems.length === 1}
                    >
                      <Trash className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
            <button
              type="button"
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              onClick={addBillItem}
            >
              <Plus className="h-4 w-4 inline-block mr-2" /> Add Item
            </button>
          </div>
          <div className="flex items-center justify-between">
            <div className="text-xl font-semibold">
              Total Amount: {calculateTotal().toFixed(2)} FCFA
            </div>
            <button
              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              type="submit"
              disabled={isProcessing}
            >
              <Save className="h-4 w-4 inline-block mr-2" />
              {isProcessing ? "Creating Invoice..." : "Create Invoice"}
            </button>
          </div>
        </form>

        <ErrorModal
          isOpen={canOpenErrorMessageModal}
          onCloseErrorModal={() => setCanOpenErrorMessageModal(false)}
          message={errorMessage}
        />

        <SuccessModal
          isOpen={canOpenSuccessModal}
          message={successMessage}
          canOpenSuccessModal={setCanOpenSuccessModal}
          makeAction={async () => {
            await fetchFinancialOperations();
          }}
        />
      </div>
    </AccountantDashBoard>
  );
}
// END OF FILE: src/Pages/Accountant/CreateFacture.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/FinancialContribution.jsx

import { useState, useEffect } from "react";
import { format, startOfMonth, endOfMonth } from "date-fns";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import {
  FaFileExcel,
  FaFileCsv,
  FaPrint,
  FaEye,
  FaTrash,
  FaSyncAlt,
} from "react-icons/fa";
import { Tooltip } from "react-tooltip";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import { useDebounce } from "use-debounce";
import { AccountantDashBoard } from "./Components/AccountantDashboard";
import { AccountantNavBar } from "./Components/AccountantNavBar";
import { AccountantNavLink } from "./AccountantNavLink";
import axiosInstance from "../../Utils/axiosInstance";
import { ViewBillDetailsModal } from "./Components/ViewBillDetailsModal";

const operationTypes = ["All", "Accountant", "Cashier", "Pharmacist", "Other"];

export function FinancialContributions() {
  const [startDate, setStartDate] = useState(startOfMonth(new Date()));
  const [endDate, setEndDate] = useState(endOfMonth(new Date()));
  const [operationType, setOperationType] = useState("All");
  const [searchTerm, setSearchTerm] = useState("");
  const [debouncedSearch] = useDebounce(searchTerm, 300);
  const [contributions, setContributions] = useState([]);
  const [filteredContributions, setFilteredContributions] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedBill, setSelectedBill] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    async function fetchData() {
      try {
        const response = await axiosInstance.get(`/bill/list_with_source/`);
        console.log(response);
        setContributions(response.data);
        setFilteredContributions(response.data);
        setIsLoading(false);
      } catch (error) {
        console.error("Error fetching data:", error);
        setIsLoading(false);
      }
    }
    fetchData();
  }, []);

  useEffect(() => {
    handleFilter();
  }, [contributions, startDate, endDate, operationType]); //Corrected dependencies

  const handleFilter = () => {
    setIsLoading(true);

    const filtered = contributions.filter((contribution) => {
      const contributionDate = new Date(contribution.date);
      const matchesDate =
        contributionDate >= startDate && contributionDate <= endDate;
      const matchesType =
        operationType === "All" || contribution.operator.role === operationType;
      const matchesSearch =
        contribution.billCode
          .toLowerCase()
          .includes(debouncedSearch.toLowerCase()) ||
        contribution.operator.role
          .toLowerCase()
          .includes(debouncedSearch.toLowerCase());

      return matchesDate && matchesType && matchesSearch;
    });

    setFilteredContributions(filtered);
    setIsLoading(false);
  };

  const handleExport = (format) => {
    const data = filteredContributions.map((item) => ({
      "Bill Code": item.billCode,
      Source: item.operator.role,
      Amount: item.amount,
      Date: format(new Date(item.date), "PPP"),
      Accounted: item.isAccounted ? "Yes" : "No",
    }));

    if (format === "csv") {
      const csvContent = [
        Object.keys(data[0]).join(","),
        ...data.map((item) => Object.values(item).join(",")),
      ].join("\n");

      const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8" });
      saveAs(blob, `contributions_${format(new Date(), "yyyyMMdd")}.csv`);
    } else if (format === "xlsx") {
      const ws = XLSX.utils.json_to_sheet(data);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, "Contributions");
      XLSX.writeFile(
        wb,
        `contributions_${format(new Date(), "yyyyMMdd")}.xlsx`
      );
    }
  };

  const handlePrint = () => {
    window.print();
  };

  const handleViewDetails = (contribution) => {
    setSelectedBill(contribution);
    setIsModalOpen(true);
  };

  const handleDelete = (contribution) => {
    // Implement delete functionality
    console.log("Delete:", contribution);
  };

  const resetFilters = () => {
    setStartDate(startOfMonth(new Date()));
    setEndDate(endOfMonth(new Date()));
    setOperationType("All");
    setSearchTerm("");
    setFilteredContributions(contributions);
  };

  const TooltipButton = ({ icon, onClick, tooltip, className }) => (
    <button
      onClick={onClick}
      className={className}
      data-tooltip-id="my-tooltip"
    >
      {icon}
      <Tooltip id="my-tooltip" place="top" effect="solid">
        {tooltip}
      </Tooltip>
    </button>
  );

  return (
    <AccountantDashBoard
      requiredRole={"Accountant"}
      linkList={AccountantNavLink}
    >
      <AccountantNavBar />
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6 text-secondary">
          Financial Contributions
        </h1>

        <div className="flex flex-wrap gap-4 mb-6">
          <div className="flex items-center">
            <label htmlFor="start-date" className="mr-2">
              Start Date:
            </label>
            <DatePicker
              id="start-date"
              selected={startDate}
              onChange={(date) => setStartDate(date)}
              selectsStart
              startDate={startDate}
              endDate={endDate}
            />
          </div>
          <div className="flex items-center">
            <label htmlFor="end-date" className="mr-2">
              End Date:
            </label>
            <DatePicker
              id="end-date"
              selected={endDate}
              onChange={(date) => setEndDate(date)}
              selectsEnd
              startDate={startDate}
              endDate={endDate}
              minDate={startDate}
            />
          </div>

          <select
            onChange={(e) => setOperationType(e.target.value)}
            className="bg-white text-secondary w-[200px] px-4 py-2 rounded"
          >
            <option value="All">Select operation type</option>
            {operationTypes.map((type) => (
              <option key={type} value={type}>
                {type}
              </option>
            ))}
          </select>
          {/* 
          <input
            type="text"
            placeholder="Search by bill code or source"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="bg-white text-secondary px-4 py-2 rounded"
          />
          
          <button
            onClick={() => handleExport("csv")}
            className="bg-white text-secondary hover:bg-gray-100 px-4 py-2 rounded"
          >
            <FaFileCsv className="inline mr-2" />
            CSV
          </button>
          <button
            onClick={() => handleExport("xlsx")}
            className="bg-white text-secondary hover:bg-gray-100 px-4 py-2 rounded"
          >
            <FaFileExcel className="inline mr-2" />
            XLSX
          </button>
          <button
            onClick={handlePrint}
            className="bg-white text-secondary hover:bg-gray-100 px-4 py-2 rounded"
          >
            <FaPrint className="inline" />
          </button>
          */}
        </div>

        {isLoading ? (
          <div className="text-center py-8">
            <FaSyncAlt className="animate-spin text-4xl text-primary-600 mx-auto mb-4" />
            <p className="text-xl text-gray-600">Loading contributions...</p>
          </div>
        ) : (
          <div className="overflow-x-auto rounded-lg shadow-lg">
            <table className="w-full border-separate border-spacing-y-2">
              <thead>
                <tr className="bg-gradient-to-l from-primary-start to-primary-end">
                  {[
                    "No",
                    //"Bill Code",
                    "Source",
                    "Amount",
                    "Date",
                    "Accounted",
                    "Actions",
                  ].map((header, index) => (
                    <th
                      key={header}
                      className={`text-center text-white p-4 text-xl font-bold border-gray-200 ${
                        index === 0
                          ? "rounded-l-2xl"
                          : index === 6
                          ? "rounded-r-2xl"
                          : ""
                      }`}
                    >
                      {header}
                    </th>
                  ))}
                </tr>
              </thead>

              <tbody>
                {filteredContributions.map((contribution, index) => (
                  <tr key={index} className="bg-gray-100 shadow-sm">
                    <td
                      className={`p-4 text-md text-blue-900 text-center rounded-l-lg border-l-4 ${
                        contribution.isAccounted
                          ? "border-green-500"
                          : "border-red-500"
                      }`}
                    >
                      {index + 1}
                    </td>
                    {/*<td className="p-4 text-md text-center font-bold">
          {contribution.billCode}
        </td>
        */}
                    <td className="p-4 text-md text-center">
                      <span className="px-2 py-1 bg-primary-100 text-primary-800 rounded-full text-sm">
                        {contribution.operator.role}
                      </span>
                    </td>
                    <td className="p-4 text-md text-center font-semibold">
                      {contribution.amount.toLocaleString()} F CFA
                    </td>
                    <td className="p-4 text-md text-center text-gray-600">
                      {format(new Date(contribution.date), "dd MMM yyyy")}
                    </td>
                    <td className="p-4 text-md text-center">
                      {contribution.isAccounted ? (
                        <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-sm">
                          Yes
                        </span>
                      ) : (
                        <span className="px-2 py-1 bg-red-100 text-red-800 rounded-full text-sm">
                          No
                        </span>
                      )}
                    </td>
                    <td className="p-4 relative rounded-r-lg text-center">
                      <div className="w-full items-center justify-center flex gap-6">
                        <TooltipButton
                          icon={<FaEye className="text-primary-end text-xl" />}
                          onClick={() => handleViewDetails(contribution)}
                          tooltip="View details"
                          className="flex items-center justify-center w-9 h-9 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300"
                        />
                        {/*  
            <TooltipButton
              icon={<FaTrash className="text-red-400 text-xl" />}
              onClick={() => handleDelete(contribution)}
              tooltip="Delete record"
              className="flex items-center justify-center w-9 h-9 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300"
            />
            */}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {!isLoading && filteredContributions.length === 0 && (
          <div className="mt-8 text-center py-12 bg-gray-50 rounded-lg">
            <p className="text-gray-500 text-lg">
              No records found for the selected criteria
            </p>
            <button
              onClick={resetFilters}
              className="mt-4 text-primary-600 hover:underline"
            >
              Clear all filters
            </button>
          </div>
        )}
      </div>

      <ViewBillDetailsModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        billDetails={selectedBill}
      />
    </AccountantDashBoard>
  );
}

export default FinancialContributions;
// END OF FILE: src/Pages/Accountant/FinancialContribution.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Accountant/FinancialReports.jsx

import { useState, useEffect } from "react";
import {
  FaFilePdf,
  FaFileExcel,
  FaExclamationCircle,
  FaChartLine,
  FaBalanceScale,
  FaMoneyBillWave,
} from "react-icons/fa";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import BalanceSheet from "./Components/BalanceSheet";
import IncomeStatement from "./Components/IncomeStatement";
import FinancialCharts from "./Components/FinancialCharts";
import { AccountantDashBoard } from "./Components/AccountantDashboard";
import { AccountantNavLink } from "./AccountantNavLink";
import { AccountantNavBar } from "./Components/AccountantNavBar";
import axiosInstanceAccountant from "../../Utils/axiosInstanceAccountant";

export function FinancialReports() {
  const [selectedYear, setSelectedYear] = useState("2025");
  const [error, setError] = useState(null);
  const [financialData, setFinancialData] = useState(null);

  useEffect(() => {
    const fetchFinancialData = async () => {
      try {
        const response = await axiosInstanceAccountant.get(
          `/budget-exercise/get_balance_sheet/?year=${selectedYear}`
        );
        setFinancialData(response.data);
      } catch (error) {
        console.error("Error fetching financial data:", error);
        setError("Failed to load financial data");
      }
    };

    fetchFinancialData();
  }, [selectedYear]);

  const handleExport = (format) => {
    // Enhanced export functionality
    console.log(`Exporting ${format} with professional formatting`);
    // Add actual export logic using libraries like xlsx or pdfmake
  };

  const handlePrint = () => {
    window.print();
  };

  return (
    <AccountantDashBoard
      requiredRole={"Accountant"}
      linkList={AccountantNavLink}
    >
      <AccountantNavBar />
      <div className="container mx-auto px-4 py-6 space-y-6">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <h1 className="text-3xl font-bold text-secondary">
            Financial Reports
          </h1>
          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4">
            <select
              className="px-4 py-2 border rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-start"
              onChange={(e) => setSelectedYear(e.target.value)}
              value={selectedYear}
            >
              <option value="2025">FY 2025</option>
            </select>
            {/*<div className="flex gap-2">
              <button
                onClick={() => handleExport("excel")}
                className="flex items-center gap-2 px-4 py-2 bg-white border rounded-lg hover:bg-gray-50 transition-colors"
              >
                <FaFileExcel className="text-green-600" />
                Excel
              </button>
              <button
                onClick={() => handleExport("pdf")}
                className="flex items-center gap-2 px-4 py-2 bg-white border rounded-lg hover:bg-gray-50 transition-colors"
              >
                <FaFilePdf className="text-red-600" />
                PDF
              </button>
            </div>
            */}
          </div>
        </div>

        {error && (
          <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
            <div className="flex items-center gap-2 text-red-700">
              <FaExclamationCircle />
              <p className="font-medium">Error</p>
            </div>
            <p className="mt-1 text-red-600">{error}</p>
          </div>
        )}

        <Tabs>
          <TabList className="flex border-b">
            <Tab className="px-6 py-3 text-center font-medium cursor-pointer focus:outline-none">
              Overview
            </Tab>
            <Tab className="px-6 py-3 text-center font-medium cursor-pointer focus:outline-none">
              Balance Sheet
            </Tab>
            {/*<Tab className="px-6 py-3 text-center font-medium cursor-pointer focus:outline-none">
              Income Statement
            </Tab>*/}
          </TabList>

          <TabPanel>
            <div className="mt-6 bg-white rounded-lg shadow-lg p-6">
              <h2 className="text-xl font-semibold mb-2 text-secondary">
                Financial Overview {selectedYear}
              </h2>
              <p className="text-gray-600 mb-6">
                Comprehensive financial position analysis
              </p>
              {financialData && (
                <FinancialCharts data={financialData} year={selectedYear} />
              )}
            </div>
          </TabPanel>

          <TabPanel>
            <div className="mt-6">
              <BalanceSheet year={selectedYear} />
            </div>
          </TabPanel>

          <TabPanel>
            <div className="mt-6">
              <IncomeStatement year={selectedYear} />
              {/* Income Statement Analysis Section */}
              <div className="mt-8 p-6 bg-blue-50 rounded-lg">
                <h3 className="text-lg font-semibold mb-4 text-blue-800">
                  <FaChartLine className="inline-block mr-2" />
                  Profitability Analysis
                </h3>
                <ul className="space-y-3">
                  <li className="flex justify-between items-center">
                    <span>Operating Margin</span>
                    <span className="font-mono">XX%</span>
                  </li>
                  <li className="flex justify-between items-center">
                    <span>YOY Revenue Growth</span>
                    <span className="text-green-600 font-mono">+XX%</span>
                  </li>
                  <li className="flex justify-between items-center">
                    <span>Expense Ratio</span>
                    <span className="font-mono">XX%</span>
                  </li>
                </ul>
              </div>
            </div>
          </TabPanel>
        </Tabs>
      </div>
    </AccountantDashBoard>
  );
}
// END OF FILE: src/Pages/Accountant/FinancialReports.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/Comptabilité de Base/AccountingJornal.jsx

import  { useState } from 'react';
import {
    FileText,
    CreditCard,
    Wallet,
    Settings,
    TrendingUp,
    Filter,
    Search,
    Eye,
    CheckCircle,
    AlertCircle,
    BarChart3,
    PieChart
} from 'lucide-react';
import {AccountantDashBoard} from "../../Accountant/Components/AccountantDashboard.jsx";
import {FinancialAccountantNavLink} from "../NavLink.js";
import {AccountantNavBar} from "../../Accountant/Components/AccountantNavBar.jsx";

export function JournauxComptables()
{

    const [selectedJournal, setSelectedJournal] = useState('VTE');
    const [dateRange, setDateRange] = useState('week');
    const [searchTerm, setSearchTerm] = useState('');
    const [showFilters, setShowFilters] = useState(false);

    // Données simulées pour les journaux
    const journaux = {
        VTE: {
            name: 'Journal des Ventes',
            icon: FileText,
            color: 'bg-green-500',
            total: 850000,
            entries: [
                { id: 1, date: '07/06/2025', libelle: 'Consultation Dr Mballa', patient: 'M. Kamdem', montant: 15000, status: 'validated' },
                { id: 2, date: '08/06/2025', libelle: 'Hospitalisation Mme Ngono', patient: 'Mme Ngono', montant: 45000, status: 'validated' },
                { id: 3, date: '09/06/2025', libelle: 'Analyses laboratoire', patient: 'M. Fouda', montant: 8500, status: 'validated' },
                { id: 4, date: '10/06/2025', libelle: 'Consultation ORL', patient: 'Mlle Messi', montant: 20000, status: 'pending' },
                { id: 5, date: '11/06/2025', libelle: 'Échographie', patient: 'Mme Biya', montant: 25000, status: 'validated' }
            ]
        },
        ACH: {
            name: 'Journal des Achats',
            icon: CreditCard,
            color: 'bg-red-500',
            total: 3750000,
            entries: [
                { id: 1, date: '05/06/2025', libelle: 'Facture SANOFI', fournisseur: 'SANOFI Cameroun', montant: 2500000, status: 'validated' },
                { id: 2, date: '06/06/2025', libelle: 'Équipement médical', fournisseur: 'MedEquip', montant: 850000, status: 'pending' },
                { id: 3, date: '07/06/2025', libelle: 'Consommables', fournisseur: 'Pharmadis', montant: 400000, status: 'validated' }
            ]
        },
        BQ: {
            name: 'Journal de Banque',
            icon: CreditCard,
            color: 'bg-blue-500',
            total: 5200000,
            entries: [
                { id: 1, date: '08/06/2025', libelle: 'Virement salaires', reference: 'VIR-2025-156', montant: -2800000, status: 'validated' },
                { id: 2, date: '09/06/2025', libelle: 'Encaissement patients', reference: 'ENC-2025-89', montant: 150000, status: 'validated' },
                { id: 3, date: '10/06/2025', libelle: 'Paiement fournisseur', reference: 'PAY-2025-45', montant: -750000, status: 'validated' }
            ]
        },
        CAI: {
            name: 'Journal de Caisse',
            icon: Wallet,
            color: 'bg-yellow-500',
            total: 450000,
            entries: [
                { id: 1, date: '10/06/2025', libelle: 'Encaissement consultation', patient: 'M. Fouda', montant: 40000, status: 'validated' },
                { id: 2, date: '11/06/2025', libelle: 'Paiement pharmacie', patient: 'Mme Ndoye', montant: 15000, status: 'validated' },
                { id: 3, date: '12/06/2025', libelle: 'Remboursement patient', patient: 'M. Talla', montant: -5000, status: 'pending' }
            ]
        },
        OD: {
            name: 'Opérations Diverses',
            icon: Settings,
            color: 'bg-purple-500',
            total: 750000,
            entries: [
                { id: 1, date: '05/06/2025', libelle: 'Loyer juin 2025', reference: 'LOY-2025-06', montant: -500000, status: 'validated' },
                { id: 2, date: '08/06/2025', libelle: 'Amortissement équipement', reference: 'AMO-2025-15', montant: -250000, status: 'validated' }
            ]
        }
    };

    const currentJournal = journaux[selectedJournal];

    // Statistiques dashboard
    const stats = [
        {
            label: 'Total Recettes',
            value: '1 300 000 FCFA',
            change: '+12.5%',
            trend: 'up',
            icon: TrendingUp,
            color: 'text-green-600'
        },
        {
            label: 'Total Dépenses',
            value: '4 500 000 FCFA',
            change: '+8.2%',
            trend: 'up',
            icon: TrendingUp,
            color: 'text-red-600'
        },
        {
            label: 'Flux Net',
            value: '-3 200 000 FCFA',
            change: '-15.3%',
            trend: 'down',
            icon: BarChart3,
            color: 'text-orange-600'
        },
        {
            label: 'Écritures Validées',
            value: '89%',
            change: '+2.1%',
            trend: 'up',
            icon: CheckCircle,
            color: 'text-blue-600'
        }
    ];

    const filteredEntries = currentJournal.entries.filter(entry =>
        entry.libelle.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (entry.patient && entry.patient.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (entry.fournisseur && entry.fournisseur.toLowerCase().includes(searchTerm.toLowerCase()))
    );

    return (
        <AccountantDashBoard linkList={FinancialAccountantNavLink} requiredRole={"Accountant"}>
            <AccountantNavBar />
            <div className="min-h-screen p-4 ">
                {/* Header */}
                <div className={`ml-5 bg-gradient-to-r from-primary-end to-primary-start rounded-xl text-white p-6 md:p-8 mb-8 shadow-xl`}>
                    <div className="flex flex-col md:flex-row justify-between items-center">
                        <div>
                            <h1 className="text-3xl font-bold mb-1">Saisie des Écritures Comptables</h1>
                            <p className="opacity-90 text-sm">Enregistrez et gérez les opérations financières.</p>
                        </div>
                    </div>
                </div>


                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
                    {/* Stats Cards */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                        {stats.map((stat, index) => (
                            <div key={index} className="bg-white rounded-xl shadow-sm p-6 border">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-sm font-medium text-gray-600">{stat.label}</p>
                                        <p className="text-2xl font-bold text-gray-900 mt-1">{stat.value}</p>
                                        <p className={`text-sm mt-1 ${stat.trend === 'up' ? 'text-green-600' : 'text-red-600'}`}>
                                            {stat.change} vs mois dernier
                                        </p>
                                    </div>
                                    <div className={`p-3 rounded-full bg-gray-100`}>
                                        <stat.icon className={`w-6 h-6 ${stat.color}`}/>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>

                    <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
                        {/* Sidebar - Liste des Journaux */}
                        <div className="lg:col-span-1">
                            <div className="bg-white rounded-xl shadow-sm border">
                                <div className="p-6 border-b">
                                    <h3 className="text-lg font-semibold text-gray-900">Types de Journaux</h3>
                                </div>
                                <div className="p-4">
                                    {Object.entries(journaux).map(([code, journal]) => {
                                        const Icon = journal.icon;
                                        return (
                                            <button
                                                key={code}
                                                onClick={() => setSelectedJournal(code)}
                                                className={`w-full flex items-center p-3 rounded-lg mb-2 transition-colors ${
                                                    selectedJournal === code
                                                        ? `${journal.color} text-white`
                                                        : 'text-gray-700 hover:bg-gray-100'
                                                }`}
                                            >
                                                <Icon className="w-5 h-5 mr-3"/>
                                                <div className="text-left">
                                                    <div className="font-medium text-sm">{code}</div>
                                                    <div className="text-xs opacity-90">{journal.name}</div>
                                                </div>
                                            </button>
                                        );
                                    })}
                                </div>
                            </div>

                            {/* Résumé du journal actuel */}
                            <div className="bg-white rounded-xl shadow-sm border mt-6">
                                <div className="p-6">
                                    <h4 className="font-semibold text-gray-900 mb-4">Résumé {selectedJournal}</h4>
                                    <div className="space-y-3">
                                        <div className="flex justify-between">
                                            <span className="text-gray-600">Total période</span>
                                            <span
                                                className="font-semibold">{currentJournal.total.toLocaleString()} FCFA</span>
                                        </div>
                                        <div className="flex justify-between">
                                            <span className="text-gray-600">Nb d'écritures</span>
                                            <span className="font-semibold">{currentJournal.entries.length}</span>
                                        </div>
                                        <div className="flex justify-between">
                                            <span className="text-gray-600">Validées</span>
                                            <span className="font-semibold text-green-600">
                                                 {currentJournal.entries.filter(e => e.status === 'validated').length}
                                             </span>
                                        </div>
                                        <div className="flex justify-between">
                                            <span className="text-gray-600">En attente</span>
                                            <span className="font-semibold text-orange-600">
                                                {currentJournal.entries.filter(e => e.status === 'pending').length}
                                             </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Main Content - Détail du journal */}
                        <div className="lg:col-span-3">
                            <div className="bg-white rounded-xl shadow-sm border">
                                {/* Header du journal */}
                                <div className="p-6 border-b">
                                    <div className="flex justify-between items-center mb-4">
                                        <div className="flex items-center">
                                            <currentJournal.icon
                                                className={`w-6 h-6 text-white p-1 rounded ${currentJournal.color} mr-3`}/>
                                            <div>
                                                <h3 className="text-xl font-semibold text-gray-900">{currentJournal.name}</h3>
                                                <p className="text-sm text-gray-600">Journal {selectedJournal}</p>
                                            </div>
                                        </div>
                                        <div className="flex space-x-2">
                                            <button
                                                onClick={() => setShowFilters(!showFilters)}
                                                className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg hover:bg-gray-200 flex items-center"
                                            >
                                                <Filter className="w-4 h-4 mr-1"/>
                                                Filtres
                                            </button>
                                            <button
                                                className="bg-primary-end text-white px-3 py-2 rounded-lg hover:bg-primary-end flex items-center">
                                                <PieChart className="w-4 h-4 mr-1"/>
                                                Analyser
                                            </button>
                                        </div>
                                    </div>

                                    {/* Filtres */}
                                    {showFilters && (
                                        <div
                                            className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg">
                                            <div>
                                                <label
                                                    className="block text-sm font-medium text-gray-700 mb-1">Période</label>
                                                <select
                                                    value={dateRange}
                                                    onChange={(e) => setDateRange(e.target.value)}
                                                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:bg-primary-end focus:border-transparent"
                                                >
                                                    <option value="week">Cette semaine</option>
                                                    <option value="month">Ce mois</option>
                                                    <option value="quarter">Ce trimestre</option>
                                                    <option value="year">Cette année</option>
                                                </select>
                                            </div>
                                            <div>
                                                <label
                                                    className="block text-sm font-medium text-gray-700 mb-1">Statut</label>
                                                <select
                                                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:bg-primary-end focus:border-transparent">
                                                    <option value="">Tous les statuts</option>
                                                    <option value="validated">Validées</option>
                                                    <option value="pending">En attente</option>
                                                </select>
                                            </div>
                                            <div>
                                                <label
                                                    className="block text-sm font-medium text-gray-700 mb-1">Recherche</label>
                                                <div className="relative">
                                                    <Search
                                                        className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"/>
                                                    <input
                                                        type="text"
                                                        value={searchTerm}
                                                        onChange={(e) => setSearchTerm(e.target.value)}
                                                        placeholder="Rechercher..."
                                                        className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:bg-primary-end focus:border-transparent"
                                                    />
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </div>

                                {/* Table des écritures */}
                                <div className="overflow-x-auto">
                                    <table className="min-w-full divide-y divide-gray-200">
                                        <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Date
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Libellé
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                {selectedJournal === 'VTE' ? 'Patient' : selectedJournal === 'ACH' ? 'Fournisseur' : 'Référence'}
                                            </th>
                                            <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Montant
                                            </th>
                                            <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Statut
                                            </th>
                                            <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Actions
                                            </th>
                                        </tr>
                                        </thead>
                                        <tbody className="bg-white divide-y divide-gray-200">
                                        {filteredEntries.map((entry) => (
                                            <tr key={entry.id} className="hover:bg-gray-50">
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    {entry.date}
                                                </td>
                                                <td className="px-6 py-4 text-sm text-gray-900">
                                                    {entry.libelle}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                                    {entry.patient || entry.fournisseur || entry.reference || '-'}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                  <span className={entry.montant >= 0 ? 'text-green-600' : 'text-red-600'}>
                                                    {entry.montant >= 0 ? '+' : ''}{entry.montant.toLocaleString()} FCFA
                                                  </span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-center">
                                                    {entry.status === 'validated' ? (
                                                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                          <CheckCircle className="w-3 h-3 mr-1"/>
                                                          Validée
                                                        </span>
                                                    ) : (
                                                        <span
                                                            className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                                                            <AlertCircle className="w-3 h-3 mr-1"/>
                                                            En attente
                                                        </span>
                                                    )}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                                                    <div className="flex justify-center space-x-2">
                                                        <button className="text-primary-end hover:text-teal-800">
                                                            <Eye className="w-4 h-4"/>
                                                        </button>
                                                        {entry.status === 'pending' && (
                                                            <button className="text-green-600 hover:text-green-900">
                                                                <CheckCircle className="w-4 h-4"/>
                                                            </button>
                                                        )}
                                                    </div>
                                                </td>
                                            </tr>
                                        ))}
                                        </tbody>
                                    </table>
                                </div>

                                {/* Pagination */}
                                <div className="px-6 py-4 border-t flex items-center justify-between">
                                    <div className="text-sm text-gray-700">
                                        Affichage de <span className="font-medium">1</span> à <span
                                        className="font-medium">{filteredEntries.length}</span> sur <span
                                        className="font-medium">{filteredEntries.length}</span> résultats
                                    </div>
                                    <div className="flex space-x-2">
                                        <button
                                            className="px-3 py-1 border border-gray-300 text-sm text-gray-700 rounded hover:bg-gray-50">
                                            Précédent
                                        </button>
                                        <button
                                            className="px-3 py-1 bg-primary-end text-white text-sm rounded hover:bg-teal-700">
                                            1
                                        </button>
                                        <button
                                            className="px-3 py-1 border border-gray-300 text-sm text-gray-700 rounded hover:bg-gray-50">
                                            Suivant
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </AccountantDashBoard>

    );
};

// END OF FILE: src/Pages/AccountantNew/Comptabilité de Base/AccountingJornal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/Comptabilité de Base/AccountModal.jsx

import {useState} from "react";
import {ohadaClasses} from "./PlanComptable.jsx";

export function AccountModal({ account, onClose, onSave }) {

    const [formData, setFormData] = useState({
        code: account?.code || "",
        label: account?.label || "",
        class: account?.class || "",
        type: account?.type || "",
        isActive: account?.isActive ?? true
    });

    const handleSubmit = () => {
        // Validation du code OHADA (doit commencer par le numéro de classe)
        if (!formData.code.startsWith(formData.class)) {
            alert("Le code compte doit commencer par le numéro de classe sélectionné");
            return;
        }
        onSave(formData);
        onClose();
    };

    return (

        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md">
                <h2 className="text-xl font-bold mb-4">
                    {account ? "Modifier le compte" : "Nouveau compte"}
                </h2>
                <div className="space-y-4">
                    <div className="mb-4">
                        <select
                            value={formData.class}
                            onChange={(e) => setFormData({...formData, class: e.target.value})}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                        >
                            <option value="">Sélectionner une classe</option>
                            {Object.entries(ohadaClasses).map(([num, info]) => (
                                <option key={num} value={num}>
                                    Classe {num} - {info.name}
                                </option>
                            ))}
                        </select>
                    </div>
                    <div className="mb-4">
                        <label className="block text-sm font-medium mb-2">Code compte</label>
                        <input
                            type="text"
                            value={formData.code}
                            onChange={(e) => setFormData({...formData, code: e.target.value})}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                            placeholder="Ex: 2154"
                        />
                    </div>
                    <div className="mb-4">
                        <label className="block text-sm font-medium mb-2">Libellé</label>
                        <input
                            type="text"
                            value={formData.label}
                            onChange={(e) => setFormData({...formData, label: e.target.value})}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                            placeholder="Ex: Équipements de radiologie"
                        />
                    </div>
                    <div className="mb-4">
                        <label className="block text-sm font-medium mb-2">Type</label>
                        <select
                            value={formData.type}
                            onChange={(e) => setFormData({...formData, type: e.target.value})}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                        >
                            <option value="">Sélectionner un type</option>
                            <option value="Actif">Actif</option>
                            <option value="Passif">Passif</option>
                            <option value="Charge">Charge</option>
                            <option value="Produit">Produit</option>
                        </select>
                    </div>
                    <div className="mb-6">
                        <label className="flex items-center">
                            <input
                                type="checkbox"
                                checked={formData.isActive}
                                onChange={(e) => setFormData({...formData, isActive: e.target.checked})}
                                className="mr-2"
                            />
                            Compte actif
                        </label>
                    </div>
                    <div className="flex justify-end gap-3">
                        <button
                            type="button"
                            onClick={onClose}
                            className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
                        >
                            Annuler
                        </button>
                        <button
                            onClick={handleSubmit}
                            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                        >
                            {account ? "Modifier" : "Créer"}
                        </button>
                    </div>
                </div>
            </div>
        </div>

    );
}
// END OF FILE: src/Pages/AccountantNew/Comptabilité de Base/AccountModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/Comptabilité de Base/GrandLivre.jsx

import  { useState } from 'react';
import {
    Calculator,
    BarChart3,
    Search,
    Download,
    TrendingUp,
    TrendingDown,
    Eye,
    Layers,
    CheckCircle2,
    AlertTriangle,
    Minus
} from 'lucide-react';
import {AccountantDashBoard} from "../../Accountant/Components/AccountantDashboard.jsx";
import {FinancialAccountantNavLink} from "../NavLink.js";
import {AccountantNavBar} from "../../Accountant/Components/AccountantNavBar.jsx";

export function GrandLivreBalance() {
    const [activeView, setActiveView] = useState('balance'); // 'balance', 'ledger', 'trial'
    const [selectedAccount, setSelectedAccount] = useState(null);
    const [dateRange, setDateRange] = useState('month');
    const [searchTerm, setSearchTerm] = useState('');
    const [showFilters, setShowFilters] = useState(false);
    const [selectedClass, setSelectedClass] = useState('all');

    // Données simulées pour la balance
    const balanceData = [
        {
            code: '1011',
            libelle: 'Capital social',
            classe: 1,
            type: 'passif',
            debit: 0,
            credit: 50000000,
            solde: -50000000,
            evolution: '+2.5%',
            trend: 'up'
        },
        {
            code: '2154',
            libelle: 'Équipements médicaux',
            classe: 2,
            type: 'actif',
            debit: 85000000,
            credit: 12000000,
            solde: 73000000,
            evolution: '+15.3%',
            trend: 'up'
        },
        {
            code: '3111',
            libelle: 'Stock médicaments',
            classe: 3,
            type: 'actif',
            debit: 12500000,
            credit: 8200000,
            solde: 4300000,
            evolution: '-8.7%',
            trend: 'down'
        },
        {
            code: '4111',
            libelle: 'Clients consultations',
            classe: 4,
            type: 'actif',
            debit: 2800000,
            credit: 2100000,
            solde: 700000,
            evolution: '+25.4%',
            trend: 'up'
        },
        {
            code: '4011',
            libelle: 'Fournisseurs SANOFI',
            classe: 4,
            type: 'passif',
            debit: 1500000,
            credit: 4200000,
            solde: -2700000,
            evolution: '+12.1%',
            trend: 'up'
        },
        {
            code: '5711',
            libelle: 'Caisse recettes',
            classe: 5,
            type: 'actif',
            debit: 8500000,
            credit: 7200000,
            solde: 1300000,
            evolution: '+18.9%',
            trend: 'up'
        },
        {
            code: '5121',
            libelle: 'Banque BICEC',
            classe: 5,
            type: 'actif',
            debit: 45000000,
            credit: 38000000,
            solde: 7000000,
            evolution: '-5.2%',
            trend: 'down'
        },
        {
            code: '6031',
            libelle: 'Achats médicaments',
            classe: 6,
            type: 'charge',
            debit: 28000000,
            credit: 500000,
            solde: 27500000,
            evolution: '+22.3%',
            trend: 'up'
        },
        {
            code: '6411',
            libelle: 'Salaires personnel',
            classe: 6,
            type: 'charge',
            debit: 45000000,
            credit: 0,
            solde: 45000000,
            evolution: '+8.5%',
            trend: 'up'
        },
        {
            code: '7011',
            libelle: 'Consultations généralistes',
            classe: 7,
            type: 'produit',
            debit: 200000,
            credit: 18500000,
            solde: -18300000,
            evolution: '+14.7%',
            trend: 'up'
        },
        {
            code: '7012',
            libelle: 'Consultations spécialisées',
            classe: 7,
            type: 'produit',
            debit: 150000,
            credit: 25800000,
            solde: -25650000,
            evolution: '+19.2%',
            trend: 'up'
        }
    ];

    // Données pour le grand livre d'un compte spécifique
    const ledgerData = {
        '5711': [
            {
                date: '01/06/2025',
                journal: 'CAI',
                piece: 'REC-2025-1234',
                libelle: 'Encaissement consultation M. Kamdem',
                debit: 25000,
                credit: 0,
                solde: 25000
            },
            {
                date: '02/06/2025',
                journal: 'CAI',
                piece: 'REC-2025-1235',
                libelle: 'Paiement médicaments Mme Ngono',
                debit: 18500,
                credit: 0,
                solde: 43500
            },
            {
                date: '03/06/2025',
                journal: 'BQ',
                piece: 'VER-2025-089',
                libelle: 'Versement en banque',
                debit: 0,
                credit: 40000,
                solde: 3500
            },
            {
                date: '05/06/2025',
                journal: 'CAI',
                piece: 'REC-2025-1236',
                libelle: 'Consultation urgences',
                debit: 35000,
                credit: 0,
                solde: 38500
            },
            {
                date: '08/06/2025',
                journal: 'CAI',
                piece: 'REC-2025-1237',
                libelle: 'Hospitalisation Mme Biya',
                debit: 125000,
                credit: 0,
                solde: 163500
            }
        ]
    };

    // Statistiques pour la balance
    const balanceStats = [
        {
            label: 'Total Actif',
            value: '93 800 000 FCFA',
            change: '+7.2%',
            trend: 'up',
            icon: TrendingUp,
            color: 'text-green-600'
        },
        {
            label: 'Total Passif',
            value: '93 800 000 FCFA',
            change: '+7.2%',
            trend: 'up',
            icon: Calculator,
            color: 'text-blue-600'
        },
        {
            label: 'Équilibre',
            value: 'Parfait ✓',
            change: '0%',
            trend: 'stable',
            icon: CheckCircle2,
            color: 'text-green-600'
        },
        {
            label: 'Comptes Actifs',
            value: '47',
            change: '+3',
            trend: 'up',
            icon: Layers,
            color: 'text-purple-600'
        }
    ];

    // Classes de comptes pour les filtres
    const classesComptes = [
        { value: 'all', label: 'Toutes les classes', color: 'bg-gray-500' },
        { value: '1', label: 'Classe 1 - Capitaux', color: 'bg-blue-500' },
        { value: '2', label: 'Classe 2 - Immobilisations', color: 'bg-green-500' },
        { value: '3', label: 'Classe 3 - Stocks', color: 'bg-yellow-500' },
        { value: '4', label: 'Classe 4 - Tiers', color: 'bg-purple-500' },
        { value: '5', label: 'Classe 5 - Trésorerie', color: 'bg-indigo-500' },
        { value: '6', label: 'Classe 6 - Charges', color: 'bg-red-500' },
        { value: '7', label: 'Classe 7 - Produits', color: 'bg-emerald-500' }
    ];

    // Filtrer les données selon les critères
    const filteredBalance = balanceData.filter(account => {
        const matchesSearch = account.code.includes(searchTerm) ||
            account.libelle.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesClass = selectedClass === 'all' || account.classe.toString() === selectedClass;
        return matchesSearch && matchesClass;
    });

    // Calculs pour les totaux
    const totalDebit = filteredBalance.reduce((sum, account) => sum + account.debit, 0);
    const totalCredit = filteredBalance.reduce((sum, account) => sum + account.credit, 0);

    const handleAccountClick = (account) => {
        setSelectedAccount(account);
        setActiveView('ledger');
    };

    const exportData = () => {
        // Logique d'export
        console.log('Export des données...');
    };

    return (
        <AccountantDashBoard linkList={FinancialAccountantNavLink} requiredRole={"Accountant"}>
            <AccountantNavBar />
            <div className="min-h-screen p-4">
                {/* Header */}
                <div className="ml-5 bg-gradient-to-r from-primary-end to-primary-start rounded-xl text-white p-6 md:p-8 mb-8 shadow-xl">
                    <div className="flex flex-col md:flex-row justify-between items-center">
                        <div>
                            <h1 className="text-3xl font-bold mb-1">General Ledger and Trial Balance</h1>
                            <p className="opacity-90 text-sm">View detailed accounting balances and movements</p>
                        </div>
                        <div className="flex space-x-3 mt-4 md:mt-0">
                            <button
                                onClick={() => setActiveView('balance')}
                                className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                                    activeView === 'balance'
                                        ? 'bg-primary-start text-white font-bold'
                                        : 'bg-blue-600/20 text-white hover:bg-blue-600/30'
                                }`}
                            >
                                <Calculator className="w-4 h-4 inline mr-2" />
                                Balance
                            </button>
                            <button
                                onClick={() => setActiveView('trial')}
                                className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                                    activeView === 'trial'
                                        ? 'bg-white text-primary-end'
                                        : 'bg-blue-600/20 text-white hover:bg-blue-600/30'
                                }`}
                            >
                                <CheckCircle2 className="w-4 h-4 inline mr-2" />
                                Balance de vérification
                            </button>
                        </div>
                    </div>
                </div>

                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
                    {/* Stats Cards */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                        {balanceStats.map((stat, index) => (
                            <div key={index} className="bg-white rounded-xl shadow-sm p-6 border">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-sm font-medium text-gray-600">{stat.label}</p>
                                        <p className="text-2xl font-bold text-gray-900 mt-1">{stat.value}</p>
                                        <p className={`text-sm mt-1 ${
                                            stat.trend === 'up' ? 'text-green-600' :
                                                stat.trend === 'down' ? 'text-red-600' : 'text-gray-600'
                                        }`}>
                                            {stat.change} vs période précédente
                                        </p>
                                    </div>
                                    <div className="p-3 rounded-full bg-gray-100">
                                        <stat.icon className={`w-6 h-6 ${stat.color}`} />
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>

                    {/* Vue Balance Générale */}
                    {activeView === 'balance' && (
                        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
                            {/* Sidebar - Filtres */}
                            <div className="lg:col-span-1">
                                <div className="bg-white rounded-xl shadow-sm border">
                                    <div className="p-6 border-b">
                                        <h3 className="text-lg font-semibold text-gray-900">Filter</h3>
                                    </div>
                                    <div className="p-4">
                                        {/* Recherche */}
                                        <div className="mb-4">
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Rechercher un compte
                                            </label>
                                            <div className="relative">
                                                <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                                                <input
                                                    type="text"
                                                    value={searchTerm}
                                                    onChange={(e) => setSearchTerm(e.target.value)}
                                                    placeholder="Code ou libellé..."
                                                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                                />
                                            </div>
                                        </div>

                                        {/* Classes de comptes */}
                                        <div className="mb-4">
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Classes de comptes
                                            </label>
                                            <div className="space-y-2">
                                                {classesComptes.map((classe) => (
                                                    <button
                                                        key={classe.value}
                                                        onClick={() => setSelectedClass(classe.value)}
                                                        className={`w-full flex items-center p-2 rounded-lg text-sm transition-colors ${
                                                            selectedClass === classe.value
                                                                ? `${classe.color} text-white`
                                                                : 'text-gray-700 hover:bg-gray-100'
                                                        }`}
                                                    >
                                                        <div className={`w-3 h-3 rounded-full ${classe.color} mr-3 ${
                                                            selectedClass === classe.value ? 'bg-white' : ''
                                                        }`}></div>
                                                        {classe.label}
                                                    </button>
                                                ))}
                                            </div>
                                        </div>

                                        {/* Période */}
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                Période
                                            </label>
                                            <select
                                                value={dateRange}
                                                onChange={(e) => setDateRange(e.target.value)}
                                                className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-end"
                                            >
                                                <option value="month">Ce mois</option>
                                                <option value="quarter">Ce trimestre</option>
                                                <option value="year">Cette année</option>
                                                <option value="custom">Période personnalisée</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                {/* Résumé */}
                                <div className="bg-white rounded-xl shadow-sm border mt-6">
                                    <div className="p-6">
                                        <h4 className="font-semibold text-gray-900 mb-4">Résumé Balance</h4>
                                        <div className="space-y-3">
                                            <div className="flex justify-between">
                                                <span className="text-gray-600">Total Débits</span>
                                                <span className="font-semibold text-green-600">
                                                    {totalDebit.toLocaleString()} FCFA
                                                </span>
                                            </div>
                                            <div className="flex justify-between">
                                                <span className="text-gray-600">Total Crédits</span>
                                                <span className="font-semibold text-primary-end">
                                                    {totalCredit.toLocaleString()} FCFA
                                                </span>
                                            </div>
                                            <div className="border-t pt-3">
                                                <div className="flex justify-between">
                                                    <span className="text-gray-600">Équilibre</span>
                                                    <span className={`font-semibold ${
                                                        totalDebit === totalCredit ? 'text-green-600' : 'text-red-600'
                                                    }`}>
                                                        {totalDebit === totalCredit ? '✓ Équilibré' : '⚠ Déséquilibré'}
                                                    </span>
                                                </div>
                                            </div>
                                            <div className="flex justify-between">
                                                <span className="text-gray-600">Comptes affichés</span>
                                                <span className="font-semibold">{filteredBalance.length}</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* Table Balance */}
                            <div className="lg:col-span-3">
                                <div className="bg-white rounded-xl shadow-sm border">
                                    <div className="p-6 border-b">
                                        <div className="flex justify-between items-center">
                                            <div>
                                                <h3 className="text-xl font-semibold text-gray-900">Balance Générale</h3>
                                                <p className="text-sm text-gray-600">
                                                    {filteredBalance.length} comptes • Période : {dateRange}
                                                </p>
                                            </div>
                                            <div className="flex space-x-2">
                                                <button
                                                    onClick={exportData}
                                                    className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg hover:bg-gray-200 flex items-center"
                                                >
                                                    <Download className="w-4 h-4 mr-1" />
                                                    Export
                                                </button>
                                                <button className="bg-teal-700 text-white px-3 py-2 rounded-lg hover:bg-primary-end flex items-center duration-300 transition-all">
                                                    <BarChart3 className="w-4 h-4 mr-1" />
                                                    Analyser
                                                </button>
                                            </div>
                                        </div>
                                    </div>

                                    <div className="overflow-x-auto">
                                        <table className="min-w-full divide-y divide-gray-200">
                                            <thead className="bg-gray-50">
                                            <tr>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Compte
                                                </th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Libellé
                                                </th>
                                                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Débit
                                                </th>
                                                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Crédit
                                                </th>
                                                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Solde
                                                </th>
                                                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Évolution
                                                </th>
                                                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Actions
                                                </th>
                                            </tr>
                                            </thead>
                                            <tbody className="bg-white divide-y divide-gray-200">
                                            {filteredBalance.map((account) => (
                                                <tr
                                                    key={account.code}
                                                    className="hover:bg-gray-50 cursor-pointer"
                                                    onClick={() => handleAccountClick(account)}
                                                >
                                                    <td className="px-6 py-4 whitespace-nowrap">
                                                        <div className="flex items-center">
                                                            <div className={`w-3 h-3 rounded-full mr-3 ${
                                                                classesComptes.find(c => c.value === account.classe.toString())?.color || 'bg-gray-400'
                                                            }`}></div>
                                                            <span className="text-sm font-medium text-gray-900">
                                                                    {account.code}
                                                                </span>
                                                        </div>
                                                    </td>
                                                    <td className="px-6 py-4 text-sm text-gray-900">
                                                        {account.libelle}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900">
                                                        {account.debit > 0 ? account.debit.toLocaleString() : '-'}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900">
                                                        {account.credit > 0 ? account.credit.toLocaleString() : '-'}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                            <span className={account.solde >= 0 ? 'text-green-600' : 'text-red-600'}>
                                                                {Math.abs(account.solde).toLocaleString()}
                                                                {account.solde < 0 && ' (Cr)'}
                                                            </span>
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-center">
                                                        <div className="flex items-center justify-center">
                                                            {account.trend === 'up' ? (
                                                                <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
                                                            ) : account.trend === 'down' ? (
                                                                <TrendingDown className="w-4 h-4 text-red-500 mr-1" />
                                                            ) : (
                                                                <Minus className="w-4 h-4 text-gray-400 mr-1" />
                                                            )}
                                                            <span className={`text-xs ${
                                                                account.trend === 'up' ? 'text-green-600' :
                                                                    account.trend === 'down' ? 'text-red-600' : 'text-gray-600'
                                                            }`}>
                                                                    {account.evolution}
                                                                </span>
                                                        </div>
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-center">
                                                        <button
                                                            onClick={(e) => {
                                                                e.stopPropagation();
                                                                handleAccountClick(account);
                                                            }}
                                                            className="text-primary-end hover:text-teal-800"
                                                        >
                                                            <Eye className="w-4 h-4" />
                                                        </button>
                                                    </td>
                                                </tr>
                                            ))}
                                            </tbody>
                                            <tfoot className="bg-gray-50">
                                            <tr>
                                                <td colSpan="2" className="px-6 py-4 text-sm font-semibold text-gray-900">
                                                    TOTAUX
                                                </td>
                                                <td className="px-6 py-4 text-right text-sm font-semibold text-green-600">
                                                    {totalDebit.toLocaleString()}
                                                </td>
                                                <td className="px-6 py-4 text-right text-sm font-semibold text-primary-end">
                                                    {totalCredit.toLocaleString()}
                                                </td>
                                                <td className="px-6 py-4 text-right text-sm font-semibold text-gray-900">
                                                    Écart: {Math.abs(totalDebit - totalCredit).toLocaleString()}
                                                </td>
                                                <td colSpan="2" className="px-6 py-4 text-center">
                                                    {totalDebit === totalCredit ? (
                                                        <CheckCircle2 className="w-5 h-5 text-green-500 mx-auto" />
                                                    ) : (
                                                        <AlertTriangle className="w-5 h-5 text-red-500 mx-auto" />
                                                    )}
                                                </td>
                                            </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Vue Grand Livre d'un compte */}
                    {activeView === 'ledger' && selectedAccount && (
                        <div className="bg-white rounded-xl shadow-sm border">
                            <div className="p-6 border-b">
                                <div className="flex justify-between items-center">
                                    <div className="flex items-center">
                                        <button
                                            onClick={() => setActiveView('balance')}
                                            className="mr-4 p-2 hover:bg-gray-100 rounded-lg"
                                        >
                                            ←
                                        </button>
                                        <div>
                                            <h3 className="text-xl font-semibold text-gray-900">
                                                Grand Livre - {selectedAccount.code}
                                            </h3>
                                            <p className="text-sm text-gray-600">{selectedAccount.libelle}</p>
                                        </div>
                                    </div>
                                    <div className="flex space-x-4 text-sm">
                                        <div className="text-center">
                                            <div className="text-gray-600">Solde actuel</div>
                                            <div className={`font-semibold ${selectedAccount.solde >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                                {Math.abs(selectedAccount.solde).toLocaleString()} FCFA
                                                {selectedAccount.solde < 0 && ' (Créditeur)'}
                                            </div>
                                        </div>
                                        <div className="text-center">
                                            <div className="text-gray-600">Évolution</div>
                                            <div className={`font-semibold flex items-center justify-center ${
                                                selectedAccount.trend === 'up' ? 'text-green-600' : 'text-red-600'
                                            }`}>
                                                {selectedAccount.trend === 'up' ? (
                                                    <TrendingUp className="w-4 h-4 mr-1" />
                                                ) : (
                                                    <TrendingDown className="w-4 h-4 mr-1" />
                                                )}
                                                {selectedAccount.evolution}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div className="overflow-x-auto">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Date
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Journal
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Pièce
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Libellé
                                        </th>
                                        <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Débit
                                        </th>
                                        <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Crédit
                                        </th>
                                        <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Solde
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                    {(ledgerData[selectedAccount.code] || []).map((movement, index) => (
                                        <tr key={index} className="hover:bg-gray-50">
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                {movement.date}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-teal-800">
                                                        {movement.journal}
                                                    </span>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                                {movement.piece}
                                            </td>
                                            <td className="px-6 py-4 text-sm text-gray-900">
                                                {movement.libelle}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900">
                                                {movement.debit > 0 ? (
                                                    <span className="text-green-600 font-medium">
                                                            {movement.debit.toLocaleString()}
                                                        </span>
                                                ) : '-'}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900">
                                                {movement.credit > 0 ? (
                                                    <span className="text-red-600 font-medium">
                                                            {movement.credit.toLocaleString()}
                                                        </span>
                                                ) : '-'}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                    <span className={movement.solde >= 0 ? 'text-green-600' : 'text-red-600'}>
                                                        {Math.abs(movement.solde).toLocaleString()}
                                                        {movement.solde < 0 && ' (Cr)'}
                                                    </span>
                                            </td>
                                        </tr>
                                    ))}
                                    </tbody>
                                </table>
                            </div>

                            {/* Graphique d'évolution du solde */}
                            <div className="p-6 border-t bg-gray-50">
                                <h4 className="text-lg font-semibold text-gray-900 mb-4">Évolution du solde</h4>
                                <div className="h-32 bg-white rounded-lg border flex items-center justify-center">
                                    <div className="text-gray-500 flex items-center">
                                        <BarChart3 className="w-6 h-6 mr-2" />
                                        Graphique d'évolution (à implémenter avec Chart.js)
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Vue Balance de Vérification */}
                    {activeView === 'trial' && (
                        <div className="bg-white rounded-xl shadow-sm border">
                            <div className="p-6 border-b">
                                <div className="flex justify-between items-center">
                                    <div>
                                        <h3 className="text-xl font-semibold text-gray-900">Balance de Vérification</h3>
                                        <p className="text-sm text-gray-600">
                                            Vérification de l'égalité Débits = Crédits
                                        </p>
                                    </div>
                                    <div className="flex items-center space-x-4">
                                        <div className={`flex items-center px-4 py-2 rounded-lg ${
                                            totalDebit === totalCredit
                                                ? 'bg-green-100 text-green-800'
                                                : 'bg-red-100 text-red-800'
                                        }`}>
                                            {totalDebit === totalCredit ? (
                                                <CheckCircle2 className="w-5 h-5 mr-2" />
                                            ) : (
                                                <AlertTriangle className="w-5 h-5 mr-2" />
                                            )}
                                            <span className="font-medium">
                                                {totalDebit === totalCredit ? 'Balance équilibrée' : 'Balance déséquilibrée'}
                                            </span>
                                        </div>
                                        <button
                                            onClick={exportData}
                                            className="bg-primary-end text-white px-4 py-2 rounded-lg hover:bg-teal-700 duration-300 transition-all flex items-center"
                                        >
                                            <Download className="w-4 h-4 mr-2" />
                                            Export PDF
                                        </button>
                                    </div>
                                </div>
                            </div>

                            {/* Résumé de vérification */}
                            <div className="p-6 bg-gray-50 border-b">
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                                    <div className="bg-white rounded-lg p-4 border">
                                        <div className="text-center">
                                            <div className="text-2xl font-bold text-green-600">
                                                {totalDebit.toLocaleString()}
                                            </div>
                                            <div className="text-sm text-gray-600 mt-1">Total Débits (FCFA)</div>
                                        </div>
                                    </div>
                                    <div className="bg-white rounded-lg p-4 border">
                                        <div className="text-center">
                                            <div className="text-2xl font-bold text-primary-end">
                                                {totalCredit.toLocaleString()}
                                            </div>
                                            <div className="text-sm text-gray-600 mt-1">Total Crédits (FCFA)</div>
                                        </div>
                                    </div>
                                    <div className="bg-white rounded-lg p-4 border">
                                        <div className="text-center">
                                            <div className={`text-2xl font-bold ${
                                                totalDebit === totalCredit ? 'text-green-600' : 'text-red-600'
                                            }`}>
                                                {Math.abs(totalDebit - totalCredit).toLocaleString()}
                                            </div>
                                            <div className="text-sm text-gray-600 mt-1">
                                                {totalDebit === totalCredit ? 'Parfait équilibre' : 'Écart à corriger (FCFA)'}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* Table détaillée par classe */}
                            <div className="overflow-x-auto">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Classe
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Description
                                        </th>
                                        <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Nb Comptes
                                        </th>
                                        <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Total Débits
                                        </th>
                                        <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Total Crédits
                                        </th>
                                        <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Solde Net
                                        </th>
                                        <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Statut
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                    {classesComptes.filter(c => c.value !== 'all').map((classe) => {
                                        const comptes = balanceData.filter(account => account.classe.toString() === classe.value);
                                        const debitTotal = comptes.reduce((sum, account) => sum + account.debit, 0);
                                        const creditTotal = comptes.reduce((sum, account) => sum + account.credit, 0);
                                        const soldeNet = debitTotal - creditTotal;

                                        return (
                                            <tr key={classe.value} className="hover:bg-gray-50">
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <div className="flex items-center">
                                                        <div className={`w-4 h-4 rounded-full ${classe.color} mr-3`}></div>
                                                        <span className="text-sm font-medium text-gray-900">
                                                                Classe {classe.value}
                                                            </span>
                                                    </div>
                                                </td>
                                                <td className="px-6 py-4 text-sm text-gray-900">
                                                    {classe.label.split(' - ')[1]}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900">
                                                    {comptes.length}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-right text-sm text-green-600 font-medium">
                                                    {debitTotal.toLocaleString()}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-right text-sm text-primary-end font-medium">
                                                    {creditTotal.toLocaleString()}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                        <span className={soldeNet >= 0 ? 'text-green-600' : 'text-red-600'}>
                                                            {Math.abs(soldeNet).toLocaleString()}
                                                            {soldeNet < 0 && ' (Cr)'}
                                                        </span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-center">
                                                    <CheckCircle2 className="w-5 h-5 text-green-500 mx-auto" />
                                                </td>
                                            </tr>
                                        );
                                    })}
                                    </tbody>
                                    <tfoot className="bg-gray-900 text-white">
                                    <tr>
                                        <td colSpan="3" className="px-6 py-4 text-sm font-bold">
                                            TOTAUX GÉNÉRAUX
                                        </td>
                                        <td className="px-6 py-4 text-right text-sm font-bold">
                                            {totalDebit.toLocaleString()}
                                        </td>
                                        <td className="px-6 py-4 text-right text-sm font-bold">
                                            {totalCredit.toLocaleString()}
                                        </td>
                                        <td className="px-6 py-4 text-right text-sm font-bold">
                                            {Math.abs(totalDebit - totalCredit).toLocaleString()}
                                        </td>
                                        <td className="px-6 py-4 text-center">
                                            {totalDebit === totalCredit ? (
                                                <CheckCircle2 className="w-5 h-5 text-green-400 mx-auto" />
                                            ) : (
                                                <AlertTriangle className="w-5 h-5 text-red-400 mx-auto" />
                                            )}
                                        </td>
                                    </tr>
                                    </tfoot>
                                </table>
                            </div>

                            {/* Recommandations */}
                            {totalDebit !== totalCredit && (
                                <div className="p-6 bg-red-50 border-t">
                                    <div className="flex items-start">
                                        <AlertTriangle className="w-6 h-6 text-red-600 mr-3 mt-1" />
                                        <div>
                                            <h4 className="text-lg font-semibold text-red-800 mb-2">
                                                Balance déséquilibrée détectée
                                            </h4>
                                            <p className="text-red-700 mb-3">
                                                Un écart de {Math.abs(totalDebit - totalCredit).toLocaleString()} FCFA a été détecté.
                                                Voici les actions recommandées :
                                            </p>
                                            <ul className="list-disc list-inside text-red-700 space-y-1">
                                                <li>Vérifier les écritures saisies récemment</li>
                                                <li>Contrôler les reports de soldes</li>
                                                <li>Examiner les écritures non validées</li>
                                                <li>Contacter l'auditeur si l'écart persiste</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </AccountantDashBoard>
    );
}// END OF FILE: src/Pages/AccountantNew/Comptabilité de Base/GrandLivre.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/Comptabilité de Base/JournalsEntries.jsx

"use client"

import { useState, useEffect, useCallback } from "react";
import { Search, Plus, Edit2, Trash2, Eye, BookOpen, CheckCircle, FileText, TrendingDown, TrendingUp, AlertTriangle, Save, Send, Filter } from "lucide-react";
import {AccountantDashBoard} from "../../Accountant/Components/AccountantDashboard.jsx";
import { v4 as uuidv4 } from 'uuid';
import {FinancialAccountantNavLink} from "../NavLink.js";
import {AccountantNavBar} from "../../Accountant/Components/AccountantNavBar.jsx";

// Thème de couleurs modernisé inspiré de la seconde interface
const themeColors = {
    primaryEnd: 'from-teal-600 to-teal-800',
    primaryStart: 'from-teal-500 to-teal-700',
    secondary: 'teal-600',
    focusRing: 'focus:ring-teal-500',
    textPrimaryEnd: 'text-teal-800',
    textPrimaryStart: 'text-teal-600',
    bgPrimary: 'bg-teal-600',
    bgPrimaryHover: 'hover:bg-teal-700',
    borderPrimary: 'border-teal-600',
};

// Données d'exemple pour les comptes (normalement viendraient d'une API)
const sampleChartOfAccounts = [
    { code: "6132", label: "Loyers", type: "Charge" },
    { code: "5121", label: "Banque BICEC", type: "Actif" },
    { code: "7011", label: "Consultations médicales", type: "Produit" },
    { code: "4011", label: "Fournisseurs", type: "Passif" },
    { code: "4111", label: "Clients", type: "Actif" },
];

// Données d'exemple pour les journaux
const journalTypes = [
    { code: "AC", name: "Achats" },
    { code: "VT", name: "Ventes" },
    { code: "BQ", name: "Banque" },
    { code: "OD", name: "Opérations Diverses" },
];

export function JournalEntries() {
    const [searchTerm, setSearchTerm] = useState("");
    const [statusFilter, setStatusFilter] = useState("");
    const [journalFilter, setJournalFilter] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [entriesList, setEntriesList] = useState([]);
    const [showEntryModal, setShowEntryModal] = useState(false);
    const [editingEntry, setEditingEntry] = useState(null);
    const [isViewMode, setIsViewMode] = useState(false);
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");

    const initialEntryLine = () => ({
        id: uuidv4(),
        accountId: "",
        accountLabel: "",
        lineLabel: "",
        debit: "",
        credit: ""
    });

    const sampleEntries = [
        {
            id: 'entry1',
            journal: "OD",
            date: "2024-07-20",
            reference: "LOY-2024-07",
            generalLabel: "Loyer juillet 2024",
            status: "Validée",
            totalDebit: 500000,
            totalCredit: 500000,
            lines: [
                { id: uuidv4(), accountId: "6132", accountLabel: "Loyers", lineLabel: "Loyer Bureau Principal", debit: 500000, credit: "" },
                { id: uuidv4(), accountId: "5121", accountLabel: "Banque BICEC", lineLabel: "Paiement Loyer", debit: "", credit: 500000 }
            ],
            validatedAt: "2024-07-21T10:00:00Z"
        },
        {
            id: 'entry2',
            journal: "AC",
            date: "2024-07-19",
            reference: "FAC-00123",
            generalLabel: "Achat fournitures de bureau",
            status: "Brouillon",
            totalDebit: 75000,
            totalCredit: 0,
            lines: [
                { id: uuidv4(), accountId: "6064", accountLabel: "Fournitures de bureau", lineLabel: "", debit: 75000, credit: "" }
            ]
        }
    ];

    const loadJournalEntries = useCallback(async () => {
        setIsLoading(true);
        try {
            await new Promise(resolve => setTimeout(resolve, 1000));
            setEntriesList(sampleEntries);
            setErrorStatus(null);
        } catch (error) {
            console.error(error);
            setErrorStatus(500);
            setErrorMessage("Erreur lors du chargement des écritures.");
        } finally {
            setIsLoading(false);
        }
    }, []);

    useEffect(() => {
        loadJournalEntries();
    }, [loadJournalEntries]);

    const filteredEntries = entriesList.filter(entry => {
        const matchesSearch = entry.reference.toLowerCase().includes(searchTerm.toLowerCase()) ||
            entry.generalLabel.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesStatus = !statusFilter || entry.status === statusFilter;
        const matchesJournal = !journalFilter || entry.journal === journalFilter;
        return matchesSearch && matchesStatus && matchesJournal;
    });

    const handleOpenCreateModal = () => {
        setEditingEntry(null);
        setIsViewMode(false);
        setShowEntryModal(true);
    };

    const handleOpenEditModal = (entry) => {
        setEditingEntry(entry);
        setIsViewMode(false);
        setShowEntryModal(true);
    };

    const handleOpenViewModal = (entry) => {
        setEditingEntry(entry);
        setIsViewMode(true);
        setShowEntryModal(true);
    };

    const handleSaveEntry = async (entryData, isValidationIntent) => {
        console.log("Saving entry:", entryData, "Validation Intent:", isValidationIntent);
        setIsLoading(true);
        await new Promise(resolve => setTimeout(resolve, 1500));

        let newStatus = entryData.status;
        if (isValidationIntent) {
            if (entryData.totalDebit === entryData.totalCredit && entryData.totalDebit > 0) {
                newStatus = "Validée";
                console.log("Simulating validation for entry ID:", entryData.id);
            } else {
                alert("L'écriture doit être équilibrée pour être validée.");
                setIsLoading(false);
                return;
            }
        } else {
            if (entryData.totalDebit === entryData.totalCredit && entryData.totalDebit > 0) {
                newStatus = "Équilibrée";
            } else {
                newStatus = "Brouillon";
            }
        }

        const finalEntryData = {...entryData, status: newStatus};

        if (editingEntry && editingEntry.id) {
            setEntriesList(prev => prev.map(e => e.id === finalEntryData.id ? finalEntryData : e));
        } else {
            setEntriesList(prev => [{ ...finalEntryData, id: uuidv4() }, ...prev]);
        }
        setShowEntryModal(false);
        setEditingEntry(null);
        setIsLoading(false);
    };

    const handleDeleteEntry = async (entryId) => {
        if (confirm("Êtes-vous sûr de vouloir supprimer cette écriture (si brouillon) ?")) {
            const entryToDelete = entriesList.find(e => e.id === entryId);
            if (entryToDelete && entryToDelete.status === "Brouillon") {
                setIsLoading(true);
                await new Promise(resolve => setTimeout(resolve, 500));
                setEntriesList(prev => prev.filter(e => e.id !== entryId));
                setIsLoading(false);
            } else {
                alert("Seules les écritures en brouillon peuvent être supprimées.");
            }
        }
    };

    function formatAmount(amount) {
        if (amount === "" || amount === null || amount === undefined) return "";
        return new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'XAF', minimumFractionDigits: 0 }).format(amount);
    }

    function formatDate(dateString) {
        if (!dateString) return "";
        return new Date(dateString).toLocaleDateString('fr-FR', { day: '2-digit', month: '2-digit', year: 'numeric' });
    }

    function EntryModal({ entry, onClose, onSave, viewMode }) {
        const [formData, setFormData] = useState({
            journal: entry?.journal || "OD",
            date: entry?.date || new Date().toISOString().split('T')[0],
            reference: entry?.reference || "",
            generalLabel: entry?.generalLabel || "",
            lines: entry?.lines?.map(l => ({...l, debit: l.debit || "", credit: l.credit || ""})) || [initialEntryLine()],
            status: entry?.status || "Brouillon"
        });
        const [totalDebit, setTotalDebit] = useState(0);
        const [totalCredit, setTotalCredit] = useState(0);
        const [isBalanced, setIsBalanced] = useState(false);

        useEffect(() => {
            const debits = formData.lines.reduce((sum, line) => sum + (parseFloat(line.debit) || 0), 0);
            const credits = formData.lines.reduce((sum, line) => sum + (parseFloat(line.credit) || 0), 0);
            setTotalDebit(debits);
            setTotalCredit(credits);
            setIsBalanced(debits === credits && debits > 0);
        }, [formData.lines]);

        const handleInputChange = (e, field) => {
            setFormData(prev => ({ ...prev, [field]: e.target.value }));
        };

        const handleLineChange = (index, field, value) => {
            const newLines = [...formData.lines];
            newLines[index][field] = value;

            if (field === "accountId") {
                const selectedAccount = sampleChartOfAccounts.find(acc => acc.code === value);
                newLines[index].accountLabel = selectedAccount ? selectedAccount.label : "";
            }

            if (field === "debit" && value !== "") newLines[index].credit = "";
            if (field === "credit" && value !== "") newLines[index].debit = "";

            setFormData(prev => ({ ...prev, lines: newLines }));
        };

        const addLine = () => {
            if (viewMode || formData.status === "Validée") return;
            setFormData(prev => ({ ...prev, lines: [...prev.lines, initialEntryLine()] }));
        };

        const removeLine = (index) => {
            if (viewMode || formData.status === "Validée") return;
            if (formData.lines.length <= 1) {
                alert("Une écriture doit comporter au moins une ligne.");
                return;
            }
            const newLines = formData.lines.filter((_, i) => i !== index);
            setFormData(prev => ({ ...prev, lines: newLines }));
        };

        const handleSubmit = (isValidationIntent = false) => {
            if (viewMode) { onClose(); return; }

            if (!formData.journal || !formData.date || !formData.reference || !formData.generalLabel) {
                alert("Veuillez remplir les informations générales de l'écriture (Journal, Date, N° Pièce, Libellé).");
                return;
            }
            if (formData.lines.some(line => !line.accountId || (line.debit === "" && line.credit === ""))) {
                alert("Chaque ligne doit avoir un compte et un montant (débit ou crédit).");
                return;
            }

            if (isValidationIntent && !isBalanced) {
                alert("L'écriture doit être équilibrée (Total Débit = Total Crédit et > 0) pour être validée.");
                return;
            }

            onSave({ ...formData, totalDebit, totalCredit, status: formData.status }, isValidationIntent);
        };

        const canEdit = !viewMode && formData.status !== "Validée";

        return (
            <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4 overflow-y-auto">
                <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-4xl transform transition-all max-h-[90vh] flex flex-col animate-in duration-300">
                    <div className="flex items-center justify-between mb-8">
                        <h2 className={`text-3xl font-bold ${themeColors.textPrimaryEnd}`}>
                            {viewMode ? " Détail de l'écriture" : (entry?.id ? " Modifier l'écriture" : "➕ Nouvelle écriture comptable")}
                        </h2>
                        {formData.status === "Validée" &&
                            <span className="bg-green-100 text-green-800 px-4 py-2 rounded-full text-sm font-semibold">
                                 Validée
                            </span>
                        }
                    </div>

                    <div className="flex-grow overflow-y-auto pr-2 space-y-6">
                        {/* Infos générales */}
                        <div className="bg-gradient-to-r from-teal-50 to-cyan-50 p-6 rounded-xl border border-teal-200">
                            <h3 className="text-lg font-semibold text-teal-800 mb-4 flex items-center">
                                <BookOpen size={20} className="mr-2" />
                                Informations générales
                            </h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">Journal</label>
                                    <select value={formData.journal} onChange={(e) => handleInputChange(e, 'journal')} disabled={!canEdit}
                                            className={`w-full px-4 py-3 border border-gray-300 rounded-xl ${themeColors.focusRing} transition-all ${!canEdit ? 'bg-gray-100' : 'hover:border-teal-400'}`}>
                                        {journalTypes.map(jt => <option key={jt.code} value={jt.code}>{jt.code} - {jt.name}</option>)}
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">Date</label>
                                    <input type="date" value={formData.date} onChange={(e) => handleInputChange(e, 'date')} disabled={!canEdit}
                                           className={`w-full px-4 py-3 border border-gray-300 rounded-xl ${themeColors.focusRing} transition-all ${!canEdit ? 'bg-gray-100' : 'hover:border-teal-400'}`} />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">N° Pièce</label>
                                    <input type="text" placeholder="Ex: LOY-2025-06" value={formData.reference} onChange={(e) => handleInputChange(e, 'reference')} disabled={!canEdit}
                                           className={`w-full px-4 py-3 border border-gray-300 rounded-xl ${themeColors.focusRing} transition-all ${!canEdit ? 'bg-gray-100' : 'hover:border-teal-400'}`} />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">Libellé général</label>
                                    <input type="text" placeholder="Ex: Loyer juin 2025" value={formData.generalLabel} onChange={(e) => handleInputChange(e, 'generalLabel')} disabled={!canEdit}
                                           className={`w-full px-4 py-3 border border-gray-300 rounded-xl ${themeColors.focusRing} transition-all ${!canEdit ? 'bg-gray-100' : 'hover:border-teal-400'}`} />
                                </div>
                            </div>
                        </div>

                        {/* Lignes d'écriture */}
                        <div className="bg-white border border-gray-200 rounded-xl p-6">
                            <div className="flex items-center justify-between mb-4">
                                <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                                    <TrendingUp size={20} className="mr-2 text-teal-600" />
                                    Lignes d'écriture
                                </h3>
                                {canEdit && (
                                    <button type="button" onClick={addLine}
                                            className="flex items-center px-4 py-2 bg-teal-600 text-white rounded-xl hover:bg-teal-700 transition-all duration-300 font-medium shadow-md hover:shadow-lg">
                                        <Plus size={18} className="mr-2" /> Ajouter une ligne
                                    </button>
                                )}
                            </div>

                            <div className="space-y-4">
                                {formData.lines.map((line, index) => (
                                    <div key={line.id} className="grid grid-cols-12 gap-3 items-center p-4 bg-gray-50 hover:bg-gray-100 rounded-xl transition-all border border-gray-200">
                                        <div className="col-span-12 md:col-span-3">
                                            <select value={line.accountId} disabled={!canEdit}
                                                    onChange={(e) => handleLineChange(index, 'accountId', e.target.value)}
                                                    className={`w-full px-3 py-2 border border-gray-300 rounded-lg text-sm ${themeColors.focusRing} transition-all ${!canEdit ? 'bg-gray-100' : 'hover:border-teal-400'}`}>
                                                <option value="">Choisir un compte</option>
                                                {sampleChartOfAccounts.map(acc => <option key={acc.code} value={acc.code}>{acc.code} - {acc.label}</option>)}
                                            </select>
                                        </div>
                                        <div className="col-span-12 md:col-span-4">
                                            <input type="text" placeholder="Libellé spécifique" value={line.lineLabel} disabled={!canEdit}
                                                   onChange={(e) => handleLineChange(index, 'lineLabel', e.target.value)}
                                                   className={`w-full px-3 py-2 border border-gray-300 rounded-lg text-sm ${themeColors.focusRing} transition-all ${!canEdit ? 'bg-gray-100' : 'hover:border-teal-400'}`} />
                                        </div>
                                        <div className="col-span-5 md:col-span-2">
                                            <input type="number" placeholder="Débit" value={line.debit} disabled={!canEdit}
                                                   onChange={(e) => handleLineChange(index, 'debit', e.target.value)}
                                                   className={`w-full px-3 py-2 border border-gray-300 rounded-lg text-sm text-right ${themeColors.focusRing} transition-all ${!canEdit ? 'bg-gray-100' : 'hover:border-teal-400'}`} />
                                        </div>
                                        <div className="col-span-5 md:col-span-2">
                                            <input type="number" placeholder="Crédit" value={line.credit} disabled={!canEdit}
                                                   onChange={(e) => handleLineChange(index, 'credit', e.target.value)}
                                                   className={`w-full px-3 py-2 border border-gray-300 rounded-lg text-sm text-right ${themeColors.focusRing} transition-all ${!canEdit ? 'bg-gray-100' : 'hover:border-teal-400'}`} />
                                        </div>
                                        <div className="col-span-2 md:col-span-1 text-right">
                                            {canEdit && formData.lines.length > 0 && (
                                                <button type="button" onClick={() => removeLine(index)}
                                                        className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all duration-300"
                                                        title="Supprimer ligne">
                                                    <Trash2 size={18} />
                                                </button>
                                            )}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        {/* Totaux et Équilibre */}
                        <div className="bg-gradient-to-r from-gray-50 to-gray-100 border border-gray-200 rounded-xl p-6">
                            <div className="flex justify-between items-center text-lg font-semibold mb-4">
                                <span className="flex items-center">
                                    <TrendingUp size={20} className="mr-2 text-green-600" />
                                    Total Débit: <span className="text-green-600 ml-2">{formatAmount(totalDebit)}</span>
                                </span>
                                <span className="flex items-center">
                                    <TrendingDown size={20} className="mr-2 text-red-600" />
                                    Total Crédit: <span className="text-red-600 ml-2">{formatAmount(totalCredit)}</span>
                                </span>
                            </div>
                            <div className={`text-center font-bold p-4 rounded-xl transition-all ${isBalanced ? 'bg-green-100 text-green-700 border border-green-200' : 'bg-red-100 text-red-700 border border-red-200'}`}>
                                {isBalanced ?
                                    <div className="flex items-center justify-center">
                                        <CheckCircle size={24} className="mr-2" />
                                         Écriture Équilibrée
                                    </div> :
                                    <div className="flex items-center justify-center">
                                        <AlertTriangle size={24} className="mr-2" />
                                         Écriture Déséquilibrée: {formatAmount(totalDebit - totalCredit)}
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    {/* Actions du Modal */}
                    <div className="flex justify-end gap-4 pt-6 border-t border-gray-200 mt-auto">
                        <button type="button" onClick={onClose}
                                className="px-6 py-3 border border-gray-300 rounded-xl text-gray-700 hover:bg-gray-100 transition-all duration-300 font-medium">
                            {viewMode ? "Fermer" : "Annuler"}
                        </button>
                        {!viewMode && formData.status !== "Validée" && (
                            <button type="button" onClick={() => handleSubmit(false)} disabled={isLoading}
                                    className="flex items-center px-6 py-3 border border-teal-300 rounded-xl text-teal-600 hover:bg-teal-50 transition-all duration-300 font-medium">
                                <Save size={18} className="mr-2" /> Sauvegarder Brouillon
                            </button>
                        )}
                        {!viewMode && formData.status !== "Validée" && (
                            <button type="button" onClick={() => handleSubmit(true)} disabled={isLoading || !isBalanced}
                                    className="flex items-center px-6 py-3 text-white rounded-xl bg-gradient-to-r from-teal-600 to-teal-800 font-semibold hover:from-teal-700 hover:to-teal-900 transition-all duration-300 disabled:opacity-50 shadow-lg hover:shadow-xl">
                                <Send size={18} className="mr-2" /> {entry?.status === "Équilibrée" ? "Valider l'écriture" : "Sauvegarder et Valider"}
                            </button>
                        )}
                    </div>
                </div>
            </div>
        );
    }



    if (errorStatus) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-red-50 to-pink-50 flex items-center justify-center p-4">
                <div className="bg-white p-8 rounded-2xl shadow-xl text-center border border-red-200">
                    <h2 className="text-2xl font-bold text-red-600 mb-3"> Erreur {errorStatus}</h2>
                    <p className="text-gray-700">{errorMessage}</p>
                </div>
            </div>
        );
    }

    return (
        <AccountantDashBoard linkList={FinancialAccountantNavLink} requiredRole={"Accountant"}>
            <AccountantNavBar></AccountantNavBar>
        <div className="bg-white min-h-screen p-4 md:p-8">
            <div className="max-w-full mx-auto">
                {/* Header modernisé */}
                <div className="bg-gradient-to-r from-primary-end to-primary-start  rounded-2xl text-white p-8 mb-8 shadow-2xl relative overflow-hidden">
                    <div className="absolute top-0 right-0 w-32 h-32 bg-white opacity-10 rounded-full -mr-16 -mt-16"></div>
                    <div className="absolute bottom-0 left-0 w-24 h-24 bg-white opacity-10 rounded-full -ml-12 -mb-12"></div>
                    <div className="relative z-10 flex flex-col md:flex-row justify-between items-center">
                        <div>
                            <h1 className="text-4xl font-bold mb-2 flex items-center">
                                 Saisie des Écritures Comptables
                            </h1>
                            <p className="opacity-90 text-lg">Enregistrez et gérez les opérations financières avec style.</p>
                        </div>
                        <button onClick={handleOpenCreateModal}
                                className="mt-6 md:mt-0 flex items-center px-6 py-3 bg-white text-teal-700 rounded-xl font-semibold shadow-lg hover:bg-gray-50 hover:shadow-xl transition-all duration-300 transform hover:scale-105">
                            <Plus className="h-6 w-6 mr-2" />
                             Nouvelle Écriture
                        </button>
                    </div>
                </div>

                {/* Filtres modernisés */}
                <div className="bg-gray-100 rounded-2xl shadow-xl p-6 mb-8 border border-gray-100">
                    <div className="flex items-center mb-4">
                        <Filter className="h-6 w-6 text-primary-end mr-2" />
                        <h2 className="text-xl font-semibold text-gray-800">Filtres de recherche</h2>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div className="relative">
                            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                            <input type="text" placeholder=" Rechercher par N° Pièce ou Libellé..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}
                                   className="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:bg-primary-end focus:border-primary-end transition-all hover:border-primary-end" />
                        </div>
                        <select value={journalFilter} onChange={(e) => setJournalFilter(e.target.value)}
                                className="px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-end focus:border-primary-end transition-all hover:border-primary-end">
                            <option value=""> Tous les journaux</option>
                            {journalTypes.map(jt => <option key={jt.code} value={jt.code}>{jt.name} ({jt.code})</option>)}
                        </select>
                        <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}
                                className="px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-end focus:border-primary-end transition-all hover:border-primary-end">
                            <option value=""> Tous les statuts</option>
                            <option value="Brouillon"> Brouillon</option>
                            <option value="Équilibrée"> Équilibrée</option>
                            <option value="Validée"> Validée</option>
                        </select>
                    </div>
                </div>

                {/* Tableau modernisé */}
                {filteredEntries && filteredEntries.length > 0 ? (
                    <div className="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-100">
                        <div>
                            <table className="w-full">
                                <thead className="bg-gradient-to-r from-primary-end to-primary-start">
                                <tr>
                                    {[' Date', ' N° Pièce', ' Journal', ' Libellé', ' Débit', ' Crédit', ' Statut', ' Actions'].map((header, index) => (
                                        <th key={header} className={`px-6 py-4 text-left text-sm font-semibold text-white uppercase tracking-wider ${index === 0 ? 'rounded-tl-2xl' : ''} ${index === 7 ? 'rounded-tr-2xl' : ''}`}>
                                            {header}
                                        </th>
                                    ))}
                                </tr>
                                </thead>
                                <tbody className="divide-y divide-gray-200">
                                {filteredEntries.map((entry, index) => (
                                    <tr key={entry.id} className="hover:bg-gradient-to-r hover:from-teal-50 hover:to-cyan-50 transition-all duration-300 group">
                                        <td className={`px-6 py-4 whitespace-nowrap border-l-4 ${entry.status === "Validée" ? 'border-green-500' : entry.status === "Équilibrée" ? 'border-teal-500' : 'border-yellow-500'}`}>
                                            <div className="text-sm text-gray-900 font-medium">{formatDate(entry.date)}</div>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 font-medium">{entry.reference}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">
                                            <span className="px-3 py-1 bg-teal-100 text-teal-800 rounded-full text-sm font-medium">
                                                {entry.journal}
                                            </span>
                                        </td>
                                        <td className="px-6 py-4 text-sm text-gray-700 max-w-xs truncate font-medium" title={entry.generalLabel}>{entry.generalLabel}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-green-600 font-bold text-right">{formatAmount(entry.totalDebit)}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-red-600 font-bold text-right">{formatAmount(entry.totalCredit)}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center">
                                            <span className={`px-4 py-2 inline-flex text-sm leading-5 font-semibold rounded-full ${
                                                entry.status === 'Validée' ? 'bg-green-100 text-green-800' :
                                                    entry.status === 'Équilibrée' ? 'bg-teal-100 text-teal-800' :
                                                        'bg-yellow-100 text-yellow-800'
                                            }`}>
                                                {entry.status === 'Validée' ? '' : entry.status === 'Équilibrée' ? '⚖️' : '📝'} {entry.status}
                                            </span>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center">
                                            <div className="flex items-center justify-center gap-3">
                                                <button onClick={() => handleOpenViewModal(entry)}
                                                        className="text-teal-600 hover:text-teal-800 hover:bg-teal-50 p-2 rounded-lg transition-all duration-300 transform hover:scale-110"
                                                        title="Voir détails">
                                                    <Eye size={18} />
                                                </button>
                                                {entry.status !== "Validée" && (
                                                    <button onClick={() => handleOpenEditModal(entry)}
                                                            className="text-yellow-500 hover:text-yellow-700 hover:bg-yellow-50 p-2 rounded-lg transition-all duration-300 transform hover:scale-110"
                                                            title="Modifier">
                                                        <Edit2 size={18} />
                                                    </button>
                                                )}
                                                {entry.status === "Brouillon" && (
                                                    <button onClick={() => handleDeleteEntry(entry.id)}
                                                            className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all duration-300 transform hover:scale-110"
                                                            title="Supprimer">
                                                        <Trash2 size={18} />
                                                    </button>
                                                )}
                                            </div>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>
                    </div>

                ) : (

                    <div className="text-center bg-white p-16 rounded-2xl shadow-xl border border-gray-100">
                        <div className="mb-8 relative">
                            <FileText className="h-24 w-24 mx-auto text-primary-end opacity-70" />
                            <span className="absolute top-0 left-1/2 transform -translate-x-1/2 w-full h-full bg-teal-200 rounded-full animate-ping opacity-25"></span>
                        </div>
                        <h2 className="text-3xl font-bold text-teal-700 mb-4"> Aucune écriture trouvée</h2>
                        <p className="text-gray-600 mb-8 text-lg max-w-xl mx-auto">
                            Commencez à enregistrer vos opérations financières ou ajustez vos filtres de recherche pour trouver les écritures existantes.
                        </p>
                        <button onClick={handleOpenCreateModal}
                                className="inline-flex items-center px-8 py-4 text-white rounded-xl bg-gradient-to-r from-primary-end to-teal-800 font-semibold hover:from-teal-700 hover:to-teal-900 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105">
                            <Plus size={24} className="mr-3" />
                             Créer votre première écriture
                        </button>
                    </div>
                )}

                {showEntryModal && (
                    <EntryModal
                        entry={editingEntry}
                        viewMode={isViewMode}
                        onClose={() => { setShowEntryModal(false); setEditingEntry(null); setIsViewMode(false); }}
                        onSave={handleSaveEntry}
                    />
                )}
            </div>
        </div>
        </AccountantDashBoard>
    );
}// END OF FILE: src/Pages/AccountantNew/Comptabilité de Base/JournalsEntries.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/Comptabilité de Base/PlanComptable.jsx

import { useState, useEffect, useCallback } from "react";
import { Search, Plus, Edit2, Trash2, Calculator, Building, Package, Users, Banknote, TrendingDown, TrendingUp, Eye } from "lucide-react";
import {AccountantNavBar} from "../../Accountant/Components/AccountantNavBar.jsx";
import {AccountantDashBoard} from "../../Accountant/Components/AccountantDashboard.jsx";
import {FinancialAccountantNavLink} from "../NavLink.js";
import {AccountModal} from "./AccountModal.jsx";
import {ViewAccountDetailsModal} from "./ViewAccountDetailsModal.jsx";
import {Tooltip} from "antd"; // Import du nouveau modal


// Classes OHADA avec leurs icônes et descriptions
export const ohadaClasses = {
    "1": { name: "Capitaux", icon: Building, color: "blue" },
    "2": { name: "Immobilisations", icon: Calculator, color: "green" },
    "3": { name: "Stocks", icon: Package, color: "yellow" },
    "4": { name: "Tiers", icon: Users, color: "purple" },
    "5": { name: "Trésorerie", icon: Banknote, color: "indigo" },
    "6": { name: "Charges", icon: TrendingDown, color: "red" },
    "7": { name: "Produits", icon: TrendingUp, color: "emerald" }
};


export function ChartOfAccounts() {
    const [searchTerm, setSearchTerm] = useState("");
    const [classFilter, setClassFilter] = useState("");
    const [typeFilter, setTypeFilter] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [accountsList, setAccountsList] = useState([]);
    const [showCreateModal, setShowCreateModal] = useState(false);
    const [editingAccount, setEditingAccount] = useState(null);
    const [viewingAccount, setViewingAccount] = useState(null); // Nouvel état pour le modal de détails
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");


    // Données d'exemple pour la démonstration
    const sampleAccounts = [
        {
            id: 1,
            code: "2154",
            label: "Équipements de radiologie",
            class: "2",
            type: "Actif",
            balance: 125000,
            isActive: true,
            createdDate: "2024-01-15T10:30:00Z",
            lastUsed: "2024-06-10T14:20:00Z"
        },
        {
            id: 2,
            code: "7011",
            label: "Consultations médicales",
            class: "7",
            type: "Produit",
            balance: 45000,
            isActive: true,
            createdDate: "2024-01-10T08:15:00Z",
            lastUsed: "2024-06-14T09:30:00Z"
        },
        {
            id: 3,
            code: "4111",
            label: "Patients débiteurs",
            class: "4",
            type: "Actif",
            balance: 15000,
            isActive: true,
            createdDate: "2024-02-01T11:45:00Z",
            lastUsed: "2024-06-13T16:10:00Z"
        },
        {
            id: 4,
            code: "6011",
            label: "Achats de médicaments",
            class: "6",
            type: "Charge",
            balance: 28000,
            isActive: true,
            createdDate: "2024-01-20T14:00:00Z",
            lastUsed: "2024-06-12T11:25:00Z"
        },
        {
            id: 5,
            code: "5121",
            label: "Banque BICEC",
            class: "5",
            type: "Actif",
            balance: 85000,
            isActive: true,
            createdDate: "2024-01-05T09:20:00Z",
            lastUsed: "2024-06-14T08:45:00Z"
        }
    ];

    // Simulation du chargement des données
    const loadChartOfAccounts = useCallback(async () => {
        setIsLoading(true);
        try {
            // Simulation d'un appel API
            await new Promise(resolve => setTimeout(resolve, 1000));
            setAccountsList(sampleAccounts);
            setErrorStatus(null);
            setErrorMessage("");
        } catch (error) {
            console.error(error);
            setErrorStatus(500);
            setErrorMessage("Une erreur est survenue lors du chargement du plan comptable.");
        } finally {
            setIsLoading(false);
        }
    }, []);


    useEffect(() => {
        loadChartOfAccounts();
    }, [loadChartOfAccounts]);


    // Filtrage des comptes
    const filteredAccounts = accountsList.filter((account) => {
        const matchesSearch =
            account.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
            account.label.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesClass = !classFilter || account.class === classFilter;
        const matchesType = !typeFilter || account.type === typeFilter;
        return matchesSearch && matchesClass && matchesType;
    });

    // Fonction pour obtenir l'icône d'une classe
    function getClassIcon(classNumber) {
        const IconComponent = ohadaClasses[classNumber]?.icon || Calculator;
        return <IconComponent className="h-5 w-5" />;
    }

    // Fonction pour obtenir la couleur d'une classe
    function getClassColor(classNumber) {
        const colorMap = {
            "blue": "text-blue-600",
            "green": "text-green-600",
            "yellow": "text-yellow-600",
            "purple": "text-purple-600",
            "indigo": "text-indigo-600",
            "red": "text-red-600",
            "emerald": "text-emerald-600"
        };
        return colorMap[ohadaClasses[classNumber]?.color] || "text-gray-600";
    }

    // Fonction pour formater le montant
    function formatAmount(amount) {
        return new Intl.NumberFormat('fr-FR', {
            style: 'currency',
            currency: 'XAF',
            minimumFractionDigits: 0
        }).format(amount);
    }

    // Fonction pour formater la date
    function formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('fr-FR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    }

    // Fonction pour voir les détails d'un compte
    const handleViewDetails = (account) => {
        setViewingAccount(account);
    };





    if (errorStatus)
    {
        return (
            <div className="mx-auto p-6">
                <div className="text-center">
                    <h2 className="text-xl font-bold text-red-600 mb-2">Erreur {errorStatus}</h2>
                    <p className="text-gray-600">{errorMessage}</p>
                </div>
            </div>
        );
    }

    return (
        <AccountantDashBoard linkList={FinancialAccountantNavLink} requiredRole={"Accountant"}>
            <AccountantNavBar></AccountantNavBar>
            <div className="mx-auto p-12">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-2xl font-bold text-gray-800">Plan Comptable OHADA</h1>
                    <button
                        onClick={() => setShowCreateModal(true)}
                        className="flex items-center px-4 py-2 bg-primary-end text-white rounded-lg hover:bg-teal-700 transition-all duration-300"
                    >
                        <Plus className="h-5 w-5 mr-2" />
                        Nouveau compte
                    </button>
                </div>

                {/* Statistiques des classes OHADA */}
                <div className="grid grid-cols-2 md:grid-cols-4 xl:grid-cols-7 gap-4 mb-6">
                    {Object.entries(ohadaClasses).map(([classNum, classInfo]) => {
                        const IconComponent = classInfo.icon;
                        const count = accountsList.filter(acc => acc.class === classNum).length;
                        return (
                            <div key={classNum} className="bg-white p-4 rounded-lg shadow border-l-4 border-primary-end">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-sm text-gray-600">Classe {classNum}</p>
                                        <p className="text-lg font-bold">{count}</p>
                                        <p className="text-xs text-gray-500">{classInfo.name}</p>
                                    </div>
                                    <IconComponent className={`h-8 w-8 ${getClassColor(classNum)}`} />
                                </div>
                            </div>
                        );
                    })}
                </div>

                {/* Filtres */}
                <div className="flex flex-col md:flex-row gap-4 mb-6">
                    <div className="relative flex-1">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                        <input
                            type="text"
                            placeholder="Rechercher par code ou libellé..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-end focus:outline-none transition-all duration-300"
                        />
                    </div>
                    <select
                        value={classFilter}
                        onChange={(e) => setClassFilter(e.target.value)}
                        className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-end focus:outline-none"
                    >
                        <option value="">Toutes les classes</option>
                        {Object.entries(ohadaClasses).map(([num, info]) => (
                            <option key={num} value={num}>Classe {num} - {info.name}</option>
                        ))}
                    </select>
                    <select
                        value={typeFilter}
                        onChange={(e) => setTypeFilter(e.target.value)}
                        className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-end focus:outline-none"
                    >
                        <option value="">Tous les types</option>
                        <option value="Actif">Actif</option>
                        <option value="Passif">Passif</option>
                        <option value="Charge">Charge</option>
                        <option value="Produit">Produit</option>
                    </select>
                </div>

                {/* Table des comptes */}
                {filteredAccounts && filteredAccounts.length > 0 ? (
                    <div className="overflow-x-auto">
                        <table className="w-full border-separate border-spacing-y-2">
                            <thead>
                            <tr>
                                <th className="px-6 py-3 bg-primary-end rounded-l-xl text-center text-md text-white font-bold uppercase">
                                    Code
                                </th>
                                <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                    Libellé
                                </th>
                                <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                    Classe
                                </th>
                                <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                    Type
                                </th>
                                <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                    Solde
                                </th>
                                <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                    Dernière utilisation
                                </th>
                                <th className="px-6 py-3 text-center text-md text-white font-bold bg-primary-end rounded-r-xl uppercase">
                                    Actions
                                </th>
                            </tr>
                            </thead>
                            <tbody className="bg-white border-separate">
                            {filteredAccounts.map((account) => (
                                <tr key={account.id}>
                                    <td className="px-6 py-5 rounded-l-xl bg-gray-50 border-l-4 border-primary-end">
                                        <div className="text-center">
                                            <div className="text-lg font-bold text-gray-900">{account.code}</div>
                                            <div className={`text-xs ${account.isActive ? 'text-green-600' : 'text-red-600'}`}>
                                                {account.isActive ? 'Actif' : 'Inactif'}
                                            </div>
                                        </div>
                                    </td>
                                    <td className="px-6 py-5 bg-gray-50">
                                        <div className="text-center">
                                            <div className="text-md font-medium text-gray-900">{account.label}</div>
                                        </div>
                                    </td>
                                    <td className="px-6 py-5 bg-gray-50">
                                        <div className="flex items-center justify-center">
                                            <div className={`${getClassColor(account.class)} mr-2`}>
                                                {getClassIcon(account.class)}
                                            </div>
                                            <div className="text-center">
                                                <div className="text-sm font-medium">Classe {account.class}</div>
                                                <div className="text-xs text-gray-500">{ohadaClasses[account.class]?.name}</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td className="px-6 py-5 bg-gray-50">
                                        <div className="text-center">
                                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                                account.type === 'Actif' ? 'bg-green-100 text-green-800' :
                                                    account.type === 'Passif' ? 'bg-blue-100 text-blue-800' :
                                                        account.type === 'Charge' ? 'bg-red-100 text-red-800' :
                                                            'bg-emerald-100 text-emerald-800'
                                            }`}>
                                                {account.type}
                                            </span>
                                        </div>
                                    </td>
                                    <td className="px-6 py-5 bg-gray-50">
                                        <div className="text-center text-md font-semibold text-gray-900">
                                            {formatAmount(account.balance)}
                                        </div>
                                    </td>
                                    <td className="px-6 py-5 bg-gray-50">
                                        <div className="text-center text-sm text-gray-600">
                                            {formatDate(account.lastUsed)}
                                        </div>
                                    </td>
                                    <td className="px-6 py-5 bg-gray-50 rounded-r-xl">
                                        <div className="flex items-center justify-center gap-5">
                                            <Tooltip placement={"left"} title={"View Details"}>
                                                <button
                                                    onClick={() => handleViewDetails(account)}
                                                    className="text-primary-end hover:text-blue-800 transition-colors"
                                                    title="Voir détails"
                                                >
                                                    <Eye className="h-5 w-5"/>
                                                </button>
                                            </Tooltip>

                                            <Tooltip placement={"bottom"} title={"Edit"}>
                                                <button
                                                    onClick={() => setEditingAccount(account)}
                                                    className="text-green-600 hover:text-green-800 transition-colors"
                                                    title="Modifier"
                                                >
                                                    <Edit2 className="h-5 w-5"/>
                                                </button>
                                            </Tooltip>

                                            <Tooltip placement={"right"} title={"Delete"}>
                                                <button
                                                    onClick={() => {
                                                        if (confirm("Êtes-vous sûr de vouloir supprimer ce compte ?")) {
                                                            console.log("Supprimer:", account.id);
                                                        }
                                                    }}
                                                    className="text-red-600 hover:text-red-800 transition-colors"
                                                    title="Supprimer"
                                                >
                                                    <Trash2 className="h-5 w-5"/>
                                                </button>
                                            </Tooltip>
                                        </div>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                ) : (
                    <div className="p-8 mt-24 flex items-center justify-center">
                        <div className="flex flex-col">
                            <Calculator className="h-16 w-16 text-primary-end mx-auto mb-4"/>
                            <h2 className="text-2xl font-bold text-gray-800 mb-2 mx-auto">Aucun compte trouvé</h2>
                            <p className="text-gray-600 mb-4 mx-auto text-center">
                                Aucun compte ne correspond à vos critères de recherche. Essayez de modifier vos filtres ou créez un nouveau compte.
                            </p>
                            <button
                                className="px-4 hover:bg-teal-700 duration-300 mx-auto py-2 bg-primary-end text-white rounded-lg transition-all"
                                onClick={() => setShowCreateModal(true)}
                            >
                                Créer un compte
                            </button>
                        </div>
                    </div>
                )}

                {/* Modal de création/modification */}
                {(showCreateModal || editingAccount) && (
                    <AccountModal
                        account={editingAccount}
                        onClose={() => {
                            setShowCreateModal(false);
                            setEditingAccount(null);
                        }}
                        onSave={(formData) => {
                            console.log("Sauvegarder:", formData);
                            // Ici on ferait l'appel API pour sauvegarder
                            loadChartOfAccounts(); // Recharger les données
                        }}
                    />
                )}

                {/* Modal de visualisation des détails */}
                {viewingAccount && (
                    <ViewAccountDetailsModal
                        isOpen={!!viewingAccount}
                        account={viewingAccount}
                        onClose={() => setViewingAccount(null)}
                    />
                )}
            </div>
        </AccountantDashBoard>
    );
}// END OF FILE: src/Pages/AccountantNew/Comptabilité de Base/PlanComptable.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/Comptabilité de Base/ViewAccountDetailsModal.jsx

import PropTypes from "prop-types";
import { Calculator, Building, Package, Users, Banknote, TrendingDown, TrendingUp, Calendar, Hash, Tag, Eye, DollarSign } from 'lucide-react';

// Classes OHADA avec leurs icônes et couleurs
const ohadaClasses = {
    "1": { name: "Capitaux", icon: Building, color: "blue" },
    "2": { name: "Immobilisations", icon: Calculator, color: "green" },
    "3": { name: "Stocks", icon: Package, color: "yellow" },
    "4": { name: "Tiers", icon: Users, color: "purple" },
    "5": { name: "Trésorerie", icon: Banknote, color: "indigo" },
    "6": { name: "Charges", icon: TrendingDown, color: "red" },
    "7": { name: "Produits", icon: TrendingUp, color: "emerald" }
};

export function ViewAccountDetailsModal({ isOpen, account, onClose }) {
    ViewAccountDetailsModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        account: PropTypes.object.isRequired,
        onClose: PropTypes.func.isRequired
    };

    if (!isOpen) return null;

    // Fonction pour obtenir l'icône d'une classe
    function getClassIcon(classNumber) {
        const IconComponent = ohadaClasses[classNumber]?.icon || Calculator;
        return <IconComponent className="h-8 w-8" />;
    }

    // Fonction pour obtenir la couleur d'une classe
    function getClassColor(classNumber) {
        const colorMap = {
            "blue": "text-blue-600 bg-blue-200",
            "green": "text-green-600 bg-green-200",
            "yellow": "text-yellow-600 bg-yellow-200",
            "purple": "text-purple-600 bg-purple-200",
            "indigo": "text-indigo-600 bg-indigo-200",
            "red": "text-red-600 bg-red-200",
            "emerald": "text-emerald-600 bg-emerald-200"
        };
        return colorMap[ohadaClasses[classNumber]?.color] || "text-gray-600 bg-gray-100";
    }

    function getColor(classNumber)
    {
        const colorMap={
            "blue": "bg-blue-100",
            "green": "bg-green-100",
            "yellow": "bg-yellow-100",
            "purple": "bg-purple-100",
            "indigo": "bg-indigo-100",
            "red": "bg-red-100",
            "emerald": "bg-emerald-100"
        }
        return colorMap[ohadaClasses[classNumber]?.color]
    }

    // Fonction pour formater le montant
    function formatAmount(amount) {
        return new Intl.NumberFormat('fr-FR', {
            style: 'currency',
            currency: 'XAF',
            minimumFractionDigits: 0
        }).format(amount);
    }

    // Fonction pour formater la date
    function formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('fr-FR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
            <div className="bg-white rounded-lg shadow-xl w-[700px]">
                <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                    <div className="flex flex-row">
                        {/* Left Section - Icon and Account Code */}
                        <div className={`${getColor(account.class)} p-6 flex flex-col items-center text-center w-1/3`}>
                            <div className={`w-32 h-32 rounded-full ${getClassColor(account.class)} overflow-hidden mb-4 flex items-center justify-center`}>
                                {getClassIcon(account.class)}
                            </div>
                            <h1 className="text-3xl font-bold text-navy-900 mb-2">{account.code}</h1>
                            <div className="flex items-center text-gray-600 mb-2">
                                <Tag className="w-4 h-4 mr-2"/>
                                <p className="text-sm font-medium">Classe {account.class}</p>
                            </div>
                            <div className="text-xs text-gray-500 text-center">
                                {ohadaClasses[account.class]?.name}
                            </div>
                            <div className="mt-4">
                                <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                                    account.isActive ? 'bg-green-300 text-green-800' : 'bg-red-100 text-red-800'
                                }`}>
                                    {account.isActive ? 'Actif' : 'Inactif'}
                                </span>
                            </div>
                        </div>

                        {/* Right Section - Account Information */}
                        <div className="p-6 md:w-2/3">
                            <div className="space-y-4">
                                <div className="flex items-start">
                                    <Hash className="w-6 h-6 text-primary-end mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Libellé du compte</p>
                                        <p className="text-gray-700 font-bold text-lg">{account.label}</p>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <Tag className="w-6 h-6 text-primary-end mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Type de compte</p>
                                        <span className={`inline-block px-2 py-1 rounded-full text-sm font-medium ${
                                            account.type === 'Actif' ? 'bg-green-100 text-green-800' :
                                                account.type === 'Passif' ? 'bg-blue-100 text-blue-800' :
                                                    account.type === 'Charge' ? 'bg-red-100 text-red-800' :
                                                        'bg-emerald-100 text-emerald-800'
                                        }`}>
                                            {account.type}
                                        </span>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <DollarSign className="w-6 h-6 text-primary-end mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Solde actuel</p>
                                        <p className="text-gray-700 font-bold text-xl">{formatAmount(account.balance)}</p>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <Calendar className="w-6 h-6 text-primary-end mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Date de création</p>
                                        <p className="text-gray-700 font-bold">{formatDate(account.createdDate)}</p>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <Eye className="w-6 h-6 text-primary-end mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Dernière utilisation</p>
                                        <p className="text-gray-700 font-bold">{formatDate(account.lastUsed)}</p>
                                    </div>
                                </div>
                            </div>

                            <div className="flex justify-end mt-6">
                                <button
                                    onClick={onClose}
                                    className="px-6 py-2 bg-primary-end text-white font-bold rounded-md hover:bg-teal-700 transition-all duration-300"
                                >
                                    Fermer
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}// END OF FILE: src/Pages/AccountantNew/Comptabilité de Base/ViewAccountDetailsModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/DashBoard.jsx

import  { useState } from 'react';
import {Link, Navigate, useLocation} from "react-router-dom";
import PropTypes from "prop-types";
import { AccessDenied } from "../../GlobalComponents/AccessDenied.jsx";
import { useAuthentication } from "../../Utils/Provider.jsx";
import { ChevronDown, ChevronUp } from 'lucide-react';

export function FinancialAccountantDashBoard({ children, linkList, requiredRole}) {


    FinancialAccountantDashBoard.propTypes = {
        children: PropTypes.node.isRequired,
        linkList: PropTypes.array.isRequired,
        requiredRole: PropTypes.string.isRequired,
    }


    const location = useLocation();
    const activeLink = location.pathname;
    const { isAuthenticated, hasRole } = useAuthentication();
    const [expandedLinks, setExpandedLinks] = useState({});



    function toggleSubMenu  (linkName)
    {
        setExpandedLinks(prev => ({
            ...prev,
            [linkName]: !prev[linkName]
        }));
    }


    function renderLink(item, index, isSubLink = false)
    {
        const IconComponent = item.icon;
        const isActive = activeLink.startsWith(item.link);
        const hasSubLinks = item.subLinks && item.subLinks.length > 0;



        return (
            <div key={index}>
                {!hasSubLinks ? (
                    <Link className={`transition-all duration-400 flex p-3 items-center cursor-pointer ${isActive ? "bg-white rounded-l-full mb-2 mt-2" : "hover:bg-white/20 hover:rounded-l-full"} ${isSubLink ? "ml-4" : "ml-5"}`}
                          to={item.link}
                    >
                        {IconComponent && (
                            <IconComponent
                                className={isActive ? "text-black text-xl mr-3" : "text-xl mr-3 text-white"}
                            />
                        )}
                        <p className={isActive ? "text-black font-bold text-md" : "text-md font-bold text-white"}>
                            {item.name}
                        </p>
                    </Link>
                ) : (
                    <div
                        className="transition-all duration-400 flex p-3.5 items-center cursor-pointer ml-5 hover:bg-white/20 hover:rounded-l-full"
                        onClick={() => toggleSubMenu(item.name)}
                    >
                        {IconComponent && (
                            <IconComponent
                                className={isActive ? "text-black text-xl mr-3" : "text-xl mr-3 text-white"}
                            />
                        )}
                        <p className={isActive ? "text-black font-bold text-md" : "text-md font-bold text-white"}>
                            {item.name}
                        </p>
                        {hasSubLinks && (expandedLinks[item.name] ? (
                                <ChevronUp className={`ml-auto ${isActive ? "text-black" : "text-white"}`}/>
                            ) : (
                                <ChevronDown className={`ml-auto ${isActive ? "text-black" : "text-white"}`}/>
                            )
                        )}
                    </div>
                )
                }
                {hasSubLinks && !expandedLinks[item.name] && (
                    <div className="ml-8 mt-2">
                        {item.subLinks.map((subItem, subIndex) => renderLink(subItem, subIndex, true))}
                    </div>
                )}
            </div>
        );
    }


    if (!isAuthenticated()) {
        return <Navigate to="/login" />;
    }

    if (!hasRole(requiredRole)) {
        return <AccessDenied Role={requiredRole} />;
    }

    return (
        <div className="flex h-screen">
            <div
                className="w-[17.5%] fixed h-screen bg-gradient-to-t from-primary-start to-primary-end flex flex-col overflow-y-auto scrollbar">
                <h1 className="text-3xl font-bold ml-6 mb-10 mt-7 text-white">
                    Fultang Clinic
                </h1>
                <nav className="flex flex-col space-y-1.5 mb-2 ">
                    {linkList.map((item, index) => renderLink(item, index))}
                </nav>
            </div>
            <div className="flex-1 min-h-screen overflow-x-hidden ml-[17.5%]">
                {children}
            </div>
        </div>
    )
}

// END OF FILE: src/Pages/AccountantNew/DashBoard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/Home/HomePage.jsx

import {
    FaChartLine,
    FaCalculator,
    FaEdit,
    FaChartBar,
    FaUserTie,
} from 'react-icons/fa';
import {
    TrendingUp,
    FileText,
    Calendar,
    PieChart
} from 'lucide-react';

import { useNavigate } from "react-router-dom";
import { AppRoutesPaths as AppRouterPaths } from "../../../Router/appRouterPaths.js";
import { CustomDashboard } from "../../../GlobalComponents/CustomDashboard.jsx";
import StatCard from "../../../GlobalComponents/StatCard.jsx";
import QuickActionButton from "../../../GlobalComponents/QuickActionButton.jsx";
import { useState, useEffect } from 'react';
import { FinancialAccountantNavBar } from "../NavBar.jsx";
import { FinancialAccountantNavLink } from "../NavLink.js";

export function FinancialAccountantHomePage() {
    const navigate = useNavigate();
    const [stats, setStats] = useState({
        totalRevenue: 0,
        monthlyExpenses: 0,
        pendingInvoices: 0,
        cashBalance: 0,
        journalEntries: 0,
        payrollCost: 0,
        budgetVariance: 0,
        pendingReconciliations: 0
    });

    const [recentActivities, setRecentActivities] = useState([]);

    useEffect(() => {
        async function fetchFinancialStats() {
            try {
                // Simuler des appels API pour récupérer les données financières
                // Dans un vrai projet, ces appels seraient faits vers votre backend

                // Exemple d'appel pour les écritures comptables
                // const journalResponse = await axiosInstance.get('/journal-entries/');
                // const payrollResponse = await axiosInstance.get('/payroll/summary/');
                // const cashResponse = await axiosInstance.get('/cash-management/balance/');

                // Pour la démonstration, on utilise des données simulées
                setStats({
                    totalRevenue: 2450000, // Revenus du mois en FCFA
                    monthlyExpenses: 1850000, // Dépenses du mois
                    pendingInvoices: 15, // Factures en attente
                    cashBalance: 8500000, // Solde de trésorerie
                    journalEntries: 342, // Écritures comptables du mois
                    payrollCost: 12500000, // Coût salarial mensuel
                    budgetVariance: 5.2, // Écart budgétaire en %
                    pendingReconciliations: 3 // Rapprochements bancaires en attente
                });

                setRecentActivities([
                    { id: 1, action: "Écriture comptable", description: "Facturation services médicaux", time: "Il y a 2h", type: "journal" },
                    { id: 3, action: "Calcul paie", description: "Personnel médical - Mars", time: "Hier", type: "payroll" },
                    { id: 4, action: "Analyse budgétaire", description: "Écart budget vs réalisé", time: "Hier", type: "analysis" }
                ]);

            } catch (error) {
                console.error("Erreur lors de la récupération des statistiques financières:", error);
            }
        }
        fetchFinancialStats();
    }, []);

    // Fonction pour formater les montants en FCFA
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('fr-FR', {
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount) + ' FCFA';
    };

    return (
        <CustomDashboard linkList={FinancialAccountantNavLink} requiredRole={"Accountant"}>
            <FinancialAccountantNavBar />
            <div className="p-6 space-y-6">
                {/* En-tête du dashboard */}
                <div className="bg-gradient-to-r from-primary-end to-primary-start rounded-lg p-6 text-white">
                    <h1 className="text-3xl font-bold mb-2">Tableau de Bord Comptabilité Financière</h1>
                    <p className="opacity-90 font-semibold text-xl">
                        Pilotez la santé financière de votre établissement médical avec des indicateurs en temps réel.
                    </p>
                    <div className="mt-4 text-sm opacity-80">
                        Période : Mars 2025 | Dernière mise à jour : {new Date().toLocaleDateString('fr-FR')}
                    </div>
                </div>

                {/* Indicateurs financiers clés */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <StatCard
                        icon={TrendingUp}
                        title="Résultat d'Exploitation"
                        value={formatCurrency(stats.totalRevenue - stats.monthlyExpenses)}
                        description="Bénéfice mensuel"
                        color="bg-blue-500"
                    />
                    <StatCard
                        icon={FaUserTie}
                        title="Masse Salariale"
                        value={formatCurrency(stats.payrollCost)}
                        description="Coût du personnel"
                        color="bg-orange-500"
                    />
                    <StatCard
                        icon={FaEdit}
                        title="Écritures Comptables"
                        value={stats.journalEntries}
                        description="Saisies du mois"
                        color="bg-indigo-500"
                    />
                    <StatCard
                        icon={FileText}
                        title="Factures en Attente"
                        value={stats.pendingInvoices}
                        description="À valider"
                        color="bg-yellow-500"
                    />
                </div>


                {/* Actions rapides */}
                <div className="bg-white rounded-lg shadow-lg p-6">
                    <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
                        <FaChartBar className="mr-2" />
                        Accès Rapide - Comptabilité
                    </h2>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <QuickActionButton
                            icon={FaEdit}
                            label="Nouvelle Écriture"
                            onClick={() => navigate(AppRouterPaths.financialAccountantJournalEntries)}
                        />
                        <QuickActionButton
                            icon={FaChartLine}
                            label="Analyse Financière"
                            onClick={() => navigate(AppRouterPaths.financialRatios)}
                        />
                        <QuickActionButton
                            icon={FaUserTie}
                            label="Comptabilité Paie"
                            onClick={() => navigate(AppRouterPaths.financialAccountPayroll)}
                        />
                        <QuickActionButton
                            icon={FaCalculator}
                            label="Budget & Contrôle"
                            onClick={() => navigate(AppRouterPaths.budgetEntry)}
                        />
                    </div>
                </div>

                {/* Tableaux de bord et activités récentes */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Répartition des dépenses */}
                    <div className="bg-gray-100 rounded-lg shadow-lg p-6">
                        <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                            <PieChart className="mr-2" />
                            Répartition des Charges
                        </h3>
                        <div className="space-y-3">
                            <div className="flex justify-between items-center">
                                <span className="text-sm font-medium">Personnel médical</span>
                                <div className="flex items-center">
                                    <div className="w-32 bg-gray-200 rounded-full h-2 mr-2">
                                        <div className="bg-blue-500 h-2 rounded-full" style={{width: '45%'}}></div>
                                    </div>
                                    <span className="text-sm text-gray-600">45%</span>
                                </div>
                            </div>
                            <div className="flex justify-between items-center">
                                <span className="text-sm font-medium">Équipements & Maintenance</span>
                                <div className="flex items-center">
                                    <div className="w-32 bg-gray-200 rounded-full h-2 mr-2">
                                        <div className="bg-green-500 h-2 rounded-full" style={{width: '25%'}}></div>
                                    </div>
                                    <span className="text-sm text-gray-600">25%</span>
                                </div>
                            </div>
                            <div className="flex justify-between items-center">
                                <span className="text-sm font-medium">Produits pharmaceutiques</span>
                                <div className="flex items-center">
                                    <div className="w-32 bg-gray-200 rounded-full h-2 mr-2">
                                        <div className="bg-purple-500 h-2 rounded-full" style={{width: '20%'}}></div>
                                    </div>
                                    <span className="text-sm text-gray-600">20%</span>
                                </div>
                            </div>
                            <div className="flex justify-between items-center">
                                <span className="text-sm font-medium">Frais généraux</span>
                                <div className="flex items-center">
                                    <div className="w-32 bg-gray-200 rounded-full h-2 mr-2">
                                        <div className="bg-orange-500 h-2 rounded-full" style={{width: '10%'}}></div>
                                    </div>
                                    <span className="text-sm text-gray-600">10%</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Activités récentes */}
                    <div className="bg-gray-100 rounded-lg shadow-lg p-6">
                        <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                            <Calendar className="mr-2" />
                            Activités Récentes
                        </h3>
                        <div className="space-y-3">
                            {recentActivities.map((activity) => (
                                <div key={activity.id} className="bg-white flex items-start p-3  rounded-lg">
                                    <div className={`p-2 rounded-full mr-3 ${
                                        activity.type === 'journal' ? 'bg-blue-100 text-blue-600' :
                                                activity.type === 'payroll' ? 'bg-purple-100 text-purple-600' :
                                                    'bg-orange-100 text-orange-600'
                                    }`}>
                                        {activity.type === 'journal' && <FaEdit className="w-3 h-3" />}
                                        {activity.type === 'payroll' && <FaUserTie className="w-3 h-3" />}
                                        {activity.type === 'analysis' && <FaChartLine className="w-3 h-3" />}
                                    </div>
                                    <div className="flex-1">
                                        <p className="text-sm font-medium text-gray-900">{activity.action}</p>
                                        <p className="text-xs text-gray-600">{activity.description}</p>
                                        <p className="text-xs text-gray-500 mt-1">{activity.time}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        </CustomDashboard>
    );
}// END OF FILE: src/Pages/AccountantNew/Home/HomePage.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/NavBar.jsx

import {FaCog, FaEnvelope, FaSignOutAlt, FaBell} from "react-icons/fa";
import {Tooltip} from "antd";
import {useAuthentication} from "../../Utils/Provider.jsx";
import userIcon from "../../assets/userIcon.png";
import { AppRoutesPaths } from "../../Router/appRouterPaths.js";
import { useNavigate } from "react-router-dom";

export function FinancialAccountantNavBar()
{

    const {logout , userData} = useAuthentication();
    const navigate = useNavigate();
    const applyNavLinkBtnStyle = () => {
        return " w-12 h-10 mt-1 border-2 bg-gray-100 flex justify-center items-center rounded-xl shadow-xl hover:bg-secondary text-secondary text-xl hover:text-white transition-all duration-300";
    }


    return (
        <>
            <div className="border-b-2 m-3  border-b-gray-300">
                <div className="w-full h-[70px] flex justify-between">
                    <h1 className="ml-3 text-4xl text-secondary mt-3.5 font-bold">
                        Financial Accountant
                    </h1>
                    <div className="flex gap-3 mt-3.5 mb-4 mr-5">
                        <Tooltip placement={"top"} title={"settings"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaCog/>
                            </button>

                        </Tooltip>

                        <Tooltip placement={"top"} title={"Messages"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaEnvelope/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"Notification"}>
                            <button
                                onClick={
                                    () => {navigate(AppRoutesPaths.laboratoryNotification)}
                                }
                                className={applyNavLinkBtnStyle()}>
                                <FaBell/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"LogOut"}>
                            <button
                                onClick={() => {logout()}}
                                className={" w-12 h-10 mt-1 border-2 bg-red-400 flex justify-center items-center rounded-xl shadow-xl hover:bg-white text-white text-xl hover:text-red-500 transition-all duration-300"}>
                                <FaSignOutAlt/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"Profile"}>
                            <button className="ml-3 flex">
                                <p className="font-bold text-secondary text-xl mt-2">{"Hello " +userData?.username + "!"}</p>
                                <img src={userIcon} alt={"user-icon"} className="w-12 h-12 ml-2 mr-3"/>

                            </button>
                        </Tooltip>
                    </div>
                </div>
            </div>
        </>
    )
}// END OF FILE: src/Pages/AccountantNew/NavBar.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/NavLink.js

import {
    FaHome,
    FaChartBar,
    FaBookOpen,
    FaEdit,
    FaBook,
    FaUserTie,
    FaFileInvoiceDollar,
    FaChartLine,
    FaCalculator,
    FaBell,
    FaQuestionCircle,
} from "react-icons/fa";
import { AppRoutesPaths as appRoutes } from "../../Router/appRouterPaths.js";
import {TrendingUp,} from "lucide-react";

export const FinancialAccountantNavLink = [

    {
        name: "Dashboard",
        link: appRoutes.financialAccountantHome,
        icon: FaHome,
        description: "Overview of financial KPIs"
    },

    // Basic Accounting
    {
        name: 'Basic Accounting',
        icon: FaBookOpen,
        subLinks: [
            {
                icon: FaChartBar,
                name: "Chart of Accounts",
                link: appRoutes.financialAccountantChartOfAccount,
                description: "Manage the OHADA account structure"
            },
            {
                icon: FaEdit,
                name: "Journal Entries",
                link: appRoutes.financialAccountantJournalEntries,
                description: "Record accounting transactions"
            },
            {
                icon: FaBook,
                name: "Accounting Journals",
                link: appRoutes.financialAccountantAccountingJournals,
                description: "View journals (Sales, Purchases, Bank, Cash, Adjustments)"
            },
            {
                icon: FaBook,
                name: "Ledger & Trial Balance",
                link: appRoutes.financialAccountantAccountingGrandLivre,
                description: "View the ledger and trial balance"
            }
        ]
    },

    /* Revenue & Receivables
    {
        name: 'Revenue & Receivables',
        icon: FaMoneyBillWave,
        subLinks: [
            {
                icon: Receipt,
                name: "Billing",
                link: appRoutes.billing,
                description: "Manage patient billing"
            },
            {
                icon: TrendingUp,
                name: "Revenue by Service",
                link: appRoutes.revenueByService,
                description: "Analyze revenue by medical service"
            },
            {
                icon: CreditCard,
                name: "Accounts Receivable",
                link: appRoutes.accountsReceivable,
                description: "Track receivables and collections"
            }
        ]
    },*/

    /* Suppliers & Payables
    {
        name: 'Suppliers & Payables',
        icon: FaTruck,
        subLinks: [
            {
                icon: FaUsers,
                name: "Supplier Directory",
                link: appRoutes.suppliers,
                description: "Manage suppliers and their terms"
            },
            {
                icon: FileText,
                name: "Supplier Invoices",
                link: appRoutes.supplierInvoices,
                description: "Enter and validate received invoices"
            },
            {
                icon: Banknote,
                name: "Payment Schedule & Payments",
                link: appRoutes.payables,
                description: "Manage due dates and payments"
            }
        ]
    },*/

    /* Cash Management
    {
        name: 'Cash Management',
        icon: FaUniversity,
        subLinks: [
            {
                icon: FaUniversity,
                name: "Bank Balances",
                link: appRoutes.cashPositions,
                description: "View real-time bank balances"
            },
            {
                icon: FaCalculator,
                name: "Bank Reconciliation",
                link: appRoutes.bankReconciliation,
                description: "Perform monthly reconciliations"
            },
            {
                icon: FaChartLine,
                name: "Cash Flow Forecast",
                link: appRoutes.cashFlowForecast,
                description: "Forecast cash flows"
            }
        ]
    },*/

    /* Fixed Assets
    {
        name: 'Fixed Assets',
        icon: FaBuilding,
        subLinks: [
            {
                icon: FaBuilding,
                name: "Fixed Assets Register",
                link: appRoutes.fixedAssetsRegister,
                description: "Manage capital assets"
            },
            {
                icon: FaCalculator,
                name: "Depreciation Calculation",
                link: appRoutes.depreciation,
                description: "Calculate and record depreciation"
            }
        ]
    },*/

    /* Inventory & Stock
    {
        name: 'Inventory & Stock',
        icon: FaBoxes,
        subLinks: [
            {
                icon: FaBoxes,
                name: "Inventory Valuation",
                link: appRoutes.inventoryValuation,
                description: "Value inventory (FIFO, LIFO, WAC)"
            },
            {
                icon: FaEdit,
                name: "Inventory Entry",
                link: appRoutes.physicalInventory,
                description: "Record physical counts"
            },
            {
                icon: FaChartBar,
                name: "ABC Analysis",
                link: appRoutes.abcAnalysis,
                description: "Classify and analyze stock"
            }
        ]
    }, */

    // Payroll & Social Charges
    {
        name: 'Payroll & Social Charges',
        icon: FaUserTie,
        subLinks: [
            {
                icon: FaUserTie,
                name: "Payroll Accounting",
                link: appRoutes.financialAccountPayroll,
                description: "Account for payroll"
            },
            {
                icon: FaFileInvoiceDollar,
                name: "Social Charges",
                link: appRoutes.socialCharges,
                description: "Manage social security, training taxes, etc."
            },
            {
                icon: FaChartLine,
                name: "HR Cost Analysis",
                link: appRoutes.financialAccountantCostAnalytic,
                description: "Analyze costs by department"
            }
        ]
    },

    /* VAT & Taxation
    {
        name: 'VAT & Taxation',
        icon: FaFileInvoiceDollar,
        subLinks: [
            {
                icon: FaCalculator,
                name: "VAT Calculation",
                link: appRoutes.vatCalculation,
                description: "Calculate monthly VAT"
            },
            {
                icon: FaFileAlt,
                name: "Tax Declarations",
                link: appRoutes.taxDeclarations,
                description: "Prepare and submit tax returns"
            },
            {
                icon: FaBell,
                name: "Tax Calendar",
                link: appRoutes.taxCalendar,
                description: "Track tax deadlines"
            }
        ]
    },

    // Financial Analysis
    {
        name: 'Financial Analysis',
        icon: FaChartLine,
        subLinks: [
            {
                icon: FaChartLine,
                name: "Financial Ratios",
                link: appRoutes.financialRatios,
                description: "Compute performance ratios"
            },
            {
                icon: TrendingUp,
                name: "Profitability by Service",
                link: appRoutes.profitabilityAnalysis,
                description: "Analyze service profitability"
            },
            {
                icon: FaChartBar,
                name: "Executive Dashboard",
                link: appRoutes.executiveDashboard,
                description: "KPIs for management"
            }
        ]
    },

    // Budget & Control
    {
        name: 'Budget & Control',
        icon: FaCalculator,
        subLinks: [
            {
                icon: FaEdit,
                name: "Budget Entry",
                link: appRoutes.budgetEntry,
                description: "Create and modify budgets"
            },
            {
                icon: FaChartBar,
                name: "Variance Analysis",
                link: appRoutes.budgetVariance,
                description: "Compare budget vs actual"
            },
            {
                icon: FaBell,
                name: "Budget Alerts",
                link: appRoutes.budgetAlerts,
                description: "Receive overrun alerts"
            }
        ]
    },

    /* Closing & Reporting
    {
        name: 'Closing & Reporting',
        icon: FaLock,
        subLinks: [
            {
                icon: FaCog,
                name: "Closing Assistant",
                link: appRoutes.periodClose,
                description: "Perform monthly close"
            },
            {
                icon: FaFileAlt,
                name: "Financial Statements",
                link: appRoutes.financialStatements,
                description: "Generate balance sheet and income statement"
            },
            {
                icon: FaBook,
                name: "Custom Reports",
                link: appRoutes.customReports,
                description: "Create tailored reports"
            }
        ]
    },*/

    {
        name: 'Help Center',
        icon: FaQuestionCircle,
        link: appRoutes.helpCenter,
        description: "Documentation and support"
    }
];
// END OF FILE: src/Pages/AccountantNew/NavLink.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/Payroll & Social Charge/CostAnalytic.jsx

import React, { useState, useMemo } from 'react';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { TrendingUp, Users, DollarSign, Target, ArrowUpRight, ArrowDownRight, AlertCircle, Award } from 'lucide-react';
import {FinancialAccountantNavLink} from "../NavLink.js";
import {AccountantNavBar} from "../../Accountant/Components/AccountantNavBar.jsx";
import {AccountantDashBoard} from "../../Accountant/Components/AccountantDashboard.jsx";

export function HRAnalyticsDashboard() {
    // Données simulées pour l'analyse RH
    const [timeRange, setTimeRange] = useState('12months');

    // Données historiques de masse salariale (simulées)
    const masseSalarialeHistory = [
        { mois: '2024-07', masseSalariale: 42000000, effectif: 82, chargesSociales: 6720000 },
        { mois: '2024-08', masseSalariale: 42500000, effectif: 83, chargesSociales: 6800000 },
        { mois: '2024-09', masseSalariale: 43200000, effectif: 84, chargesSociales: 6912000 },
        { mois: '2024-10', masseSalariale: 43800000, effectif: 85, chargesSociales: 7008000 },
        { mois: '2024-11', masseSalariale: 44200000, effectif: 86, chargesSociales: 7072000 },
        { mois: '2024-12', masseSalariale: 44500000, effectif: 86, chargesSociales: 7120000 },
        { mois: '2025-01', masseSalariale: 44800000, effectif: 87, chargesSociales: 7168000 },
        { mois: '2025-02', masseSalariale: 44900000, effectif: 87, chargesSociales: 7184000 },
        { mois: '2025-03', masseSalariale: 45200000, effectif: 87, chargesSociales: 7232000 },
        { mois: '2025-04', masseSalariale: 45400000, effectif: 88, chargesSociales: 7264000 },
        { mois: '2025-05', masseSalariale: 45600000, effectif: 88, chargesSociales: 7296000 },
        { mois: '2025-06', masseSalariale: 45000000, effectif: 87, chargesSociales: 7200000 }
    ];

    // Répartition par département
    const departmentBreakdown = [
        { department: 'Production', effectif: 35, masseSalariale: 18200000, couleur: '#3B82F6' },
        { department: 'Commercial', effectif: 18, masseSalariale: 12600000, couleur: '#10B981' },
        { department: 'Administration', effectif: 12, masseSalariale: 8400000, couleur: '#F59E0B' },
        { department: 'IT', effectif: 8, masseSalariale: 5800000, couleur: '#8B5CF6' },
        { department: 'RH', effectif: 6, masseSalariale: 3600000, couleur: '#EF4444' },
        { department: 'Finance', effectif: 8, masseSalariale: 4800000, couleur: '#06B6D4' }
    ];

    // Benchmarks sectoriels (données du marché camerounais)
    const sectorBenchmarks = {
        salaireMoyenSecteur: 580000, // FCFA par mois
        chargesSocialesSecteur: 16.8, // % de la masse salariale
        turnoverSecteur: 12.5, // % annuel
        productiviteSecteur: 520000 // FCFA de CA par salarié par mois
    };

    // Calculs des métriques clés
    const currentMonth = masseSalarialeHistory[masseSalarialeHistory.length - 1];
    const previousMonth = masseSalarialeHistory[masseSalarialeHistory.length - 2];

    const metrics = useMemo(() => {
        const salaireMoyenActuel = currentMonth.masseSalariale / currentMonth.effectif;
        const coutTotalParSalarie = (currentMonth.masseSalariale + currentMonth.chargesSociales) / currentMonth.effectif;
        const tauxChargesSociales = (currentMonth.chargesSociales / currentMonth.masseSalariale) * 100;

        // Évolutions mensuelles
        const evolutionMasseSalariale = ((currentMonth.masseSalariale - previousMonth.masseSalariale) / previousMonth.masseSalariale) * 100;
        const evolutionEffectif = currentMonth.effectif - previousMonth.effectif;

        // Comparaisons avec les benchmarks sectoriels
        const ecartSalaireMoyen = ((salaireMoyenActuel - sectorBenchmarks.salaireMoyenSecteur) / sectorBenchmarks.salaireMoyenSecteur) * 100;
        const ecartChargesSociales = tauxChargesSociales - sectorBenchmarks.chargesSocialesSecteur;

        return {
            salaireMoyenActuel,
            coutTotalParSalarie,
            tauxChargesSociales,
            evolutionMasseSalariale,
            evolutionEffectif,
            ecartSalaireMoyen,
            ecartChargesSociales
        };
    }, [currentMonth, previousMonth]);

    // Fonction de formatage des montants
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('fr-FR', {
            style: 'currency',
            currency: 'XAF',
            minimumFractionDigits: 0
        }).format(amount).replace('XAF', 'FCFA');
    };

    // Fonction de formatage des pourcentages
    const formatPercentage = (value, decimals = 1) => {
        return `${value.toFixed(decimals)}%`;
    };

    // Préparation des données pour les graphiques
    const chartData = masseSalarialeHistory.map(item => ({
        ...item,
        moisLabel: new Date(item.mois).toLocaleDateString('fr-FR', { month: 'short', year: '2-digit' }),
        salaireMoyen: item.masseSalariale / item.effectif,
        coutTotal: item.masseSalariale + item.chargesSociales
    }));

    return (
        <AccountantDashBoard linkList={FinancialAccountantNavLink} requiredRole={"Accountant"}>
            <AccountantNavBar></AccountantNavBar>
        <div className="max-w-7xl mx-auto p-6 bg-gray-50 min-h-screen">
            {/* En-tête du tableau de bord */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
                <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                        <BarChart className="h-8 w-8 text-indigo-600" />
                        <div>
                            <h1 className="text-2xl font-bold text-gray-900">Analyses RH</h1>
                            <p className="text-gray-600">Coûts, évolutions et benchmarks sectoriels</p>
                        </div>
                    </div>

                    <div className="flex items-center space-x-3">
                        <select
                            value={timeRange}
                            onChange={(e) => setTimeRange(e.target.value)}
                            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        >
                            <option value="6months">6 derniers mois</option>
                            <option value="12months">12 derniers mois</option>
                            <option value="24months">24 derniers mois</option>
                        </select>
                    </div>
                </div>
            </div>

            {/* KPIs principaux */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                    <div className="flex items-center justify-between">
                        <div>
                            <p className="text-sm text-gray-600">Salaire moyen</p>
                            <p className="text-2xl font-bold text-gray-900">{formatCurrency(metrics.salaireMoyenActuel)}</p>
                            <div className="flex items-center mt-1">
                                {metrics.ecartSalaireMoyen >= 0 ? (
                                    <ArrowUpRight className="h-4 w-4 text-green-600 mr-1" />
                                ) : (
                                    <ArrowDownRight className="h-4 w-4 text-red-600 mr-1" />
                                )}
                                <span className={`text-sm ${metrics.ecartSalaireMoyen >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {formatPercentage(Math.abs(metrics.ecartSalaireMoyen))} vs secteur
                </span>
                            </div>
                        </div>
                        <DollarSign className="h-8 w-8 text-green-600" />
                    </div>
                </div>

                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                    <div className="flex items-center justify-between">
                        <div>
                            <p className="text-sm text-gray-600">Coût total par ETP</p>
                            <p className="text-2xl font-bold text-gray-900">{formatCurrency(metrics.coutTotalParSalarie)}</p>
                            <p className="text-sm text-gray-500">Charges sociales incluses</p>
                        </div>
                        <Users className="h-8 w-8 text-blue-600" />
                    </div>
                </div>

                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                    <div className="flex items-center justify-between">
                        <div>
                            <p className="text-sm text-gray-600">Taux charges sociales</p>
                            <p className="text-2xl font-bold text-gray-900">{formatPercentage(metrics.tauxChargesSociales)}</p>
                            <div className="flex items-center mt-1">
                <span className={`text-sm ${metrics.ecartChargesSociales <= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {metrics.ecartChargesSociales > 0 ? '+' : ''}{formatPercentage(metrics.ecartChargesSociales)} vs secteur
                </span>
                            </div>
                        </div>
                        <Target className="h-8 w-8 text-purple-600" />
                    </div>
                </div>

                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                    <div className="flex items-center justify-between">
                        <div>
                            <p className="text-sm text-gray-600">Évolution effectif</p>
                            <p className="text-2xl font-bold text-gray-900">{currentMonth.effectif}</p>
                            <div className="flex items-center mt-1">
                                {metrics.evolutionEffectif >= 0 ? (
                                    <ArrowUpRight className="h-4 w-4 text-green-600 mr-1" />
                                ) : (
                                    <ArrowDownRight className="h-4 w-4 text-red-600 mr-1" />
                                )}
                                <span className={`text-sm ${metrics.evolutionEffectif >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {metrics.evolutionEffectif >= 0 ? '+' : ''}{metrics.evolutionEffectif} ce mois
                </span>
                            </div>
                        </div>
                        <TrendingUp className="h-8 w-8 text-indigo-600" />
                    </div>
                </div>
            </div>

            {/* Graphiques d'évolution */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                {/* Évolution masse salariale et effectif */}
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h3 className="text-lg font-semibold mb-4">Évolution Masse Salariale & Effectif</h3>
                    <ResponsiveContainer width="100%" height={300}>
                        <LineChart data={chartData}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="moisLabel" />
                            <YAxis yAxisId="left" orientation="left" />
                            <YAxis yAxisId="right" orientation="right" />
                            <Tooltip
                                formatter={(value, name) => [
                                    name === 'masseSalariale' ? formatCurrency(value) : value,
                                    name === 'masseSalariale' ? 'Masse salariale' : 'Effectif'
                                ]}
                            />
                            <Line yAxisId="left" type="monotone" dataKey="masseSalariale" stroke="#3B82F6" strokeWidth={2} name="masseSalariale" />
                            <Line yAxisId="right" type="monotone" dataKey="effectif" stroke="#10B981" strokeWidth={2} name="effectif" />
                        </LineChart>
                    </ResponsiveContainer>
                </div>

                {/* Évolution coût total par salarié */}
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h3 className="text-lg font-semibold mb-4">Coût Total par Salarié (ETP)</h3>
                    <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={chartData}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="moisLabel" />
                            <YAxis />
                            <Tooltip formatter={(value) => formatCurrency(value)} />
                            <Bar dataKey="salaireMoyen" fill="#8B5CF6" name="Salaire moyen" />
                        </BarChart>
                    </ResponsiveContainer>
                </div>
            </div>

            {/* Répartition par département */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                {/* Graphique en secteurs - Répartition effectif */}
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h3 className="text-lg font-semibold mb-4">Répartition Effectif par Département</h3>
                    <ResponsiveContainer width="100%" height={300}>
                        <PieChart>
                            <Pie
                                data={departmentBreakdown}
                                cx="50%"
                                cy="50%"
                                outerRadius={100}
                                dataKey="effectif"
                                label={({ department, effectif }) => `${department}: ${effectif}`}
                            >
                                {departmentBreakdown.map((entry, index) => (
                                    <Cell key={`cell-${index}`} fill={entry.couleur} />
                                ))}
                            </Pie>
                            <Tooltip />
                        </PieChart>
                    </ResponsiveContainer>
                </div>

                {/* Tableau détaillé par département */}
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h3 className="text-lg font-semibold mb-4">Analyse par Département</h3>
                    <div className="space-y-3">
                        {departmentBreakdown.map((dept, index) => {
                            const salaireMoyenDept = dept.masseSalariale / dept.effectif;
                            const pourcentageEffectif = (dept.effectif / currentMonth.effectif) * 100;

                            return (
                                <div key={index} className="border border-gray-200 rounded-lg p-4">
                                    <div className="flex items-center justify-between mb-2">
                                        <div className="flex items-center space-x-2">
                                            <div
                                                className="w-3 h-3 rounded-full"
                                                style={{ backgroundColor: dept.couleur }}
                                            ></div>
                                            <span className="font-medium">{dept.department}</span>
                                        </div>
                                        <span className="text-sm text-gray-500">
                      {formatPercentage(pourcentageEffectif, 0)} de l'effectif
                    </span>
                                    </div>
                                    <div className="grid grid-cols-3 gap-4 text-sm">
                                        <div>
                                            <p className="text-gray-600">Effectif</p>
                                            <p className="font-semibold">{dept.effectif} personnes</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">Masse salariale</p>
                                            <p className="font-semibold">{formatCurrency(dept.masseSalariale)}</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">Salaire moyen</p>
                                            <p className="font-semibold">{formatCurrency(salaireMoyenDept)}</p>
                                        </div>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>
            </div>

            {/* Benchmarks sectoriels */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="flex items-center space-x-2 mb-6">
                    <Award className="h-6 w-6 text-yellow-600" />
                    <h3 className="text-lg font-semibold">Benchmarks Sectoriels (Cameroun)</h3>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <div className="text-center">
                        <div className="p-4 bg-blue-50 rounded-lg">
                            <p className="text-sm text-gray-600">Salaire moyen secteur</p>
                            <p className="text-xl font-bold text-blue-600">{formatCurrency(sectorBenchmarks.salaireMoyenSecteur)}</p>
                            <p className="text-sm text-gray-500 mt-1">Notre position:</p>
                            <p className={`text-sm font-medium ${metrics.ecartSalaireMoyen >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                {metrics.ecartSalaireMoyen >= 0 ? 'Au-dessus' : 'En-dessous'} ({formatPercentage(Math.abs(metrics.ecartSalaireMoyen))})
                            </p>
                        </div>
                    </div>

                    <div className="text-center">
                        <div className="p-4 bg-purple-50 rounded-lg">
                            <p className="text-sm text-gray-600">Charges sociales secteur</p>
                            <p className="text-xl font-bold text-purple-600">{formatPercentage(sectorBenchmarks.chargesSocialesSecteur)}</p>
                            <p className="text-sm text-gray-500 mt-1">Notre taux:</p>
                            <p className={`text-sm font-medium ${metrics.ecartChargesSociales <= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                {formatPercentage(metrics.tauxChargesSociales)} ({metrics.ecartChargesSociales > 0 ? '+' : ''}{formatPercentage(metrics.ecartChargesSociales)})
                            </p>
                        </div>
                    </div>

                    <div className="text-center">
                        <div className="p-4 bg-green-50 rounded-lg">
                            <p className="text-sm text-gray-600">Turnover secteur</p>
                            <p className="text-xl font-bold text-green-600">{formatPercentage(sectorBenchmarks.turnoverSecteur)}</p>
                            <p className="text-sm text-gray-500 mt-1">À surveiller</p>
                            <p className="text-sm text-gray-600">Données à collecter</p>
                        </div>
                    </div>

                    <div className="text-center">
                        <div className="p-4 bg-yellow-50 rounded-lg">
                            <p className="text-sm text-gray-600">Productivité secteur</p>
                            <p className="text-xl font-bold text-yellow-600">{formatCurrency(sectorBenchmarks.productiviteSecteur)}</p>
                            <p className="text-sm text-gray-500 mt-1">CA par salarié/mois</p>
                            <p className="text-sm text-gray-600">Objectif cible</p>
                        </div>
                    </div>
                </div>

                {/* Recommandations basées sur les benchmarks */}
                <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-start space-x-2">
                        <AlertCircle className="h-5 w-5 text-blue-600 mt-0.5" />
                        <div>
                            <h4 className="font-medium text-gray-900">Recommandations Stratégiques</h4>
                            <ul className="mt-2 text-sm text-gray-600 space-y-1">
                                {metrics.ecartSalaireMoyen > 10 && (
                                    <li>• Salaires supérieurs au marché (+{formatPercentage(metrics.ecartSalaireMoyen)}) - Vérifier la pertinence des grilles salariales</li>
                                )}
                                {metrics.ecartSalaireMoyen < -10 && (
                                    <li>• Salaires inférieurs au marché ({formatPercentage(metrics.ecartSalaireMoyen)}) - Risque de turnover élevé</li>
                                )}
                                {metrics.tauxChargesSociales > sectorBenchmarks.chargesSocialesSecteur + 2 && (
                                    <li>• Taux de charges sociales élevé - Optimiser la structure de rémunération</li>
                                )}
                                <li>• Effectif stable avec {currentMonth.effectif} collaborateurs - Maintenir la dynamique de croissance</li>
                                <li>• Suivi mensuel recommandé pour anticiper les écarts budgétaires</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
            </AccountantDashBoard>
    );
};

// END OF FILE: src/Pages/AccountantNew/Payroll & Social Charge/CostAnalytic.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/Payroll & Social Charge/PayrollJournal.jsx

import React, { useState, useEffect } from 'react';
import { Calendar, Calculator, AlertTriangle, Download, Send, CheckCircle2, Clock, Edit3, Save, X, Plus, Trash2, Settings, TrendingUp, FileText, Bell } from 'lucide-react';
import {FinancialAccountantNavLink} from "../NavLink.js";
import {AccountantNavBar} from "../../Accountant/Components/AccountantNavBar.jsx";
import {AccountantDashBoard} from "../../Accountant/Components/AccountantDashboard.jsx";

export function SocialChargesCalculator() {
    // État pour les données de charges sociales avec structure plus flexible
    const [chargesData, setChargesData] = useState({
        masseSalariale: 45000000,
        effectif: 87,
        periode: '2025-06',
        declarations: []
    });

    // Configuration modifiable des taux des charges sociales
    const [taxRates, setTaxRates] = useState([
        {
            id: 'cnps_salarie',
            name: 'CNPS Salarié',
            category: 'cnps',
            type: 'percentage',
            rate: 4.2,
            base: 'masseSalariale',
            payedBy: 'employee',
            description: 'Cotisation salariale CNPS (retraite)',
            mandatory: true,
            color: 'blue'
        },
        {
            id: 'cnps_employeur',
            name: 'CNPS Employeur',
            category: 'cnps',
            type: 'percentage',
            rate: 7.4,
            base: 'masseSalariale',
            payedBy: 'employer',
            description: 'Cotisation patronale CNPS',
            mandatory: true,
            color: 'blue'
        },
        {
            id: 'taxe_formation',
            name: 'Taxe Formation Professionnelle',
            category: 'taxes',
            type: 'percentage',
            rate: 1.2,
            base: 'masseSalariale',
            payedBy: 'employer',
            description: 'Financement de la formation professionnelle',
            mandatory: true,
            color: 'green'
        },
        {
            id: 'crtv',
            name: 'CRTV',
            category: 'taxes',
            type: 'fixed',
            rate: 1000,
            base: 'effectif',
            payedBy: 'employer',
            description: 'Redevance audiovisuelle mensuelle',
            mandatory: true,
            color: 'orange'
        }
    ]);

    // État pour l'édition des taux
    const [editingTax, setEditingTax] = useState(null);
    const [showAddTaxModal, setShowAddTaxModal] = useState(false);

    // Nouvelle taxe à ajouter
    const [newTax, setNewTax] = useState({
        name: '',
        category: 'taxes',
        type: 'percentage',
        rate: 0,
        base: 'masseSalariale',
        payedBy: 'employer',
        description: '',
        mandatory: false,
        color: 'purple'
    });

    // Calculs dynamiques basés sur les taux configurés
    const calculations = React.useMemo(() => {
        const results = {};
        let totalEmployee = 0;
        let totalEmployer = 0;

        taxRates.forEach(tax => {
            const baseAmount = tax.base === 'masseSalariale' ? chargesData.masseSalariale : chargesData.effectif;
            const amount = tax.type === 'percentage' ?
                baseAmount * (tax.rate / 100) :
                baseAmount * tax.rate;

            results[tax.id] = amount;

            if (tax.payedBy === 'employee') {
                totalEmployee += amount;
            } else {
                totalEmployer += amount;
            }
        });

        results.totalEmployee = totalEmployee;
        results.totalEmployer = totalEmployer;
        results.totalCharges = totalEmployee + totalEmployer;
        results.totalCnps = (results.cnps_salarie || 0) + (results.cnps_employeur || 0);

        return results;
    }, [taxRates, chargesData.masseSalariale, chargesData.effectif]);

    // Échéances générées dynamiquement
    const deadlines = React.useMemo(() => {
        return [
            {
                id: 1,
                type: 'CNPS',
                description: 'Déclaration et paiement CNPS',
                deadline: '2025-07-15',
                amount: calculations.totalCnps,
                status: 'pending',
                priority: 'high',
                color: 'blue'
            },
            {
                id: 2,
                type: 'Formation',
                description: 'Taxe de formation professionnelle',
                deadline: '2025-07-31',
                amount: calculations.taxe_formation || 0,
                status: 'pending',
                priority: 'medium',
                color: 'green'
            },
            {
                id: 3,
                type: 'CRTV',
                description: 'Redevance audiovisuelle CRTV',
                deadline: '2025-07-10',
                amount: calculations.crtv || 0,
                status: 'pending',
                priority: 'high',
                color: 'orange'
            }
        ];
    }, [calculations]);

    // Fonction de formatage améliorée
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('fr-FR', {
            style: 'currency',
            currency: 'XAF',
            minimumFractionDigits: 0
        }).format(amount).replace('XAF', 'FCFA');
    };

    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('fr-FR', {
            day: '2-digit',
            month: 'long',
            year: 'numeric'
        });
    };

    const getDaysUntilDeadline = (deadline) => {
        const today = new Date();
        const deadlineDate = new Date(deadline);
        const diffTime = deadlineDate.getTime() - today.getTime();
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    };

    const getPriorityColor = (deadline) => {
        const days = getDaysUntilDeadline(deadline);
        if (days <= 5) return 'text-red-600 bg-red-50 border-red-200';
        if (days <= 15) return 'text-orange-600 bg-orange-50 border-orange-200';
        return 'text-green-600 bg-green-50 border-green-200';
    };

    // Fonctions de gestion des taxes
    const startEditingTax = (tax) => {
        setEditingTax({ ...tax });
    };

    const saveEditingTax = () => {
        setTaxRates(prev => prev.map(tax =>
            tax.id === editingTax.id ? editingTax : tax
        ));
        setEditingTax(null);
    };

    const cancelEditingTax = () => {
        setEditingTax(null);
    };

    const addNewTax = () => {
        const newTaxWithId = {
            ...newTax,
            id: Date.now().toString()
        };
        setTaxRates(prev => [...prev, newTaxWithId]);
        setNewTax({
            name: '',
            category: 'taxes',
            type: 'percentage',
            rate: 0,
            base: 'masseSalariale',
            payedBy: 'employer',
            description: '',
            mandatory: false,
            color: 'purple'
        });
        setShowAddTaxModal(false);
    };

    const deleteTax = (taxId) => {
        setTaxRates(prev => prev.filter(tax => tax.id !== taxId && tax.mandatory));
    };

    const getColorClasses = (color) => {
        const colors = {
            blue: 'bg-blue-50 text-blue-700 border-blue-200',
            green: 'bg-green-50 text-green-700 border-green-200',
            orange: 'bg-orange-50 text-orange-700 border-orange-200',
            purple: 'bg-purple-50 text-purple-700 border-purple-200',
            red: 'bg-red-50 text-red-700 border-red-200'
        };
        return colors[color] || colors.purple;
    };

    return (
        <AccountantDashBoard linkList={FinancialAccountantNavLink} requiredRole={"Accountant"}>
            <AccountantNavBar></AccountantNavBar>
        <div className="max-w-7xl mx-auto p-6 bg-gradient-to-br from-gray-50 to-blue-50 min-h-screen">
            {/* En-tête modernisé */}
            <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-8 mb-8 relative overflow-hidden">
                <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-primary-end to-primary-start rounded-full -mr-16 -mt-16"></div>
                <div className="relative flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                        <div className="p-3 bg-gradient-to-br from-primary-end to-primary-start rounded-xl">
                            <Calculator className="h-8 w-8 text-white" />
                        </div>
                        <div>
                            <h1 className="text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
                                Charges Sociales
                            </h1>
                            <p className="text-gray-600 mt-1">Calculs automatiques et gestion des échéances</p>
                        </div>
                    </div>

                    <div className="text-right">
                        <p className="text-sm text-gray-500">Période de paie</p>
                        <p className="text-2xl font-bold text-gray-800">{chargesData.periode}</p>
                        <div className="flex items-center mt-2 text-sm text-green-600">
                            <TrendingUp className="h-4 w-4 mr-1" />
                            Calculs à jour
                        </div>
                    </div>
                </div>
            </div>

            {/* Paramètres de calcul améliorés */}
            <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-8 mb-8">
                <div className="flex items-center justify-between mb-6">
                    <h2 className="text-2xl font-bold text-gray-800">Paramètres de Calcul</h2>
                    <div className="flex items-center space-x-2 text-sm text-gray-500">
                        <Settings className="h-4 w-4" />
                        Configuration de base
                    </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div className="space-y-2">
                        <label className="block text-sm font-semibold text-gray-700">
                            Masse salariale brute
                        </label>
                        <div className="relative">
                            <input
                                type="number"
                                value={chargesData.masseSalariale}
                                onChange={(e) => setChargesData(prev => ({
                                    ...prev,
                                    masseSalariale: parseInt(e.target.value) || 0
                                }))}
                                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                                placeholder="Montant en FCFA"
                            />
                            <div className="absolute inset-y-0 right-0 flex items-center pr-4">
                                <span className="text-sm text-gray-500 font-medium">FCFA</span>
                            </div>
                        </div>
                        <p className="text-sm text-gray-500">
                            Montant : {formatCurrency(chargesData.masseSalariale)}
                        </p>
                    </div>

                    <div className="space-y-2">
                        <label className="block text-sm font-semibold text-gray-700">
                            Nombre de salariés
                        </label>
                        <div className="relative">
                            <input
                                type="number"
                                value={chargesData.effectif}
                                onChange={(e) => setChargesData(prev => ({
                                    ...prev,
                                    effectif: parseInt(e.target.value) || 0
                                }))}
                                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                                placeholder="Nombre d'employés"
                            />
                            <div className="absolute inset-y-0 right-0 flex items-center pr-4">
                                <span className="text-sm text-gray-500 font-medium">employés</span>
                            </div>
                        </div>
                        <p className="text-sm text-gray-500">
                            Effectif total déclaré
                        </p>
                    </div>
                </div>
            </div>

            {/* Récapitulatif des charges avec design moderne */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                {[
                    {
                        label: 'Total CNPS',
                        amount: calculations.totalCnps,
                        desc: 'Salarié + Employeur',
                        color: 'from-blue-500 to-blue-600',
                        icon: ''
                    },
                    {
                        label: 'Taxe Formation',
                        amount: calculations.taxe_formation || 0,
                        desc: '1,2% masse salariale',
                        color: 'from-green-500 to-green-600',
                        icon: ''
                    },
                    {
                        label: 'CRTV',
                        amount: calculations.crtv || 0,
                        desc: `${chargesData.effectif} × 1 000 FCFA`,
                        color: 'from-orange-500 to-orange-600',
                        icon: ''
                    },
                    {
                        label: 'Total Charges',
                        amount: calculations.totalCharges,
                        desc: 'Toutes charges comprises',
                        color: 'from-purple-500 to-purple-600',
                        icon: ''
                    }
                ].map((item, index) => (
                    <div key={index} className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 relative overflow-hidden group hover:shadow-xl transition-all duration-300">
                        <div className={`absolute top-0 right-0 w-20 h-20 bg-gradient-to-br ${item.color} rounded-full -mr-10 -mt-10 opacity-10 group-hover:opacity-20 transition-opacity`}></div>
                        <div className="relative">
                            <div className="flex items-center justify-between mb-3">
                                <span className="text-2xl">{item.icon}</span>
                                <div className={`px-3 py-1 bg-gradient-to-r ${item.color} text-white rounded-full text-xs font-semibold`}>
                                    CALCULÉ
                                </div>
                            </div>
                            <p className="text-sm text-gray-600 font-medium">{item.label}</p>
                            <p className="text-2xl font-bold text-gray-800 my-2">{formatCurrency(item.amount)}</p>
                            <p className="text-xs text-gray-500">{item.desc}</p>
                        </div>
                    </div>
                ))}
            </div>

            {/* Configuration des taxes avec interface intuitive */}
            <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-8 mb-8">
                <div className="flex items-center justify-between mb-6">
                    <h2 className="text-2xl font-bold text-gray-800">Configuration des Taxes</h2>
                    <button
                        onClick={() => setShowAddTaxModal(true)}
                        className="flex items-center px-4 py-2 bg-gradient-to-r from-primary-end to-primary-start text-white rounded-xl hover:from-purple-700 hover:to-blue-700 transition-all duration-200 transform hover:scale-105"
                    >
                        <Plus className="h-4 w-4 mr-2" />
                        Ajouter une taxe
                    </button>
                </div>

                <div className="space-y-4">
                    {taxRates.map((tax) => (
                        <div key={tax.id} className={`border-2 rounded-xl p-6 transition-all duration-200 ${getColorClasses(tax.color)}`}>
                            {editingTax && editingTax.id === tax.id ? (
                                <div className="space-y-4">
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <input
                                            type="text"
                                            value={editingTax.name}
                                            onChange={(e) => setEditingTax(prev => ({ ...prev, name: e.target.value }))}
                                            className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                                            placeholder="Nom de la taxe"
                                        />
                                        <div className="flex items-center space-x-2">
                                            <input
                                                type="number"
                                                step="0.1"
                                                value={editingTax.rate}
                                                onChange={(e) => setEditingTax(prev => ({ ...prev, rate: parseFloat(e.target.value) || 0 }))}
                                                className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                                            />
                                            <span className="text-sm font-medium">
                                                {editingTax.type === 'percentage' ? '%' : 'FCFA'}
                                            </span>
                                        </div>
                                        <select
                                            value={editingTax.base}
                                            onChange={(e) => setEditingTax(prev => ({ ...prev, base: e.target.value }))}
                                            className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                                        >
                                            <option value="masseSalariale">Masse salariale</option>
                                            <option value="effectif">Effectif</option>
                                        </select>
                                    </div>
                                    <div className="flex items-center justify-between">
                                        <input
                                            type="text"
                                            value={editingTax.description}
                                            onChange={(e) => setEditingTax(prev => ({ ...prev, description: e.target.value }))}
                                            className="flex-1 mr-4 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                                            placeholder="Description"
                                        />
                                        <div className="flex space-x-2">
                                            <button
                                                onClick={saveEditingTax}
                                                className="flex items-center px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                                            >
                                                <Save className="h-4 w-4 mr-1" />
                                                Sauvegarder
                                            </button>
                                            <button
                                                onClick={cancelEditingTax}
                                                className="flex items-center px-3 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                                            >
                                                <X className="h-4 w-4 mr-1" />
                                                Annuler
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            ) : (
                                <div className="flex items-center justify-between">
                                    <div className="flex-1">
                                        <div className="flex items-center space-x-3">
                                            <h3 className="font-bold text-lg">{tax.name}</h3>
                                            <span className="px-2 py-1 bg-white rounded-full text-xs font-semibold">
                                                {tax.type === 'percentage' ? `${tax.rate}%` : `${tax.rate} FCFA`}
                                            </span>
                                            <span className="px-2 py-1 bg-white rounded-full text-xs">
                                                {tax.base === 'masseSalariale' ? 'Sur masse salariale' : 'Par employé'}
                                            </span>
                                        </div>
                                        <p className="text-sm mt-1 opacity-80">{tax.description}</p>
                                        <div className="flex items-center space-x-4 mt-3">
                                            <span className="text-sm font-medium">
                                                Base: {tax.base === 'masseSalariale' ? formatCurrency(chargesData.masseSalariale) : `${chargesData.effectif} employés`}
                                            </span>
                                            <span className="text-lg font-bold">
                                                Montant: {formatCurrency(calculations[tax.id] || 0)}
                                            </span>
                                        </div>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                        <button
                                            onClick={() => startEditingTax(tax)}
                                            className="p-2 bg-white rounded-lg hover:bg-gray-50 transition-colors"
                                        >
                                            <Edit3 className="h-4 w-4" />
                                        </button>
                                        {!tax.mandatory && (
                                            <button
                                                onClick={() => deleteTax(tax.id)}
                                                className="p-2 bg-white text-red-600 rounded-lg hover:bg-red-50 transition-colors"
                                            >
                                                <Trash2 className="h-4 w-4" />
                                            </button>
                                        )}
                                    </div>
                                </div>
                            )}
                        </div>
                    ))}
                </div>
            </div>

            {/* Échéances avec design moderne */}
            <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-8">
                <div className="flex items-center justify-between mb-6">
                    <div className="flex items-center space-x-3">
                        <Calendar className="h-6 w-6 text-purple-600" />
                        <h2 className="text-2xl font-bold text-gray-800">Échéances de Déclaration</h2>
                    </div>
                    <div className="flex items-center space-x-2 text-sm text-orange-600">
                        <Bell className="h-4 w-4" />
                        {deadlines.filter(d => getDaysUntilDeadline(d.deadline) <= 15).length} échéance(s) proche(s)
                    </div>
                </div>

                <div className="space-y-6">
                    {deadlines.map((deadline) => {
                        const daysLeft = getDaysUntilDeadline(deadline.deadline);
                        const priorityClass = getPriorityColor(deadline.deadline);

                        return (
                            <div key={deadline.id} className="border-2 border-gray-200 rounded-xl p-6 hover:shadow-lg transition-all duration-200">
                                <div className="flex items-center justify-between">
                                    <div className="flex-1">
                                        <div className="flex items-center space-x-3 mb-2">
                                            <h3 className="font-bold text-xl text-gray-800">{deadline.type}</h3>
                                            <span className={`px-3 py-1 rounded-full text-sm font-semibold border ${priorityClass}`}>
                                                {daysLeft > 0 ? `${daysLeft} jours restants` : 'Échéance dépassée'}
                                            </span>
                                        </div>
                                        <p className="text-gray-600 mb-3">{deadline.description}</p>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div className="flex items-center">
                                                <Clock className="h-4 w-4 text-gray-400 mr-2" />
                                                <span className="text-sm text-gray-600">
                                                    Échéance : {formatDate(deadline.deadline)}
                                                </span>
                                            </div>
                                            <div className="flex items-center">
                                                <span className="text-lg font-bold text-gray-800">
                                                    {formatCurrency(deadline.amount)}
                                                </span>
                                            </div>
                                        </div>
                                    </div>

                                    <div className="flex items-center space-x-3">
                                        {deadline.status === 'pending' && (
                                            <>
                                                <button className="flex items-center px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-200 transform hover:scale-105">
                                                    <FileText className="h-4 w-4 mr-2" />
                                                    Générer
                                                </button>
                                                <button className="flex items-center px-4 py-2 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-xl hover:from-green-700 hover:to-green-800 transition-all duration-200 transform hover:scale-105">
                                                    <Send className="h-4 w-4 mr-2" />
                                                    Déclarer
                                                </button>
                                            </>
                                        )}
                                    </div>
                                </div>
                            </div>
                        );
                    })}
                </div>
            </div>

            {/* Modal pour ajouter une nouvelle taxe */}
            {showAddTaxModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
                        <h3 className="text-xl font-bold mb-6">Ajouter une nouvelle taxe</h3>

                        <div className="space-y-4">
                            <input
                                type="text"
                                value={newTax.name}
                                onChange={(e) => setNewTax(prev => ({ ...prev, name: e.target.value }))}
                                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500"
                                placeholder="Nom de la taxe"
                            />

                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <select
                                        value={newTax.type}
                                        onChange={(e) => setNewTax(prev => ({ ...prev, type: e.target.value }))}
                                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500"
                                    >
                                        <option value="percentage">Pourcentage</option>
                                        <option value="fixed">Montant fixe</option>
                                    </select>
                                </div>
                                <input
                                    type="number"
                                    step="0.1"
                                    value={newTax.rate}
                                    onChange={(e) => setNewTax(prev => ({ ...prev, rate: parseFloat(e.target.value) || 0 }))}
                                    className="px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500"
                                    placeholder="Taux"
                                />
                            </div>

                            <select
                                value={newTax.base}
                                onChange={(e) => setNewTax(prev => ({ ...prev, base: e.target.value }))}
                                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500"
                            >
                                <option value="masseSalariale">Masse salariale</option>
                                <option value="effectif">Effectif</option>
                            </select>

                            <textarea
                                value={newTax.description}
                                onChange={(e) => setNewTax(prev => ({ ...prev, description: e.target.value }))}
                                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500"
                                placeholder="Description"
                                rows="3"
                            />
                        </div>

                        <div className="flex space-x-4 mt-6">
                            <button
                                onClick={addNewTax}
                                className="flex-1 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-xl hover:from-purple-700 hover:to-blue-700 transition-all duration-200 font-semibold"
                            >
                                Ajouter
                            </button>
                            <button
                                onClick={() => setShowAddTaxModal(false)}
                                className="flex-1 py-3 bg-gray-200 text-gray-700 rounded-xl hover:bg-gray-300 transition-all duration-200 font-semibold"
                            >
                                Annuler
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
            </AccountantDashBoard>
    );
}// END OF FILE: src/Pages/AccountantNew/Payroll & Social Charge/PayrollJournal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AccountantNew/Payroll & Social Charge/SocialCharge.jsx

// END OF FILE: src/Pages/AccountantNew/Payroll & Social Charge/SocialCharge.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AddDrug.jsx

import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";

export function AddDrug()
{
    return(
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
           Drug
        </CustomDashboard>
    )
}// END OF FILE: src/Pages/AdminViews/AddDrug.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AddExam.jsx

import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";

export function AddExam()
{
    return(
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            Exam
        </CustomDashboard>
    )
}// END OF FILE: src/Pages/AdminViews/AddExam.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AddHospitalRoomModal.jsx

import{ useState } from 'react';
import {BedDouble, DollarSign, Users, CheckCircle, X} from 'lucide-react';
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";
import PropTypes from "prop-types";
import axiosInstance from "../../Utils/axiosInstance.js";




export function AddHospitalRoomModal({isOpen, onClose, setSuccessMessage, setCanOpenSuccessModal}) {

    AddHospitalRoomModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        setSuccessMessage: PropTypes.func.isRequired,
        setCanOpenSuccessModal: PropTypes.func.isRequired,
    }


    const [roomData, setRoomData] = useState({
        roomNumber: '',
        type: 'Simple',
        beds: 1,
        price: '',
        facilities: [],
    });
    const [error, setError] = useState("");
    const facilityOptions = ['Television', 'Air conditioning', 'Private bathroom', 'Mini fridge'];


    function handleChange (e)  {
        const { name, value } = e.target;
        setRoomData(prev => (
            {
                ...prev,
                [name]: value
            }
        ));
    }


    function handleFacilityChange (facility) {
        setRoomData(prev => (
            {
            ...prev,
            facilities: prev.facilities.includes(facility) ? prev.facilities.filter(f => f !== facility) : [...prev.facilities, facility]
            }
        ));
    }


    async function handleSubmit (e) {
        e.preventDefault();
        try
        {
            const response = await axiosInstance.post("/room/", roomData);
            if (response.status === 201)
            {
                setSuccessMessage("room added successfully !");
                setError("");
                setCanOpenSuccessModal(true);
                onClose();
            }

        }
        catch (error)
        {
            setError("something went wrong, try later please !");
            setCanOpenSuccessModal(false);
            setSuccessMessage("");
            console.log(error);
        }
    }


    if (!isOpen) return;
    return (
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
                <div className="bg-white rounded-xl shadow-xl w-[800px] ">
                    <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                        <div className="bg-gradient-to-r from-primary-end to-primary-start px-6 py-4 flex justify-between items-center">
                            <h1 className="text-3xl font-bold text-white">Add A New Room</h1>
                            <button className="text-white hover:text-gray-200 transition-colors"
                                    onClick={()=>{onClose()}}>
                                <X size={30} />
                            </button>
                        </div>

                        {error && <p className="text-md text-red-500 m-2">{error}</p>}
                        <form onSubmit={handleSubmit} className="p-6">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="number">Room Number</label>
                                    <input
                                        type="text"
                                        id="number"
                                        name="roomNumber"
                                        value={roomData.roomNumber}
                                        onChange={handleChange}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none  focus:border-primary-end"
                                        required
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="type">Room Type</label>
                                    <select
                                        id="type"
                                        name="type"
                                        value={roomData.type}
                                        onChange={handleChange}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-primary-end"
                                    >
                                        <option value="Simple">Simple</option>
                                        <option value="Double">Double</option>
                                        <option value="VIP">VIP</option>
                                        <option value="Multiple">Multiple</option>
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="beds">Number Of Beds</label>
                                    <input
                                        type="number"
                                        id="beds"
                                        name="beds"
                                        value={roomData.beds}
                                        onChange={handleChange}
                                        min="1"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md  focus:border-2  focus:border-primary-end"
                                        required
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="price">Price per night</label>
                                    <input
                                        type="number"
                                        id="price"
                                        name="price"
                                        value={roomData.price}
                                        onChange={handleChange}
                                        min="0"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-[#4DB6AC] focus:border-[#4DB6AC]"
                                        required
                                    />
                                </div>
                            </div>

                            <div className="mt-6">
                                <label className="block text-sm font-medium text-gray-700 mb-2">Equipments</label>
                                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                                    {facilityOptions.map((facility) => (
                                        <label key={facility} className="inline-flex items-center">
                                            <input
                                                type="checkbox"
                                                className="form-checkbox h-5 w-5 text-primary-end"
                                                checked={roomData.facilities.includes(facility)}
                                                onChange={() => handleFacilityChange(facility)}
                                            />
                                            <span className="ml-2 text-gray-700">{facility}</span>
                                        </label>
                                    ))}
                                </div>
                            </div>

                            <div className="mt-8 bg-gray-50 p-4 rounded-lg">
                                <h3 className="text-lg font-medium text-gray-900 mb-4">Room overview</h3>
                                <div className="flex items-center space-x-4">
                                    <div className="flex items-center">
                                        <BedDouble className="h-6 w-6 text-gray-400 mr-2"/>
                                        <span className="text-gray-600">{roomData.beds} lit(s)</span>
                                    </div>
                                    <div className="flex items-center">
                                        <DollarSign className="h-6 w-6 text-gray-400 mr-2"/>
                                        <span className="text-gray-600">{roomData.price || 0} FCFA/nights</span>
                                    </div>
                                    <div className="flex items-center">
                                        <Users className="h-6 w-6 text-gray-400 mr-2"/>
                                        <span className="text-gray-600">Capacity: {roomData.beds * 2} persons</span>
                                    </div>
                                </div>
                                <div className="mt-4 flex flex-wrap gap-2">
                                    {roomData.facilities.map((facility) => (
                                        <span key={facility} className="bg-[#4DB6AC] text-white px-3 py-1 rounded-full text-sm">{facility}</span>
                                    ))}
                                </div>
                            </div>

                            <div className="mt-8 flex justify-end">
                                <button
                                    type="submit"
                                    className="bg-primary-end  text-white font-bold py-2 px-4 rounded-md transition-colors duration-300 flex items-center"
                                >
                                    <CheckCircle className="mr-2" size={20}/>
                                    Add The room
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </CustomDashboard>

    );
}

// END OF FILE: src/Pages/AdminViews/AddHospitalRoomModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AddMedicalStaff.jsx

import {useEffect, useState} from 'react';
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";
import joinOurStaffImage from "../../assets/regoignezNotreStaffMedical.png";
import axiosInstance from "../../Utils/axiosInstance.js";
import {SuccessModal} from "../Modals/SuccessModal.jsx";
import {ErrorModal} from "../Modals/ErrorModal.jsx";
import Wait from "../Modals/wait.jsx";
import { Eye, EyeOff } from 'lucide-react';

export function AddMedicalStaff() {
    const [password, setPassword] = useState("");
    const [showPassword, setShowPassword] = useState(false);

    const [medicalStaffData, setMedicalStaffData] = useState({
        first_name: '',
        last_name: '',
        role: 'NoRole',
        username: '',
        cniNumber: '',
        email: '',
        gender: 'Male',
        password:'',
        is_staff:false,
        is_active: true,
        is_superuser: false,
        birthDate:'',
        address: '',
        phoneNumber: '',
        userType:'',
    });

    function handleChange (e) {
        const { name, value } = e.target;
        setMedicalStaffData(prevData => ({
            ...prevData,
            [name]: value
        }));
        setPassword(medicalStaffData.password);
    }

    useEffect(() => {
        if (medicalStaffData.role)
        {
            medicalStaffData.isStaff = medicalStaffData.role === 'Admin';
        }
        if(medicalStaffData.role === "Accountant")
        {
           medicalStaffData.userType = "Accountant";
        }
        else
        {
            medicalStaffData.userType = "Medical";
        }
    }, [medicalStaffData]);



    useEffect(() => {
        console.log(medicalStaffData);
    }, [medicalStaffData]);


    const [successMessage, setSuccessMessage] = useState("");
    const [errorMessage, setErrorMessage] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [canOpenSuccessModal, setCanOpenSuccessModal] = useState(false);
    const [canOpenErrorModal, setCanOpenErrorModal] = useState(false);


    async function handleSubmit (e) {
        e.preventDefault();
        setIsLoading(true);
        try
        {
            const response = await axiosInstance.post("/medical-staff/", medicalStaffData);
            if (response.status === 201)
            {
                setIsLoading(false);
                setErrorMessage("");
                setSuccessMessage(`The ${medicalStaffData.role === "Labtech" ? "Laboratory Assistant" : medicalStaffData.role + "" + " " + medicalStaffData.username + " "} created successfully`);
                setCanOpenSuccessModal(true);
                setCanOpenErrorModal(false);
            }
        }
        catch (error)
        {
            setIsLoading(false);
            console.log(error);
            setSuccessMessage("");
            setErrorMessage(`Error when registering the ${medicalStaffData.role + " " + medicalStaffData.username} please retry !`);
            setCanOpenSuccessModal(false);
            setCanOpenErrorModal(true);
        }
    }



    function applyInputStyle()
    {
        return "w-full px-4 py-2 border-2 border-gray-200 rounded-md focus:outline-none  focus:border-2  focus:border-primary-end";
    }



    function applyLabelStyle()
    {
        return "block text-md font-semibold text-gray-600 mb-1";
    }

    return (
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            <div className="flex m-5">
                <div className="w-1/2 mr-6 flex flex-col items-center justify-center">
                    <h1 className="text-4xl font-bold text-secondary mb-8">Add a new medical staff member</h1>
                        <p className="text-justify italic text-red-500 font-semibold text-md mb-5">Please complete all
                            fields below to add a new medical staff member to Fultang Clinic. Make sure the information
                            entered is accurate as it will be used to create the staff member's official profile.</p>

                    <img src={joinOurStaffImage} alt={"image"} className={"w-[600px] h-[400px] rounded-2xl"}/>
                </div>
                <div className="w-1/2 p-8 flex items-center justify-center">
                    <form onSubmit={handleSubmit} className="space-y-6">


                        <div className="grid grid-cols-2 gap-6">
                            <div>
                                <label className={applyLabelStyle()}>
                                    Firstname
                                </label>
                                <input
                                    type="text"
                                    name="first_name"
                                    value={medicalStaffData.first_name}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    placeholder="Enter the user's firstname"
                                    required
                                />
                            </div>
                            <div>
                                <label className={applyLabelStyle()}>
                                    Lastname
                                </label>
                                <input
                                    type="text"
                                    name="last_name"
                                    value={medicalStaffData.last_name}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    placeholder="Enter the user's lastname"
                                    required
                                />
                            </div>
                        </div>


                        <div className="grid grid-cols-2 gap-2">
                            <div>
                                <label className={applyLabelStyle()}>
                                    Username
                                </label>
                                <input
                                    type="text"
                                    name="username"
                                    value={medicalStaffData.username}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    placeholder="Enter the user's username"
                                    required
                                />
                            </div>
                            <div >
                                <label className={applyLabelStyle()}>
                                    Password
                                </label>
                                <div className="h-12 mt-2 rounded-lg flex items-center relative">
                                <input
                                    type={showPassword ? "text" : "password"}
                                    name="password"
                                    value={medicalStaffData.password}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    placeholder="Enter the user's password"
                                    required
                                />
                                <button
                                    type="button"
                                    onClick={() => setShowPassword(!showPassword)}
                                    className="absolute right-2 p-2 hover:bg-gray-400 rounded-full transition-all duration-300"
                                >
                                    {showPassword ? (
                                        <EyeOff className="w-5 h-5 text-gray-600"/>
                                    ) : (
                                        <Eye className="w-5 h-5 text-gray-600"/>
                                    )}
                                </button>
                                </div>
                            </div>
                        </div>


                        <div className="grid grid-cols-3 gap-2">
                            <div>
                                <label className={applyLabelStyle()}>
                                    Birth Date
                                </label>
                                <input
                                    type="date"
                                    name="birthDate"
                                    value={medicalStaffData.birthDate}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    required
                                />
                            </div>
                            <div>
                                <label className={applyLabelStyle()}>
                                    Gender
                                </label>
                                <select
                                    name="gender"
                                    value={medicalStaffData.gender}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    required
                                >
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                </select>
                            </div>
                            <div>
                                <label className={applyLabelStyle()}>
                                    Address
                                </label>
                                <input
                                    type="text"
                                    name="address"
                                    value={medicalStaffData.address}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    placeholder={"enter the user's address"}
                                    required
                                />
                            </div>
                        </div>


                        <div className="grid grid-cols-2 gap-2">
                            <div>
                                <label className={applyLabelStyle()}>
                                    ID Card Number
                                </label>
                                <input
                                    type="tel"
                                    name="cniNumber"
                                    value={medicalStaffData.cniNumber}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    placeholder="Enter the user's ID card number"
                                    required
                                />
                            </div>
                            <div>
                                <label className={applyLabelStyle()}>
                                    Phone Number
                                </label>
                                <input
                                    type="tel"
                                    name="phoneNumber"
                                    value={medicalStaffData.phoneNumber}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    placeholder="Enter the user's phone number"
                                    required
                                />
                            </div>
                        </div>


                        <div className="grid grid-cols-2 gap-2">
                            <div>
                                <label className={applyLabelStyle()}>
                                    Email
                                </label>
                                <input
                                    type="email"
                                    name="email"
                                    value={medicalStaffData.email}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    placeholder="Enter the user's email address"
                                    required
                                />
                            </div>
                            <div>
                                <label className={applyLabelStyle()}>
                                    Spécialisation
                                </label>
                                <select
                                    name="role"
                                    value={medicalStaffData.role}
                                    onChange={handleChange}
                                    className={applyInputStyle()}
                                    required
                                >
                                    <option value="NoRole">Select the medical staff specialisation</option>
                                    <option value="Doctor">Doctor</option>
                                    <option value="Pharmacist">Pharmacist</option>
                                    <option value="Nurse">Nurse</option>
                                    <option value="Receptionist">Receptionist</option>
                                    <option value="Labtech">Laboratory Assistant</option>
                                    <option value="Ophthalmologist">Ophthalmologist</option>
                                    <option value="Cashier">Cashier</option>
                                    <option value="Accountant">Accountant</option>
                                    <option value="Admin">Administrator</option>
                                </select>
                            </div>
                        </div>
                        <div className="flex gap-4 justify-center">
                            <button
                                type="submit"
                                className="bg-secondary text-white py-2 px-12 font-bold rounded-lg hover:bg-[#3d9d94] transition-colors duration-300"
                            >
                                Save
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            <SuccessModal isOpen={canOpenSuccessModal} canOpenSuccessModal={setCanOpenSuccessModal} message={successMessage}/>
            <ErrorModal isOpen={canOpenErrorModal} onCloseErrorModal={setCanOpenErrorModal} message={errorMessage}/>
            {isLoading && <Wait/>}
        </CustomDashboard>
    );
}

// END OF FILE: src/Pages/AdminViews/AddMedicalStaff.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AdminAppointmentsList.jsx

import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";

export function AdminAppointmentsList()
{
    return(
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            Appointments List
        </CustomDashboard>
    )
}// END OF FILE: src/Pages/AdminViews/AdminAppointmentsList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AdminConsultationList.jsx

import {useEffect, useState} from 'react';
import { Search, Calendar, Filter, ChevronDown, ChevronUp,  Clock,  Stethoscope} from 'lucide-react';
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";
import {Tooltip} from "antd";
import {FaArrowLeft, FaArrowRight, FaUser} from "react-icons/fa";
import {AppRoutesPaths} from "../../Router/appRouterPaths.js";
import {useNavigate} from "react-router-dom";
import axiosInstance from "../../Utils/axiosInstance.js";


const consultations = [
    { id: 1, patientName: "Jean Dupont", doctorName: "Dr. Marie Claire", date: "2024-01-28", time: "09:00", status: "Finished" },
    { id: 2, patientName: "Sophie Martin", doctorName: "Dr. Pierre Dubois", date: "2024-01-28", time: "10:30", status: "In progress" },
    { id: 3, patientName: "Lucas Bernard", doctorName: "Dr. Amélie Rousseau", date: "2024-01-28", time: "14:00", status: "Upcoming" },
    { id: 4, patientName: "Emma Petit", doctorName: "Dr. Thomas Leroy", date: "2024-01-27", time: "11:15", status: "Finished" },
    { id: 5, patientName: "Léa Durand", doctorName: "Dr. Marie Claire", date: "2024-01-27", time: "16:45", status: "Finished" },
    { id: 6, patientName: "Thierry Ngoupaye", doctorName: "Dr. Daniel Tchassi", date: "2024-05-30", time: "16:45", status: "Finished" },
];

export function AdminConsultationList() {
    const [searchTerm, setSearchTerm] = useState('');
    const [filterStatus, setFilterStatus] = useState('all');
    const [sortBy, setSortBy] = useState('date');
    const [sortOrder, setSortOrder] = useState('desc');
    const [showFilters, setShowFilters] = useState(false);

    const filteredConsultations = consultations
        .filter(consultation =>
            (filterStatus === 'all' || consultation.status === filterStatus) &&
            (consultation.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                consultation.doctorName.toLowerCase().includes(searchTerm.toLowerCase()))
        )
        .sort((a, b) => {
            if (sortBy === 'date') {
                return sortOrder === 'asc'
                    ? new Date(a.date) - new Date(b.date)
                    : new Date(b.date) - new Date(a.date);
            }
            return 0;
        });

    function toggleSort  (criteria) {
        if (sortBy === criteria) {
            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
        } else {
            setSortBy(criteria);
            setSortOrder('asc');
        }
    }

    const [isLoading, setIsLoading] = useState(false);
    const [consultationList, setConsultationList] = useState([]);


    useEffect(() => {
        async function fetchConsultations()
        {
            setIsLoading(true);
            try
            {
                const response = await axiosInstance.get("/consultation/");
                setIsLoading(false);
                if (response.status === 200)
                {
                    console.log(response.data);
                    setConsultationList(response.data.results);
                }
            }
            catch (error)
            {
                setIsLoading(false);
                console.log(error);
            }
        }
        fetchConsultations();
    }, []);


    const navigate = useNavigate();

    return (

        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            <div className="flex flex-col min-h-screen p-6">
                        <div className="bg-gradient-to-r from-primary-end to-primary-start rounded-lg p-6 text-white mb-5">
                            <h1 className="text-3xl font-bold mb-2">Consultation List</h1>
                            <p className="opacity-90 font-semibold text-md">
                                Find the clinic’s complete consultation history here. You can follow the activity of each doctor, check the details of past consultations and access the information of the patients concerned.
                            </p>
                        </div>

                        <div className="bg-gray-100 p-4 rounded-lg shadow-md mb-6">
                            <div className="flex flex-row gap-4">
                                <div className="relative flex-grow">
                                    <input
                                        type="text"
                                        placeholder="Search by a patient or a medical staff"
                                        className="w-full bg-gray-100 pl-10 pr-4 py-2 border-2 outline-none border-secondary transition-all duration-300 rounded-md focus:outline-none focus:border-2 focus:border-primary-end"
                                        value={searchTerm}
                                        onChange={(e) => setSearchTerm(e.target.value)}
                                    />
                                    <Search className="absolute left-3 top-2.5 text-secondary" size={20}/>
                                </div>
                                <button
                                    onClick={() => setShowFilters(!showFilters)}
                                    className="flex items-center px-4 py-2 bg-secondary text-white rounded-md hover:bg-primary-end transition-all duration-300"
                                >
                                    <Filter size={20} className="mr-2"/>
                                    Filters
                                    {showFilters ? <ChevronUp size={20} className="ml-2"/> :
                                        <ChevronDown size={20} className="ml-2"/>}
                                </button>
                            </div>


                            {showFilters && (
                                <div className="mt-4 pt-4 border-t border-gray-200">
                                    <div className="flex flex-wrap gap-4">
                                        <div>
                                            <label
                                                className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                                            <select
                                                value={filterStatus}
                                                onChange={(e) => setFilterStatus(e.target.value)}
                                                className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none  focus:border-primary-end focus:border-2 sm:text-sm rounded-md"
                                            >
                                                <option value="all">All</option>
                                                <option value="Finished">Finished</option>
                                                <option value="In progress">In progress</option>
                                                <option value="Upcoming">Upcoming</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">Sort By</label>
                                            <select
                                                value={sortBy}
                                                onChange={(e) => toggleSort(e.target.value)}
                                                className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-[#4DB6AC] focus:border-[#4DB6AC] sm:text-sm rounded-md"
                                            >
                                                <option value="date">Date</option>
                                                <option value="patientName">Patient Name</option>
                                                <option value="doctorName">Medical Staff Name</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>


                        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                            {filteredConsultations.map((consultation) => (
                                <div key={consultation.id}
                                     className="bg-gray-100 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                                    <div className="p-4">
                                        <div className="flex justify-between items-start mb-2">
                                            <div>
                                                <div className="flex gap-4 mt-2">
                                                    <FaUser className="text-primary-end w-6 h-6"/>
                                                    <h3 className="text-lg font-semibold text-gray-800">{consultation.patientName}</h3>
                                                </div>
                                                <div className="flex mt-2 gap-4">
                                                    <Stethoscope className="text-primary-end w-6 h-6"/>
                                                    <p className="text-md text-gray-600">{consultation.doctorName}</p>
                                                </div>
                                            </div>
                                            <span className={`px-2 py-1 text-xs font-semibold rounded-full ${consultation.status === 'Finished' ? 'bg-green-100 text-green-800' : consultation.status === 'In progress' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'}`}>{consultation.status}</span>
                                        </div>
                                        <div className="flex items-center text-sm text-gray-500 mt-3 ml-10">
                                            <Calendar className="w-4 h-4 mr-1"/>
                                            <span>{new Date(consultation.date).toLocaleDateString('fr-FR', {year: 'numeric', month: 'long', day: 'numeric'})}</span>
                                        </div>
                                        <div className="flex items-center text-sm text-gray-500 mt-2 ml-10">
                                            <Clock className="w-4 h-4 mr-1"/>
                                            <span>{consultation.time}</span>
                                        </div>
                                    </div>
                                    <div className="px-4 py-3 text-right">
                                        <button className="text-white px-3.5 py-1.5 rounded-2xl bg-gradient-to-r from-primary-end to-primary-start font-bold text-sm hover:text-md transition-all duration-300"
                                                onClick={()=> {navigate(AppRoutesPaths.adminConsultationDetailsPage)}}>
                                            View Details
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>

                        {/*Pagination content */}
                        <div className="w-full justify-center flex mt-4 mb-2">
                            <div className="flex gap-4">
                                <Tooltip placement={"left"} title={"previous slide"}>
                                    <button onClick={async () => {
                                    }}
                                            className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                        <FaArrowLeft/>
                                    </button>
                                </Tooltip>
                                <p className="text-secondary text-2xl font-bold mt-4">{`1/5`}</p>
                                <Tooltip placement={"right"} title={"next slide"}>
                                    <button onClick={async () => {
                                    }}
                                            className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                        <FaArrowRight/>
                                    </button>
                                </Tooltip>
                            </div>
                        </div>
                    </div>
        </CustomDashboard>
    );
}

// END OF FILE: src/Pages/AdminViews/AdminConsultationList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AdminDrugsList.jsx

import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";
import {FaArrowLeft, FaArrowRight, FaEdit, FaEye, FaPlus, FaSearch, FaTrash,} from "react-icons/fa";
import {Tooltip} from "antd";
import {useEffect, useState} from "react";
import {SuccessModal} from "../Modals/SuccessModal.jsx";
import Wait from "../Modals/wait.jsx";
import {ErrorModal} from "../Modals/ErrorModal.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import {ConfirmationModal} from "../Modals/ConfirmAction.Modal.jsx";
import {AppRoutesPaths as appRouterPaths} from "../../Router/appRouterPaths.js";
import {useNavigate} from "react-router-dom";
import {EditDrugInfosModal} from "./EditDrugInfosModal.jsx";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";


export function AdminDrugsList(){


    const [waitFetchingData, setWaitFetchingData] = useState(false);
    const [errorStatus, setErrorStatus] = useState(null);
    const [serverErrorMessage, setServerErrorMessage] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [selectedDrugDetails, setSelectedDrugDetails] = useState({});
    const [canOpenSuccessModal, setCanOPenSuccessModal] = useState(false);
    const [canOpenErrorMessageModal, setCanOpenErrorMessageModal] = useState(false);
    const [canOpenViewDrugDetailModal, setCanOpenViewDrugDetailModal] = useState(false);
    const [canOpenConfirmActionModal, setCanOpenConfirmActionModal] = useState(false);
    const [drugToDelete, setDrugToDelete] = useState({});
    const [canOpenEditDrugDetailModal, setCanOpenEditDrugDetailModal] = useState(false);
    const [drugList, setDrugList] = useState([]);
    const [numberOfDrug, setNumberOfDrug] = useState(0);
    const [nexUrlForRenderDrugList, setNexUrlForRenderDrugList] = useState("");
    const [previousUrlForRenderDrugList, setPreviousUrlForRenderDrugList] = useState("");
    const [actualPageNumber, setActualPageNumber] = useState(1);
    const [successMessage, setSuccessMessage] = useState("");
    const navigate = useNavigate();
    const [errorMessage, setErrorMessage] = useState("");





    function calculateNumberOfSlide() {
        return numberOfDrug % 5 === 0 ? numberOfDrug / 5 : Math.floor(numberOfDrug / 5) + 1;
    }


    function updateActualPageNumber(action) {
        if (action === "next")
        {
            if(actualPageNumber < calculateNumberOfSlide())
            {
                setActualPageNumber(actualPageNumber + 1);
            }
        }
        else
        {
            if(actualPageNumber > 1)
            {
                setActualPageNumber(actualPageNumber - 1);
            }
        }
    }



    async function fetchDrugData(url = "/medicament/") {
        if (!url) return;

        setWaitFetchingData(true);

        try {
            const response = await axiosInstance.get(url);
            setWaitFetchingData(false);

            if (response.status === 200) {
                setDrugList(response.data);
                setNumberOfDrug(response.data.count);
                setNexUrlForRenderDrugList(response.data.next);
                setPreviousUrlForRenderDrugList(response.data.previous);
                setServerErrorMessage("");
                setErrorStatus(null);
            }
        } catch (error) {
            setWaitFetchingData(false);
            setDrugList([]);
            setNumberOfDrug(0);
            setNexUrlForRenderDrugList("");
            setPreviousUrlForRenderDrugList("");
            setServerErrorMessage("Something went wrong when retrieving medical staff list !!")
            setErrorStatus(error.status);
            console.log(error);
        }
    }


    async function fetchDrugList() {
        await fetchDrugData();
    }


    async function fetchNextOrPreviousDrugList(url) {
        await fetchDrugData(url);
    }

    useEffect(() => {
        fetchDrugList();
    }, []);



    async function deleteDrug(drugId){
        setIsLoading(true);
        try {
            const response = await axiosInstance.delete(`/medicament/${drugId}/`);
            if (response.status === 204) {
                setIsLoading(false);
                setSuccessMessage("Drug deleted successfully !");
                setErrorMessage("");
                setCanOpenErrorMessageModal(false);
                setCanOPenSuccessModal(true);
            }
        }
        catch (error) {
            setIsLoading(false);
            setSuccessMessage("");
            setErrorMessage(error.response.data.detail)
            setCanOPenSuccessModal(false);
            setCanOpenErrorMessageModal(true);
            console.log(error);
        }
    }

    function formatDateForInput(isoDate){
        try {
            const date = new Date(isoDate);
            return date.toISOString().slice(0, 16);
        } catch (error) {
            console.error( error);
            return '';
        }
    }

    return(
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
        <div className="mt-5 flex flex-col relative">
            {/*Header content with search bar*/}
            <div className="flex justify-between mb-5">
                    <p className="font-bold text-xl mt-2 ml-5"> List Of Drug </p>
                    <div className="flex mr-5">
                        <div className="flex w-[300px] h-10 border-2 border-secondary rounded-lg">
                            <FaSearch className="text-xl text-secondary m-2"/>
                            <input
                                type="text"
                                placeholder={"search for a specific patient"}
                                className="border-none focus:outline-none focus:ring-0"
                            />
                        </div>
                        <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
                            Search
                        </button>
                    </div>
            </div>

            
        {/*List of registered drug*/}

        {waitFetchingData ? (
                <div className="h-[500px] w-full flex justify-center items-center">
                    <Loader size={"medium"} color={"primary-end"}/>
                </div>
            ) :
            errorStatus ? (
                    <div className="mt-16">
                        <ServerErrorPage errorStatus={errorStatus} message={serverErrorMessage}/>
                    </div>
                ) :
                drugList.length >0 ? (
                    <div className="ml-5 mr-5 ">
                        <table className="w-full border-separate border-spacing-y-2">
                            <thead>
                            <tr className="bg-gradient-to-l from-primary-start to-primary-end">
                                <th className="text-center text-white p-4 text-xl font-bold  rounded-l-lg ">No</th>
                                <th className="text-center text-white p-4 text-xl font-bold">Quantity</th>
                                <th className="text-center text-white p-4 text-xl font-bold">Name</th>
                                <th className="text-center text-white p-4 text-xl font-bold">Status</th>
                                <th className="text-center text-white p-4 text-xl font-bold">Price</th>
                                <th className="text-center text-white p-4 text-xl font-bold">ExpiryDate</th>
                                <th className="text-center text-white p-4 text-xl font-bold">Description</th>
                                <th className="text-center text-white p-4 text-xl font-bold  rounded-r-lg">
                                    <p>Operations</p>
                                </th>
                            </tr>
                            </thead>
                            <tbody>
                            {drugList.map((drug, index) => (
                                <tr key={drug.id || index} className="bg-gray-100">
                                    <td className="p-4 text-md text-blue-900 rounded-l-lg text-center">{index + 1}</td>
                                    <td className="p-4 text-md text-center font-bold">{drug.quantity}</td>
                                    <td className="p-4 text-md text-center">{drug.name}</td>
                                    <td className="p-4 text-md text-center">{drug.status}</td>
                                    <td className="p-4 text-center text-md">{drug.price}</td>
                                    <td className="p-4 text-center text-md">{formatDateForInput(drug.expiryDate)}</td>
                                    <td className="p-4 text-center text-md">{drug.description}</td>
                                    <td className="p-4 relative rounded-r-lg">
                                        <div className="w-full items-center justify-center flex gap-6">
                                            <Tooltip placement={"top"} title={"Edit Patient Informations"}>
                                                <button
                                                    onClick={() => {
                                                        setSelectedDrugDetails(drug), setCanOpenEditDrugDetailModal(true)
                                                    }}
                                                    className="flex items-center justify-center w-9 h-9 text-green-500 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                    <FaEdit/>
                                                </button>
                                            </Tooltip>
                                            <Tooltip placement={"top"} title={"delete patient"}>
                                                <button
                                                    onClick={() => {
                                                        setDrugToDelete(drug), setCanOpenConfirmActionModal(true)
                                                    }}
                                                    className="flex items-center justify-center w-9 h-9 text-red-400 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                    <FaTrash/>
                                                </button>
                                            </Tooltip>
                                        </div>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>

                        {/*Pagination content */}
                        <div className="fixed w-full justify-center -right-16 bottom-0 flex mt-6 mb-4">
                                    <div className="flex gap-4">
                                        <Tooltip placement={"left"} title={"previous slide"}>
                                            <button
                                                onClick={async ()=> {await fetchNextOrPreviousDrugList(previousUrlForRenderDrugList), updateActualPageNumber("prev")}}
                                                className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                <FaArrowLeft/>
                                            </button>
                                        </Tooltip>
                                        <p className="text-secondary text-2xl font-bold mt-4">{actualPageNumber}/{calculateNumberOfSlide()}</p>
                                        <Tooltip placement={"right"} title={"next slide"}>
                                            <button
                                                onClick={async ()=> {await fetchNextOrPreviousDrugList(nexUrlForRenderDrugList), updateActualPageNumber("next")}}
                                                className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                <FaArrowRight/>
                                            </button>
                                        </Tooltip>
                                    </div>
                                </div>


                                {/* Add new drug button */}
                                <Tooltip placement={"top"} title={"Add New Medical Staff"}>
                                    <button
                                        onClick={()=>navigate(appRouterPaths.addDrug)}
                                        className="flex justify-center items-center fixed bottom-5 right-16 rounded-full w-14 h-14 bg-gradient-to-r text-3xl font-bold text-white from-primary-start to-primary-end hover:text-4xl transition-all duration-300">
                                        <FaPlus/>
                                    </button>
                                </Tooltip>


                                {/* Modals content */}
                                <EditDrugInfosModal isOpen={canOpenEditDrugDetailModal} onClose={()=>{setCanOpenEditDrugDetailModal(false)}} setCanOpenSuccessModal={setCanOPenSuccessModal} setSuccessMessage={setSuccessMessage} setIsLoading={setIsLoading} drugData={selectedDrugDetails}/>
                                <SuccessModal isOpen={canOpenSuccessModal} message={successMessage} canOpenSuccessModal={setCanOPenSuccessModal} makeAction={async ()=> {await fetchDrugList(), calculateNumberOfSlide()}}/>
                                <ErrorModal isOpen={canOpenErrorMessageModal} onCloseErrorModal={()=>{setCanOpenErrorMessageModal(false)}} message={errorMessage}/>
                                {isLoading && <Wait/>}
                                <ConfirmationModal isOpen={canOpenConfirmActionModal} onClose={() => setCanOpenConfirmActionModal(false)} onConfirm={async () => await deleteDrug(drugToDelete.id)} title={"Delete Medical Staff"} message={`Are you sure you want to delete the ${drugToDelete.role + " "} ${drugToDelete.first_name + " " + drugToDelete.last_name} ?`}/>
                            </div>
                        ) : (
                            <div className="flex flex-col items-center justify-center h-[600px]  bg-gradient-to-b from-white to-teal-50   p-8">
                                <div className="mb-6 relative">
                                    <svg
                                        className="w-24 h-24 text-primary-end"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg"
                                    >
                                        <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth={2}
                                            d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                                        />
                                    </svg>
                                    <span className="absolute top-0 left-0 w-full h-full bg-teal-200 rounded-full animate-ping opacity-75"></span>
                                </div>
                                <h2 className="text-2xl font-bold text-teal-700 mb-4">No registered medical personnel</h2>
                                <p className="text-gray-600 text-center mb-8 max-w-xl">
                                    Your medical team is the heart of your clinic. Start building your team by adding your first member of the medical staff.
                                </p>
                                <button
                                    onClick={()=>navigate(appRouterPaths.addDrug)}
                                    className="bg-primary-end hover:bg-primary-start text-white font-bold py-2 px-4 rounded-full transition-all duration-300 flex items-center"
                                >
                                    <svg
                                        className="w-5 h-5 mr-2"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg"
                                    >
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                    </svg>
                                    Add a drug
                                </button>
                            </div>
                        )
                }
            </div>
        </CustomDashboard>
    )
}// END OF FILE: src/Pages/AdminViews/AdminDrugsList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AdminExamsList.jsx

import {FaArrowLeft, FaArrowRight, FaEdit, FaEye, FaPlus, FaSearch, FaTrash,} from "react-icons/fa";
import {Tooltip} from "antd";
import {useEffect, useState} from "react";
import {SuccessModal} from "../Modals/SuccessModal.jsx";
import Wait from "../Modals/wait.jsx";
import {ErrorModal} from "../Modals/ErrorModal.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {AdminNavBar} from "./AdminNavBar.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {ConfirmationModal} from "../Modals/ConfirmAction.Modal.jsx";
import {AppRoutesPaths as appRouterPaths} from "../../Router/appRouterPaths.js";
import {useNavigate} from "react-router-dom";
import {EditExamInfosModal} from "./EditExamInfosModal.jsx";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";


export function AdminExamsList()
{

    const [waitFetchingData, setWaitFetchingData] = useState(false);
    const [errorStatus, setErrorStatus] = useState(null);
    const [serverErrorMessage, setServerErrorMessage] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [selectedExamDetails, setSelectedExamDetails] = useState({});
    const [canOpenSuccessModal, setCanOPenSuccessModal] = useState(false);
    const [canOpenErrorMessageModal, setCanOpenErrorMessageModal] = useState(false);
    const [canOpenViewExamDetailModal, setCanOpenViewExamDetailModal] = useState(false);
    const [canOpenConfirmActionModal, setCanOpenConfirmActionModal] = useState(false);
    const [examToDelete, setExamToDelete] = useState({});
    const [canOpenEditExamDetailModal, setCanOpenEditExamDetailModal] = useState(false);
    const [examList, setExamList] = useState([]);
    const [numberOfExam, setNumberOfExam] = useState(0);
    const [nexUrlForRenderExamList, setNexUrlForRenderExamList] = useState("");
    const [previousUrlForRenderExamList, setPreviousUrlForRenderExamList] = useState("");
    const [actualPageNumber, setActualPageNumber] = useState(1);
    const [successMessage, setSuccessMessage] = useState("");
    const navigate = useNavigate();
    const [errorMessage, setErrorMessage] = useState("");


    function calculateNumberOfSlide() {
        return numberOfExam % 5 === 0 ? numberOfExam / 5 : Math.floor(numberOfExam / 5) + 1;
    }


    function updateActualPageNumber(action) {
        if (action === "next")
        {
            if(actualPageNumber < calculateNumberOfSlide())
            {
                setActualPageNumber(actualPageNumber + 1);
            }
        }
        else
        {
            if(actualPageNumber > 1)
            {
                setActualPageNumber(actualPageNumber - 1);
            }
        }
    }



    async function fetchExamData(url = "/exam/") {
        if (!url) return;

        setWaitFetchingData(true);

        try {
            const response = await axiosInstance.get(url);
            setWaitFetchingData(false);

            if (response.status === 200) {
                setExamList(response.data.results);
                setNumberOfExam(response.data.count);
                setNexUrlForRenderExamList(response.data.next);
                setPreviousUrlForRenderExamList(response.data.previous);
                setServerErrorMessage("");
                setErrorStatus(null);
            }
        } catch (error) {
            setWaitFetchingData(false);
            setExamList([]);
            setNumberOfExam(0);
            setNexUrlForRenderExamList("");
            setPreviousUrlForRenderExamList("");
            setServerErrorMessage("Something went wrong when retrieving exam list !!")
            setErrorStatus(error.status);
            console.log(error);
        }
    }


    async function fetchExamList() {
        await fetchExamData();
    }


    async function fetchNextOrPreviousPatientList(url) {
        await fetchExamData(url);
    }

    useEffect(() => {
        fetchExamList();
    }, []);



    async function deleteExam(examId){
        setIsLoading(true);
        try {
            const response = await axiosInstance.delete(`/exam/${examId}/`);
            if (response.status === 204) {
                setIsLoading(false);
                setSuccessMessage("Exam deleted successfully !");
                setErrorMessage("");
                setCanOpenErrorMessageModal(false);
                setCanOPenSuccessModal(true);
            }
        }
        catch (error) {
            setIsLoading(false);
            setSuccessMessage("");
            setErrorMessage(error.response.data.detail)
            setCanOPenSuccessModal(false);
            setCanOpenErrorMessageModal(true);
            console.log(error);
        }
    }






    return(
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            <div className="mt-5 flex flex-col relative">

                {/*Header content with search bar*/}
                <div className="flex justify-between mb-5">
                    <p className="font-bold text-xl mt-2 ml-5"> List Of Exam </p>
                    <div className="flex mr-5">
                        <div className="flex w-[300px] h-10 border-2 border-secondary rounded-lg">
                            <FaSearch className="text-xl text-secondary m-2"/>
                            <input
                                type="text"
                                placeholder={"search for a specific exam"}
                                className="border-none focus:outline-none focus:ring-0"
                            />
                        </div>
                        <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
                            Search
                        </button>
                    </div>
                </div>


                {/*List of registered exam*/}

                {waitFetchingData ? (
                        <div className="h-[500px] w-full flex justify-center items-center">
                            <Loader size={"medium"} color={"primary-end"}/>
                        </div>
                    ) :
                    errorStatus ? (
                            <div className="mt-16">
                                <ServerErrorPage errorStatus={errorStatus} message={serverErrorMessage}/>
                            </div>
                        ) :
                        examList.length >0 ? (
                            <div className="ml-5 mr-5 ">
                                <table className="w-full border-separate border-spacing-y-2">
                                    <thead>
                                    <tr className="bg-gradient-to-l from-primary-start to-primary-end">
                                        <th className="text-center text-white p-4 text-xl font-bold  rounded-l-lg ">No</th>
                                        <th className="text-center text-white p-4 text-xl font-bold">Name</th>
                                        <th className="text-center text-white p-4 text-xl font-bold">Cost</th>
                                        <th className="text-center text-white p-4 text-xl font-bold">Description</th>
                                        <th className="text-center text-white p-4 text-xl font-bold  rounded-r-lg">
                                            <p>Operations</p>
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    {examList.map((exam, index) => (
                                        <tr key={exam.id || index} className="bg-gray-100">
                                            <td className="p-4 text-md text-blue-900 rounded-l-lg text-center">{index + 1}</td>
                                            <td className="p-4 text-md text-center font-bold">{exam.examName}</td>
                                            <td className="p-4 text-md text-center">{exam.examCost}</td>
                                            <td className="p-4 text-md text-center">{exam.examDescription}</td>
                                            <td className="p-4 relative rounded-r-lg">
                                                <div className="w-full items-center justify-center flex gap-6">
                                                    <Tooltip placement={"top"} title={"Edit Patient Informations"}>
                                                        <button
                                                            onClick={() => {
                                                                setSelectedExamDetails(exam), setCanOpenEditExamDetailModal(true)
                                                            }}
                                                            className="flex items-center justify-center w-9 h-9 text-green-500 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                            <FaEdit/>
                                                        </button>
                                                    </Tooltip>
                                                    <Tooltip placement={"top"} title={"delete patient"}>
                                                        <button
                                                            onClick={() => {
                                                                setExamToDelete(exam), setCanOpenConfirmActionModal(true)
                                                            }}
                                                            className="flex items-center justify-center w-9 h-9 text-red-400 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                            <FaTrash/>
                                                        </button>
                                                    </Tooltip>
                                                </div>
                                            </td>
                                        </tr>
                                    ))}
                                    </tbody>
                                </table>


                                {/*Pagination content */}
                                <div className="fixed w-full justify-center -right-16 bottom-0 flex mt-6 mb-4">
                                    <div className="flex gap-4">
                                        <Tooltip placement={"left"} title={"previous slide"}>
                                            <button
                                                onClick={async ()=> {await fetchNextOrPreviousPatientList(previousUrlForRenderExamList), updateActualPageNumber("prev")}}
                                                className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                <FaArrowLeft/>
                                            </button>
                                        </Tooltip>
                                        <p className="text-secondary text-2xl font-bold mt-4">{actualPageNumber}/{calculateNumberOfSlide()}</p>
                                        <Tooltip placement={"right"} title={"next slide"}>
                                            <button
                                                onClick={async ()=> {await fetchNextOrPreviousPatientList(nexUrlForRenderExamList), updateActualPageNumber("next")}}
                                                className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                <FaArrowRight/>
                                            </button>
                                        </Tooltip>
                                    </div>
                                </div>


                                {/* Add new exam button */}
                                <Tooltip placement={"top"} title={"Add New Exam"}>
                                    <button
                                        onClick={()=>navigate(appRouterPaths.addExam)}
                                        className="flex justify-center items-center fixed bottom-5 right-16 rounded-full w-14 h-14 bg-gradient-to-r text-3xl font-bold text-white from-primary-start to-primary-end hover:text-4xl transition-all duration-300">
                                        <FaPlus/>
                                    </button>
                                </Tooltip>


                                {/* Modals content */}
                                <EditExamInfosModal isOpen={canOpenEditExamDetailModal} onClose={()=>{setCanOpenEditExamDetailModal(false)}} setCanOpenSuccessModal={setCanOPenSuccessModal} setSuccessMessage={setSuccessMessage} setIsLoading={setIsLoading} examData={selectedExamDetails}/>
                                <SuccessModal isOpen={canOpenSuccessModal} message={successMessage} canOpenSuccessModal={setCanOPenSuccessModal} makeAction={async ()=> {await fetchExamList(), calculateNumberOfSlide()}}/>
                                <ErrorModal isOpen={canOpenErrorMessageModal} onCloseErrorModal={()=>{setCanOpenErrorMessageModal(false)}} message={errorMessage}/>
                        
                                <ConfirmationModal isOpen={canOpenConfirmActionModal} onClose={() => setCanOpenConfirmActionModal(false)} onConfirm={async () => await deleteExam(examToDelete.id)} title={"Delete Exam"} message={`Are you sure you want to delete the ${examToDelete.role + " "} ${examToDelete.first_name + " " + examToDelete.last_name} ?`}/>
                            </div>
                        ) : (
                            <div className="flex flex-col items-center justify-center h-[600px]  bg-gradient-to-b from-white to-teal-50   p-8">
                                <div className="mb-6 relative">
                                    <svg
                                        className="w-24 h-24 text-primary-end"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg"
                                    >
                                        <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth={2}
                                            d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                                        />
                                    </svg>
                                    <span className="absolute top-0 left-0 w-full h-full bg-teal-200 rounded-full animate-ping opacity-75"></span>
                                </div>
                                <h2 className="text-2xl font-bold text-teal-700 mb-4">No registered exam</h2>
                                <p className="text-gray-600 text-center mb-8 max-w-xl">
                                    Your medical team is the heart of your clinic. Start building your team by adding your first member of the exam.
                                </p>
                                <button
                                    onClick={()=>navigate(appRouterPaths.addExam)}
                                    className="bg-primary-end hover:bg-primary-start text-white font-bold py-2 px-4 rounded-full transition-all duration-300 flex items-center"
                                >
                                    <svg
                                        className="w-5 h-5 mr-2"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg"
                                    >
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                    </svg>
                                    Add an exam
                                </button>
                            </div>
                        )
                }

            </div>
        </CustomDashboard>
    )
}// END OF FILE: src/Pages/AdminViews/AdminExamsList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AdminFinancialReports.jsx

import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";

export function AdminFinancialReports()
{
    return (
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            Financial Reports
        </CustomDashboard>
    )
}// END OF FILE: src/Pages/AdminViews/AdminFinancialReports.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AdminHomePage.jsx

import { Users, Stethoscope, Calendar, ClipboardList, Building2, FileText, ShieldCheck, UserCog, Settings, FileSpreadsheet, UserPlus, Hospital } from 'lucide-react';
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";
import {useNavigate} from "react-router-dom";
import {AppRoutesPaths as AppRouterPaths} from "../../Router/appRouterPaths.js";
import QuickActionButton from "../../GlobalComponents/QuickActionButton.jsx";
import StatCard from "../../GlobalComponents/StatCard.jsx";


export function AdminHomePage() {


    const navigate = useNavigate();

    const stats = {
        patients: 5,
        medicalStaff: 6,
        consultations: 0,
        appointments: 0,
        scheduledExams: 0,
        totalRooms: 12
    };


    const adminPrivileges = [
        {
            icon: UserCog,
            title: "Personnel Management",
            description: "Add, edit, or delete medical staff members"
        },
        {
            icon: Settings,
            title: "System Configuration",
            description: "Manage clinic settings and permissions"
        },
        {
            icon: FileSpreadsheet,
            title: "Reports & Analysis",
            description: "Access detailed reports and statistics"
        },
        {
            icon: UserPlus,
            title: "Access Management",
            description: "Manage user accounts and access levels"
        }
    ];


    return (
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            <div className="p-6 space-y-6">
                <div className="bg-gradient-to-r from-primary-end to-primary-start rounded-lg p-6 text-white">
                    <h1 className="text-3xl font-bold mb-2">Welcome to the admin dashboard</h1>
                    <p className="opacity-90 font-semibold text-xl">
                        Manage your clinic efficiently and monitor all activities from this interface
                        centralized.
                    </p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <StatCard
                        icon={Users}
                        title="Patients"
                        value={stats?.patients}
                        description="Registered patients"
                        color="bg-blue-500"
                    />
                    <StatCard
                        icon={Stethoscope}
                        title="Medical Staff"
                        value={stats?.medicalStaff}
                        description="Staff members"
                        color="bg-green-500"
                    />
                    <StatCard
                        icon={ClipboardList}
                        title="Consultations"
                        value={stats?.consultations}
                        description="Consultations this month"
                        color="bg-purple-500"
                    />
                    <StatCard
                        icon={Calendar}
                        title="Appointements"
                        value={stats.appointments}
                        description="Scheduled appointments"
                        color="bg-orange-500"
                    />
                    <StatCard
                        icon={FileText}
                        title="Exams"
                        value={stats?.scheduledExams}
                        description="Scheduled exams"
                        color="bg-red-500"
                    />
                    <StatCard
                        icon={Building2}
                        title="Rooms"
                        value={stats?.totalRooms}
                        description="Available rooms"
                        color="bg-teal-500"
                    />
                </div>

                <div className=" rounded-lg  p-6">
                    <div className="flex items-center gap-2 mb-6">
                        <ShieldCheck className="w-6 h-6 text-[#4DB6AC]"/>
                        <h2 className="text-xl font-bold text-gray-800">Administrator Privileges</h2>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {adminPrivileges.map((privilege, index) => (
                            <div
                                key={index}
                                className="flex gap-4 p-4 rounded-lg border border-gray-200 hover:border-[#4DB6AC] transition-colors"
                            >
                                <privilege.icon className="w-8 h-8 text-[#4DB6AC] shrink-0"/>
                                <div>
                                    <h3 className="font-semibold text-gray-800 mb-1">{privilege?.title}</h3>
                                    <p className="text-gray-600 text-sm">{privilege?.description}</p>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>


                <div className="rounded-lg  p-6">
                  
                    <h2 className="text-xl font-bold text-gray-800 mb-4">Quick Access</h2>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <QuickActionButton
                            icon={UserPlus}
                            label="Manage Patient"
                            onClick={() => navigate(AppRouterPaths.adminPatientListPage)}
                        />
                        <QuickActionButton
                            icon={Stethoscope}
                            label="Manage Medical Staff"
                            onClick={() => navigate(AppRouterPaths.adminMedicalStaffListPage)}
                        />
                        {/*  <QuickActionButton
                            icon={Calendar}
                            label="View Appointments List"
                            onClick={() => navigate(AppRouterPaths.adminAppointmentsListPage)}
                        />*/}
                        <QuickActionButton
                            icon={Hospital}
                            label="Manage Rooms"
                            onClick={() => navigate(AppRouterPaths.adminHospitalRoomPage)}
                        />
                        <QuickActionButton
                            icon={FileSpreadsheet}
                            label="View Consultations List"
                            onClick={() => navigate(AppRouterPaths.adminConsultationListPage)}
                        />
                        {/*  <QuickActionButton
                            icon={FileSpreadsheet}
                            label="Manage Medicine"
                            onClick={() => alert("Manage Medicine")}
                        />
                        <QuickActionButton
                            icon={FileSpreadsheet}
                            label="Financial Reports"
                            onClick={() => navigate(AppRouterPaths.adminFinancialReportsPage)}
                        />*/}
                    </div>
                </div>
            </div>
        </CustomDashboard>
    );
}





// END OF FILE: src/Pages/AdminViews/AdminHomePage.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AdminHospitalRooms.jsx

import {useEffect, useState} from 'react';
import { BedDouble, BedSingle, Search, Users, CheckCircle,Plus } from 'lucide-react';
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";
import {Tooltip} from "antd";
import {FaArrowLeft, FaArrowRight, FaEdit, FaEye, FaTrash} from "react-icons/fa";
import {AddHospitalRoomModal} from "./AddHospitalRoomModal.jsx";
import {SuccessModal} from "../Modals/SuccessModal.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import {ErrorModal} from "../Modals/ErrorModal.jsx";
import {ConfirmationModal} from "../Modals/ConfirmAction.Modal.jsx";
import Wait from "../Modals/wait.jsx";

export function AdminHospitalRooms() {
    const [filterStatus, setFilterStatus] = useState('all');
    const [searchTerm, setSearchTerm] = useState('');
    const [canOpenAddNewRoomModal, setCanOpenAddNewRoomModal] = useState(false);
    const [successMessage, setSuccessMessage] = useState("");
    const [canOpenSuccessModal, setCanOpenSuccessModal] = useState(false);
    const [isLoading, setIsLoading] = useState(false);


    const rooms = [
        { id: 1, number: "101", bedNumber: 10, status: "occupied", patient: "Jean Dupont", admissionDate: "2024-01-25", price: "25000" },
        { id: 2, number: "102", bedNumber: 5, status: "available", patient: null, admissionDate: null, price: "35000" },
        { id: 3, number: "103", bedNumber: 5, status: "occupied", patient: "Marie Claire", admissionDate: "2024-01-24", price: "50000" },
        { id: 4, number: "201", bedNumber: 1, status: "available", patient: null, admissionDate: null, price: "25000" },
        { id: 5, number: "202", bedNumber: 1, status: "occupied", patient: "Paul Martin", admissionDate: "2024-01-23", price: "35000" },
    ];

    const stats = {
        total: rooms.length,
        available: rooms.filter(room => room.status === 'available').length,
        occupied: rooms.filter(room => room.status === 'occupied').length
    };

    const filteredRooms = rooms.filter(room => {
        const matchesStatus = filterStatus === 'all' || room.status === filterStatus;
        const matchesSearch = room.number.toLowerCase().includes(searchTerm.toLowerCase()) || (room.patient && room.patient.toLowerCase().includes(searchTerm.toLowerCase()));
        return matchesStatus && matchesSearch;
    });


    const [roomsList, setRoomList] = useState([]);
    const [nexUrlForRenderRooms, setNextUrlForRenderRooms] = useState(null);
    const [prevUrlForRenderRooms, setPrevUrlForRenderRooms] = useState(null);
    const [numberOfRooms, setNumberOfRooms] = useState(0);
    const [canOpenErrorModal, setCanOpenErrorModal] = useState(false);
    const [errorMessage, setErrorMessage] = useState("");
    const [actualPage, setActualPage] = useState(numberOfRooms > 0 ? 1 : 0);
    const [canOpenConfirmModal, setCanOpenConfirmModal] = useState(false);
    const [roomToDelete, setRoomToDelete] = useState({});


    function calculateTotalPages() {
        if (numberOfRooms > 0) return Math.ceil(numberOfRooms / 5);
        else return 0;
    }
    async function fetchHospitalRooms()
    {
        setIsLoading(true);
        try {
            const response = await axiosInstance.get("/room/");
            if (response.status === 200) {
                setIsLoading(false);
                setRoomList(response.data.result);
                setNumberOfRooms(response.data.count);
                setNextUrlForRenderRooms(response.data.next);
                setPrevUrlForRenderRooms(response.data.previous);
                setErrorMessage("");
                setCanOpenErrorModal(false);
            }
        }
        catch (error) {
            setIsLoading(false);
            setSuccessMessage("");
            setErrorMessage("something went wrong, please try again later !");
            setCanOpenErrorModal(true);
            console.log(error);
        }
    }


    async function fetchNextOrPreviousRoomsList(url)
    {
        if(url)
        {
            try {
                const response = await axiosInstance.get(url);
                if (response.status === 200)
                {
                    setRoomList(response.data.results);
                    setNumberOfRooms(response.data.count);
                    setNextUrlForRenderRooms(response.data.next);
                    setPrevUrlForRenderRooms(response.data.previous);
                    setErrorMessage("");
                    setSuccessMessage("");
                    setCanOpenSuccessModal(false);
                    setCanOpenErrorModal(false);
                }
            } catch (error) {
                setSuccessMessage("");
                setErrorMessage("something went wrong, please try again later !");
                setCanOpenSuccessModal(false);
                setCanOpenErrorModal(true);
                console.log(error);
            }
        }
    }


    async function handleDeleteRoom(roomId)
    {
        setIsLoading(true);
        try {
            const response = await axiosInstance.delete(`/room/${roomId}/`);
            if (response.status === 204)
            {
                setIsLoading(false);
                setSuccessMessage("room deleted successfully !");
                setErrorMessage("");
                setCanOpenSuccessModal(true);
                setCanOpenErrorModal(false);
            }
        }
        catch (error) {
            setIsLoading(false);
            setSuccessMessage("");
            setErrorMessage(`something went wrong when deleting the room ${roomToDelete.id}, try later please !`);
            setCanOpenSuccessModal(false);
            setCanOpenErrorModal(true);
            console.log(error);
        }
    }


    useEffect(() => {
        fetchHospitalRooms();
    }, []);


    return (
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>


            <div className="p-6 mx-auto relative">

                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold text-secondary">Hospital room management</h1>
                    <button
                        className="font-bold flex items-center gap-2 bg-gradient-to-r from-primary-end to-primary-start text-white px-4 py-2 rounded-md transition-colors"
                        onClick={() => setCanOpenAddNewRoomModal(true)}>
                        <Plus size={20}/>
                        Add A New Room
                    </button>
                </div>

                {/* Stats */}
                <div className="grid grid-cols-3 gap-6 mb-6">
                    <div className="bg-gradient-to-r from-primary-end to-primary-start p-6 rounded-lg shadow-lg">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-white font-semibold text-md">Total Rooms</p>
                                <h3 className="text-white text-3xl font-bold">{stats.total}</h3>
                            </div>
                            <BedDouble className="text-white h-12 w-12 opacity-80"/>
                        </div>
                    </div>

                    <div className="bg-gradient-to-r from-green-300 to-green-500 p-6 rounded-lg shadow-lg">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-white font-semibold text-md">Available Rooms</p>
                                <h3 className="text-white text-3xl font-bold">{stats.available}</h3>
                            </div>
                            <CheckCircle className="text-white h-12 w-12 opacity-80"/>
                        </div>
                    </div>

                    <div className="bg-gradient-to-r from-orange-300 to-orange-500 p-6 rounded-lg shadow-lg">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-white font-semibold text-md">Occupied Rooms</p>
                                <h3 className="text-white text-3xl font-bold">{stats.occupied}</h3>
                            </div>
                            <Users className="text-white h-12 w-12 opacity-80"/>
                        </div>
                    </div>
                </div>

                {/* Search Bar and filters*/}
                <div className="flex flex-row gap-4 mb-6">
                    <div className="relative flex-1">
                        <input
                            type="text"
                            placeholder="looking for a room..."
                            className="w-full pl-10 pr-4 py-2 border rounded-md focus:outline-none  focus:border-2  focus:border-primary-end"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                        />
                        <Search className="absolute left-3 top-2.5 text-gray-400" size={20}/>
                    </div>
                    <div className="flex gap-2">
                        <button
                            className={`px-4 py-2 rounded-md ${filterStatus === 'all' ? 'bg-primary-end text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
                            onClick={() => setFilterStatus('all')}
                        >
                            ALL
                        </button>
                        <button
                            className={`px-4 py-2 rounded-md ${filterStatus === 'available' ? 'bg-primary-end  text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
                            onClick={() => setFilterStatus('available')}
                        >
                            Available
                        </button>
                        <button
                            className={`px-4 py-2 rounded-md ${filterStatus === 'occupied' ? 'bg-primary-end  text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
                            onClick={() => setFilterStatus('occupied')}
                        >
                            Occupied
                        </button>
                    </div>
                </div>

                <div>
                    <table className="w-full border-separate border-spacing-y-2">
                        <thead>
                        <tr className="bg-gradient-to-l from-primary-start to-primary-end ">
                            <th className="text-center text-white p-4 text-xl font-bold  border-gray-200 rounded-l-2xl ">Room
                                Number
                            </th>
                            <th className="text-center text-white p-4 text-xl font-bold border-gray-200">Number Of
                                Beds
                            </th>
                            <th className="text-center text-white p-4 text-xl font-bold  border-gray-200 ">Status</th>
                            <th className="text-center text-white p-4 text-xl font-bold  border-gray-200 ">Creation
                                date
                            </th>
                            <th className="text-center text-white p-4 text-xl font-bold  border-gray-200 ">Price/Day</th>
                            <th className="text-center text-white p-4 text-xl font-bold  flex-col rounded-r-2xl">
                                <p>Operations</p>
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        {filteredRooms.map((room, index) => (
                            <tr key={room.id || index} className="bg-gray-100 cursor-pointer hover:bg-gray-200 transition-all duration-300">
                                <td className="px-6 py-4 rounded-l-xl">
                                    <div className="flex items-center justify-center">
                                        {room.bedNumber > 1 ? (
                                            <BedDouble className="h-5 w-5 text-gray-400 mr-2"/>
                                        ) : (
                                            <BedSingle className="h-5 w-5 text-gray-400 mr-2"/>
                                        )}
                                        {room.number}
                                    </div>
                                </td>
                                <td className="px-6 py-4 text-center font-bold">{room.bedNumber}</td>
                                <td className={`px-6 py-4 text-center font-semibold ${room.status === 'available' ? 'text-green-500' : 'text-orange-500'}`}>
                                    {room.status}
                                </td>
                                <td className="px-6 py-4 text-center">{room.admissionDate || '-'}</td>
                                <td className="px-6 py-4 text-center">{room.price} FCFA</td>
                                <td className="px-6 py-4 rounded-r-xl">
                                    <div className="w-full flex gap-4 items-center justify-center">
                                        <Tooltip placement={"left"} title={"view details"}>
                                            <button
                                                onClick={() => {
                                                }}
                                                className="flex items-center justify-center w-9 h-9 text-primary-end text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                <FaEye/>
                                            </button>
                                        </Tooltip>
                                        <Tooltip placement={"right"} title={"Edit"}>
                                            <button
                                                onClick={() => {
                                                }}
                                                className="flex items-center justify-center w-9 h-9 text-green-500 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                <FaEdit/>
                                            </button>
                                        </Tooltip>
                                        <Tooltip placement={"right"} title={"delete"}>
                                            <button
                                                onClick={ () => {setRoomToDelete(room), setCanOpenConfirmModal(true)}}
                                                className="flex items-center justify-center w-9 h-9 text-red-500 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                <FaTrash/>
                                            </button>
                                        </Tooltip>
                                    </div>
                                </td>
                            </tr>
                        ))}
                        </tbody>
                    </table>

                    {/*Pagination content */}
                    <div className="w-full justify-center flex mt-6 mb-4">
                        <div className="flex gap-4">
                            <Tooltip placement={"left"} title={"previous slide"}>
                                <button onClick={async () => {await fetchNextOrPreviousRoomsList(prevUrlForRenderRooms)}}
                                    className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                    <FaArrowLeft/>
                                </button>
                            </Tooltip>
                            <p className="text-secondary text-2xl font-bold mt-4">{`${actualPage} / ${calculateTotalPages()}`}</p>
                            <Tooltip placement={"right"} title={"next slide"}>
                                <button onClick={async () => {await fetchNextOrPreviousRoomsList(nexUrlForRenderRooms)}}
                                    className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                    <FaArrowRight/>
                                </button>
                            </Tooltip>
                        </div>
                    </div>
                </div>
            </div>

            {isLoading && <Wait/>}
            <AddHospitalRoomModal isOpen={canOpenAddNewRoomModal} onClose={setCanOpenAddNewRoomModal} setCanOpenSuccessModal={setCanOpenSuccessModal}  setSuccessMessage={setSuccessMessage}/>
            <SuccessModal isOpen={canOpenSuccessModal} canOpenSuccessModal={setCanOpenAddNewRoomModal} message={successMessage} makeAction={async () => await fetchHospitalRooms()}/>
            <ErrorModal isOpen={canOpenErrorModal} onCloseErrorModal={setCanOpenErrorModal} message={errorMessage}/>
            <ConfirmationModal isOpen={canOpenConfirmModal} onClose={() => setCanOpenConfirmModal(false)} onConfirm={async () => await handleDeleteRoom(roomToDelete.id)} title={`Delete room`} message={`Are you sure you want to delete the room ${roomToDelete.number} ?`}/>
        </CustomDashboard>
    );
}

// END OF FILE: src/Pages/AdminViews/AdminHospitalRooms.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AdminMedicalStaffList.jsx

import {FaArrowLeft, FaArrowRight, FaEdit, FaEye, FaPlus, FaSearch, FaTrash,} from "react-icons/fa";
import {Tooltip} from "antd";
import {useEffect, useState} from "react";
import {SuccessModal} from "../Modals/SuccessModal.jsx";
import Wait from "../Modals/wait.jsx";
import {ErrorModal} from "../Modals/ErrorModal.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {AdminNavBar} from "./AdminNavBar.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {ConfirmationModal} from "../Modals/ConfirmAction.Modal.jsx";
import {AppRoutesPaths as appRouterPaths} from "../../Router/appRouterPaths.js";
import {useNavigate} from "react-router-dom";
import {ViewMedicalStaffDetailsModal} from "./ViewMedicalStaffDetailsModal.jsx";
import {EditMedicalStaffInfosModal} from "./EditMedicalStaffInfosModal.jsx";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";


export function AdminMedicalStaffList()
{

    const [waitFetchingData, setWaitFetchingData] = useState(false);
    const [errorStatus, setErrorStatus] = useState(null);
    const [serverErrorMessage, setServerErrorMessage] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [selectedMedicalStaffDetails, setSelectedMedicalStaffDetails] = useState({});
    const [canOpenSuccessModal, setCanOPenSuccessModal] = useState(false);
    const [canOpenErrorMessageModal, setCanOpenErrorMessageModal] = useState(false);
    const [canOpenViewMedicalStaffDetailModal, setCanOpenViewMedicalStaffDetailModal] = useState(false);
    const [canOpenConfirmActionModal, setCanOpenConfirmActionModal] = useState(false);
    const [medicalStaffToDelete, setMedicalStaffToDelete] = useState({});
    const [canOpenEditMedicalStaffDetailModal, setCanOpenEditMedicalStaffDetailModal] = useState(false);
    const [medicalStaffList, setMedicalStaffList] = useState([]);
    const [numberOfMedicalStaff, setNumberOfMedicalStaff] = useState(0);
    const [nexUrlForRenderMedicalStaffList, setNexUrlForRenderMedicalStaffList] = useState("");
    const [previousUrlForRenderMedicalStaffList, setPreviousUrlForRenderMedicalStaffList] = useState("");
    const [actualPageNumber, setActualPageNumber] = useState(1);
    const [successMessage, setSuccessMessage] = useState("");
    const navigate = useNavigate();
    const [errorMessage, setErrorMessage] = useState("");





    function calculateNumberOfSlide() {
        return numberOfMedicalStaff % 5 === 0 ? numberOfMedicalStaff / 5 : Math.floor(numberOfMedicalStaff / 5) + 1;
    }


    function updateActualPageNumber(action) {
        if (action === "next")
        {
            if(actualPageNumber < calculateNumberOfSlide())
            {
                setActualPageNumber(actualPageNumber + 1);
            }
        }
        else
        {
            if(actualPageNumber > 1)
            {
                setActualPageNumber(actualPageNumber - 1);
            }
        }
    }



    async function fetchMedicalStaffData(url = "/medical-staff/") {
        if (!url) return;

        setWaitFetchingData(true);

        try {
            const response = await axiosInstance.get(url);
            setWaitFetchingData(false);

            if (response.status === 200) {
                setMedicalStaffList(response.data.results);
                setNumberOfMedicalStaff(response.data.count);
                setNexUrlForRenderMedicalStaffList(response.data.next);
                setPreviousUrlForRenderMedicalStaffList(response.data.previous);
                setServerErrorMessage("");
                setErrorStatus(null);
            }
        } catch (error) {
            setWaitFetchingData(false);
            setMedicalStaffList([]);
            setNumberOfMedicalStaff(0);
            setNexUrlForRenderMedicalStaffList("");
            setPreviousUrlForRenderMedicalStaffList("");
            setServerErrorMessage("Something went wrong when retrieving medical staff list !!")
            setErrorStatus(error.status);
            console.log(error);
        }
    }


    async function fetchMedicalStaffList() {
        await fetchMedicalStaffData();
    }


    async function fetchNextOrPreviousPatientList(url) {
        await fetchMedicalStaffData(url);
    }

    useEffect(() => {
        fetchMedicalStaffList();
    }, []);



    async function deleteMedicalStaff(medicalStaffId){
        setIsLoading(true);
        try {
            const response = await axiosInstance.delete(`/medical-staff/${medicalStaffId}/`);
            if (response.status === 204) {
                setIsLoading(false);
                setSuccessMessage("Medical Staff deleted successfully !");
                setErrorMessage("");
                setCanOpenErrorMessageModal(false);
                setCanOPenSuccessModal(true);
            }
        }
        catch (error) {
            setIsLoading(false);
            setSuccessMessage("");
            setErrorMessage(error.response.data.detail)
            setCanOPenSuccessModal(false);
            setCanOpenErrorMessageModal(true);
            console.log(error);
        }
    }



    return (
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            <div className="mt-5 flex flex-col relative">

                {/*Header content with search bar*/}
                <div className="flex justify-between mb-5">
                    <p className="font-bold text-xl mt-2 ml-5"> List Of Medical Staff </p>
                    <div className="flex mr-5">
                        <div className="flex w-[300px] h-10 border-2 border-secondary rounded-lg">
                            <FaSearch className="text-xl text-secondary m-2"/>
                            <input
                                type="text"
                                placeholder={"search for a specific patient"}
                                className="border-none focus:outline-none focus:ring-0"
                            />
                        </div>
                        <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
                            Search
                        </button>
                    </div>
                </div>

                {/*List of registered medical staff*/}

                {waitFetchingData ? (
                        <div className="h-[500px] w-full flex justify-center items-center">
                            <Loader size={"medium"} color={"primary-end"}/>
                        </div>
                    ) :
                    errorStatus ? (
                            <div className="mt-16">
                                <ServerErrorPage errorStatus={errorStatus} message={serverErrorMessage}/>
                            </div>
                        ) :
                        medicalStaffList.length >0 ? (
                            <div className="ml-5 mr-5 ">
                                <table className="w-full border-separate border-spacing-y-2">
                                    <thead>
                                    <tr className="bg-gradient-to-l from-primary-start to-primary-end">
                                        <th className="text-center text-white p-4 text-xl font-bold  rounded-l-lg ">No</th>
                                        <th className="text-center text-white p-4 text-xl font-bold">First Name</th>
                                        <th className="text-center text-white p-4 text-xl font-bold">Last Name
                                        </th>
                                        <th className="text-center text-white p-4 text-xl font-bold">Gender</th>
                                        <th className="text-center text-white p-4 text-xl font-bold">Email</th>
                                        <th className="text-center text-white p-4 text-xl font-bold">Role</th>
                                        <th className="text-center text-white p-4 text-xl font-bold  rounded-r-lg">
                                            <p>Operations</p>
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    {medicalStaffList.map((medicalStaff, index) => (
                                        <tr key={medicalStaff.id || index} className="bg-gray-100">
                                            <td className="p-4 text-md text-blue-900 rounded-l-lg text-center">{index + 1}</td>
                                            <td className="p-4 text-md text-center font-bold">{medicalStaff.first_name}</td>
                                            <td className="p-4 text-md text-center">{medicalStaff.last_name}</td>
                                            <td className="p-4 text-md text-center">{medicalStaff.gender}</td>
                                            <td className="p-4 text-center text-md">{medicalStaff.email}</td>
                                            <td className="p-4 text-center text-md">{medicalStaff.role === "Labtech" ? "Laboratory Assistant" : medicalStaff.role}</td>
                                            <td className="p-4 relative rounded-r-lg">
                                                <div className="w-full items-center justify-center flex gap-6">
                                                    <Tooltip placement={"left"} title={"view details"}>
                                                        <button
                                                            onClick={() => {
                                                                setSelectedMedicalStaffDetails(medicalStaff), setCanOpenViewMedicalStaffDetailModal(true)
                                                            }}
                                                            className="flex items-center justify-center w-9 h-9 text-primary-end text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                            <FaEye/>
                                                        </button>
                                                    </Tooltip>
                                                    <Tooltip placement={"top"} title={"Edit Patient Informations"}>
                                                        <button
                                                            onClick={() => {
                                                                setSelectedMedicalStaffDetails(medicalStaff), setCanOpenEditMedicalStaffDetailModal(true)
                                                            }}
                                                            className="flex items-center justify-center w-9 h-9 text-green-500 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                            <FaEdit/>
                                                        </button>
                                                    </Tooltip>
                                                    <Tooltip placement={"top"} title={"delete patient"}>
                                                        <button
                                                            onClick={() => {
                                                                setMedicalStaffToDelete(medicalStaff), setCanOpenConfirmActionModal(true)
                                                            }}
                                                            className="flex items-center justify-center w-9 h-9 text-red-400 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                            <FaTrash/>
                                                        </button>
                                                    </Tooltip>
                                                </div>
                                            </td>
                                        </tr>
                                    ))}
                                    </tbody>
                                </table>


                                {/*Pagination content */}
                                <div className="fixed w-full justify-center -right-16 bottom-0 flex mt-6 mb-4">
                                    <div className="flex gap-4">
                                        <Tooltip placement={"left"} title={"previous slide"}>
                                            <button
                                                onClick={async ()=> {await fetchNextOrPreviousPatientList(previousUrlForRenderMedicalStaffList), updateActualPageNumber("prev")}}
                                                className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                <FaArrowLeft/>
                                            </button>
                                        </Tooltip>
                                        <p className="text-secondary text-2xl font-bold mt-4">{actualPageNumber}/{calculateNumberOfSlide()}</p>
                                        <Tooltip placement={"right"} title={"next slide"}>
                                            <button
                                                onClick={async ()=> {await fetchNextOrPreviousPatientList(nexUrlForRenderMedicalStaffList), updateActualPageNumber("next")}}
                                                className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                <FaArrowRight/>
                                            </button>
                                        </Tooltip>
                                    </div>
                                </div>


                                {/* Add new medical staff button */}
                                <Tooltip placement={"top"} title={"Add New Medical Staff"}>
                                    <button
                                        onClick={()=>navigate(appRouterPaths.addMedicalStaff)}
                                        className="flex justify-center items-center fixed bottom-5 right-16 rounded-full w-14 h-14 bg-gradient-to-r text-3xl font-bold text-white from-primary-start to-primary-end hover:text-4xl transition-all duration-300">
                                        <FaPlus/>
                                    </button>
                                </Tooltip>


                                {/* Modals content */}
                                <EditMedicalStaffInfosModal isOpen={canOpenEditMedicalStaffDetailModal} onClose={()=>{setCanOpenEditMedicalStaffDetailModal(false)}} setCanOpenSuccessModal={setCanOPenSuccessModal} setSuccessMessage={setSuccessMessage} setIsLoading={setIsLoading} medicalStaffData={selectedMedicalStaffDetails}/>
                                <SuccessModal isOpen={canOpenSuccessModal} message={successMessage} canOpenSuccessModal={setCanOPenSuccessModal} makeAction={async ()=> {await fetchMedicalStaffList(), calculateNumberOfSlide()}}/>
                                <ErrorModal isOpen={canOpenErrorMessageModal} onCloseErrorModal={()=>{setCanOpenErrorMessageModal(false)}} message={errorMessage}/>
                                <ViewMedicalStaffDetailsModal isOpen={canOpenViewMedicalStaffDetailModal} medicalStaff={selectedMedicalStaffDetails} onClose={()=>{setCanOpenViewMedicalStaffDetailModal(false)}}/>
                                {isLoading && <Wait/>}
                                <ConfirmationModal isOpen={canOpenConfirmActionModal} onClose={() => setCanOpenConfirmActionModal(false)} onConfirm={async () => await deleteMedicalStaff(medicalStaffToDelete.id)} title={"Delete Medical Staff"} message={`Are you sure you want to delete the ${medicalStaffToDelete.role + " "} ${medicalStaffToDelete.first_name + " " + medicalStaffToDelete.last_name} ?`}/>
                            </div>
                        ) : (
                            <div className="flex flex-col items-center justify-center h-[600px]  bg-gradient-to-b from-white to-teal-50   p-8">
                                <div className="mb-6 relative">
                                    <svg
                                        className="w-24 h-24 text-primary-end"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg"
                                    >
                                        <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth={2}
                                            d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                                        />
                                    </svg>
                                    <span className="absolute top-0 left-0 w-full h-full bg-teal-200 rounded-full animate-ping opacity-75"></span>
                                </div>
                                <h2 className="text-2xl font-bold text-teal-700 mb-4">No registered medical personnel</h2>
                                <p className="text-gray-600 text-center mb-8 max-w-xl">
                                    Your medical team is the heart of your clinic. Start building your team by adding your first member of the medical staff.
                                </p>
                                <button
                                    onClick={()=>navigate(appRouterPaths.addMedicalStaff)}
                                    className="bg-primary-end hover:bg-primary-start text-white font-bold py-2 px-4 rounded-full transition-all duration-300 flex items-center"
                                >
                                    <svg
                                        className="w-5 h-5 mr-2"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg"
                                    >
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                    </svg>
                                    Add a staff member
                                </button>
                            </div>
                        )
                }
            </div>
        </CustomDashboard>
    )
}// END OF FILE: src/Pages/AdminViews/AdminMedicalStaffList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AdminNavBar.jsx

import {FaCog, FaEnvelope, FaSignOutAlt} from "react-icons/fa";
import {Tooltip} from "antd";
import {useAuthentication} from "../../Utils/Provider.jsx";
import userIcon from "../../assets/userIcon.png";

export function AdminNavBar()
{

    const {logout , userData} = useAuthentication();

    const applyNavLinkBtnStyle = () => {
        return " w-12 h-10 mt-1 border-2 bg-gray-100 flex justify-center items-center rounded-xl shadow-xl hover:bg-secondary text-secondary text-xl hover:text-white transition-all duration-300";
    }


    return (
        <>
            <div className="border-b-2 m-3  border-b-gray-300">
                <div className="w-full h-[70px] flex justify-between">
                    <h1 className="ml-3 text-4xl text-secondary mt-3.5 font-bold">
                        Administrator
                    </h1>
                     <div className="flex gap-3 mt-3.5 mb-4 mr-5">
                         {/* <Tooltip placement={"top"} title={"settings"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaCog/>
                            </button>

                        </Tooltip>

                        <Tooltip placement={"top"} title={"Messages"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaEnvelope/>
                            </button>
                        </Tooltip> */}
                        <Tooltip placement={"top"} title={"LogOut"}>
                            <button
                                onClick={() => {logout()}}
                                className={" w-12 h-10 mt-1 border-2 bg-red-400 flex justify-center items-center rounded-xl shadow-xl hover:bg-white text-white text-xl hover:text-red-500 transition-all duration-300"}>
                                <FaSignOutAlt/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"Profile"}>
                            <div className="ml-3 flex">
                                <p className="font-bold text-secondary text-xl mt-2">{"Hello " +userData?.username + "!"}</p>
                                <img src={userIcon} alt={"user-icon"} className="w-12 h-12 ml-2 mr-3"/>

                            </div>
                        </Tooltip>
                    </div>
                </div>
            </div>
        </>
    )
}// END OF FILE: src/Pages/AdminViews/AdminNavBar.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/adminNavLink.js

import {FaFileInvoiceDollar, FaHome, FaNotesMedical, FaPlus,FaUserMd, FaUsers} from "react-icons/fa";
import {AppRoutesPaths as appRoutes} from "../../Router/appRouterPaths.js";
import {Bed, BedDouble, Calendar} from "lucide-react";
import {FiList} from "react-icons/fi";
import {GiMedicines} from "react-icons/gi";
import { FaListAlt } from "react-icons/fa";
import { MdMedicalServices } from "react-icons/md";
import { FaPills } from "react-icons/fa";

export const adminNavLink = [
    {
        name: "Dashboard",
        link: appRoutes.adminHomePage,
        icon: FaHome,
    },
    {
        name: 'Patient List',
        icon: FaUsers,
        link: appRoutes.adminPatientListPage,
    },
    {
        name: "Medical Staffs",
        icon: FaUserMd,
        subLinks: [
            {
                icon: FaUsers,
                name: "Medical Staff List",
                link: appRoutes.adminMedicalStaffListPage
            },
            {
                icon: FaPlus,
                name: "Add A Medical Staff",
                link: appRoutes.addMedicalStaff
            }
        ]
    },
  /*  {
        name: 'Consultation List',
        icon: FiList,
        link: appRoutes.adminConsultationListPage,
    },
   /* {
        name: 'Appointments',
        icon: Calendar,
        link: appRoutes.adminAppointmentsListPage,
    },*/
    {
        name: 'Exams',
        icon: MdMedicalServices,
        subLinks: [
            {
                icon: FaListAlt,
                name: "Exams List",
                link: appRoutes.adminExamsListPage,
            },
            {
                icon: FaPlus,
                name: "Add An Exam",
                link: appRoutes.addExam
            }
        ]
        
    },
    {
        name: 'Drugs',
        icon: FaPills,
        subLinks: [
            {
                icon: FaListAlt,
                name: "Drugs List",
                link: appRoutes.adminDrugsListPage,
            },
            {
                icon: FaPlus,
                name: "Add A Drug",
                link: appRoutes.addDrug
            }
        ]
        
    }
    /*,
    {
        name: 'Medicine',
        icon: GiMedicines,
        link: appRoutes.nursePage,
    },
    {
        name: 'Financial Report',
        icon: FaFileInvoiceDollar,
        link: appRoutes.adminFinancialReportsPage,
    },*/
    ,{
        name: 'Hospital Rooms',
        icon: BedDouble,
        link: appRoutes.adminHospitalRoomPage
    },
];// END OF FILE: src/Pages/AdminViews/adminNavLink.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/AdminPatientList.jsx

import {FaArrowLeft, FaArrowRight, FaEdit, FaEye, FaSearch, FaTrash,} from "react-icons/fa";
import {Tooltip} from "antd";
import {useEffect, useState} from "react";
import {SuccessModal} from "../Modals/SuccessModal.jsx";
import Wait from "../Modals/wait.jsx";
import {ErrorModal} from "../Modals/ErrorModal.jsx";
import {ViewPatientDetailsModal} from "../Receptionist/ViewPatientDetailsModal.jsx";
import {EditPatientInfosModal} from "../Receptionist/EditPatientInfosModal.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {AdminNavBar} from "./AdminNavBar.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {ConfirmationModal} from "../Modals/ConfirmAction.Modal.jsx";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";
import noPatientImage from "../../assets/noPatients.png";
import {calculateNumberOfSlides} from "../../Utils/paginationFunctions.js";
//import {AddNewPatientModal} from "../Receptionist/addNewPatientModal.jsx";

export function AdminPatientList()
{


   // const [canOpenAddNewPatientModal, setCanOpenAddNewPatientModal] = useState(false);
    const [errorMessage, setErrorMessage] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [selectedPatientDetails, setSelectedPatientDetails] = useState({});
    const [canOpenSuccessModal, setCanOPenSuccessModal] = useState(false);
    const [canOpenErrorMessageModal, setCanOpenErrorMessageModal] = useState(false);
    const [canOpenViewPatientDetailModal, setCanOpenViewPatientDetailModal] = useState(false);
    const [canOpenConfirmActionModal, setCanOpenConfirmActionModal] = useState(false);
    const [patientToDelete, setPatientToDelete] = useState({});
    const [canOpenEditPatientDetailModal, setCanOpenEditPatientDetailModal] = useState(false);
    const [patients, setPatients] = useState([]);
    const [numberOfPatients, setNumberOfPatients] = useState(0);
    const [nexUrlForRenderPatientList, setNexUrlForRenderPatientList] = useState("");
    const [previousUrlForRenderPatientList, setPreviousUrlForRenderPatientList] = useState("");
    const [actualPageNumber, setActualPageNumber] = useState(1);
    const [successMessage, setSuccessMessage] = useState("");

    const [errorStatus, setErrorStatus] = useState(null);
    const [serverErrorMessage, setServerErrorMessage] = useState("");
    const [waitFetchData, setWaitFetchData] = useState(false);






    function updateActualPageNumber(action) {
        if (action === "next")
        {
            if(actualPageNumber < calculateNumberOfSlides(numberOfPatients, 5))
            {
                setActualPageNumber(actualPageNumber + 1);
            }
        }
        else
        {
            if(actualPageNumber > 1)
            {
                setActualPageNumber(actualPageNumber - 1);
            }
        }
    }



    async function fetchPatientData(url = "/patient/") {
        setWaitFetchData(true);

        try {
            const response = await axiosInstance.get(url);
            setWaitFetchData(false);

            if (response.status === 200) {
                setPatients(response.data.results);
                setNumberOfPatients(response.data.count);
                setNexUrlForRenderPatientList(response.data.next);
                setPreviousUrlForRenderPatientList(response.data.previous);
                setServerErrorMessage("");
                setErrorStatus(null);
            }
        } catch (error) {
            setWaitFetchData(false);
            setPatients([]);
            setNumberOfPatients(0);
            setNexUrlForRenderPatientList("");
            setPreviousUrlForRenderPatientList("");
            setServerErrorMessage("Something went wrong went retrieving patient list");
            setErrorStatus(error.status);
            console.log(error);
        }
    }


    async function fetchPatients() {
        await fetchPatientData();
    }


    async function fetchNextOrPreviousPatientList(url) {
        if (url) {
            await fetchPatientData(url);
        }
    }

    useEffect(() => {
        fetchPatients();
    }, []);





    async function deletePatient(patientId){
        setIsLoading(true);
        try {
            const response = await axiosInstance.delete(`/patient/${patientId}/`);
            if (response.status === 204) {
                setIsLoading(false);
                setSuccessMessage("Patient deleted successfully !");
                setErrorMessage("");
                await fetchPatients();
                setCanOpenErrorMessageModal(false);
                setCanOPenSuccessModal(true);
            }
        }
        catch (error) {
            setIsLoading(false);
            setSuccessMessage("");
            setErrorMessage(error.response.data.detail)
            setCanOPenSuccessModal(false);
            setCanOpenErrorMessageModal(true);
            console.log(error);
        }
    }



    return (
        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            <div className="mt-5 flex flex-col relative">

                {/*Header content with search bar*/}
                <div className="flex justify-between mb-5">
                    <p className="font-bold text-xl mt-2 ml-5"> List Of Patient </p>
                    <div className="flex mr-5">
                        <div className="flex w-[300px] h-10 border-2 border-secondary rounded-lg">
                            <FaSearch className="text-xl text-secondary m-2"/>
                            <input
                                type="text"
                                placeholder={"search for a specific patient"}
                                className="border-none focus:outline-none focus:ring-0"
                            />
                        </div>
                        <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
                            Search
                        </button>
                    </div>
                </div>

                {/*List of registered patients*/}

                { waitFetchData ? (
                    <div className="h-[500px] w-full flex justify-center items-center">
                        <Loader size={"medium"} color={"primary-end"}/>
                    </div>) : errorStatus ? (
                    <div className="mt-16">
                        <ServerErrorPage errorStatus={errorStatus} message={serverErrorMessage}/>
                    </div>) : patients.length > 0 ? (
                        <div className="ml-5 mr-5 ">
                            <table className="w-full border-separate border-spacing-y-2">
                                <thead>
                                <tr className="bg-gradient-to-l from-primary-start to-primary-end ">
                                    <th className="text-center text-white p-4 text-xl font-bold  border-gray-200 rounded-l-2xl ">No</th>
                                    <th className="text-center text-white p-4 text-xl font-bold border-gray-200">First Name</th>
                                    <th className="text-center text-white p-4 text-xl font-bold  border-gray-200 ">Last Name
                                    </th>
                                    <th className="text-center text-white p-4 text-xl font-bold  border-gray-200 ">Gender</th>
                                    <th className="text-center text-white p-4 text-xl font-bold  border-gray-200 ">Address</th>
                                    <th className="text-center text-white p-4 text-xl font-bold  flex-col rounded-r-2xl">
                                        <p>Operations</p>
                                    </th>
                                </tr>
                                </thead>
                                <tbody>
                                {patients.map((patient, index) => (
                                    <tr key={patient.id || index} className="bg-gray-100">
                                        <td className="p-4 text-md text-blue-900 rounded-l-lg text-center">{index + 1}</td>
                                        <td className="p-4 text-md text-center font-bold">{patient.firstName}</td>
                                        <td className="p-4 text-md text-center">{patient.lastName}</td>
                                        <td className="p-4 text-md text-center">{patient.gender}</td>
                                        <td className="p-4 text-center text-md">{patient.address}</td>
                                        <td className="p-4 relative rounded-r-lg">
                                            <div className="w-full items-center justify-center flex gap-6">
                                                <Tooltip placement={"left"} title={"view details"}>
                                                    <button
                                                        onClick={()=>{setSelectedPatientDetails(patient),setCanOpenViewPatientDetailModal(true)}}
                                                        className="flex items-center justify-center w-9 h-9 text-primary-end text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                        <FaEye/>
                                                    </button>
                                                </Tooltip>
                                                <Tooltip placement={"right"} title={"Edit"}>
                                                    <button
                                                        onClick={()=>{setSelectedPatientDetails(patient),setCanOpenEditPatientDetailModal(true)}}
                                                        className="flex items-center justify-center w-9 h-9 text-green-500 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                        <FaEdit/>
                                                    </button>
                                                </Tooltip>
                                                <Tooltip placement={"right"} title={"delete"}>
                                                    <button
                                                        onClick={()=>{setPatientToDelete(patient),setCanOpenConfirmActionModal(true)}}
                                                        className="flex items-center justify-center w-9 h-9 text-red-400 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                        <FaTrash/>
                                                    </button>
                                                </Tooltip>
                                            </div>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>


                            {/*Pagination content */}
                            <div className="fixed w-full justify-center -right-16 bottom-0 flex mt-6 mb-4">
                                <div className="flex gap-4">
                                    <Tooltip placement={"left"} title={"previous slide"}>
                                        <button
                                            onClick={async ()=> {await fetchNextOrPreviousPatientList(previousUrlForRenderPatientList), updateActualPageNumber("prev")}}
                                            className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                            <FaArrowLeft/>
                                        </button>
                                    </Tooltip>
                                    <p className="text-secondary text-2xl font-bold mt-4">{actualPageNumber}/{calculateNumberOfSlides(numberOfPatients, 5)}</p>
                                    <Tooltip placement={"right"} title={"next slide"}>
                                        <button
                                            onClick={async ()=> {await fetchNextOrPreviousPatientList(nexUrlForRenderPatientList), updateActualPageNumber("next")}}
                                            className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                            <FaArrowRight/>
                                        </button>
                                    </Tooltip>
                                </div>
                            </div>


                            {/* Add new patient button & modal
                            <Tooltip placement={"top"} title={"Add new patient"}>
                                <button
                                    onClick={()=>setCanOpenAddNewPatientModal(true)}
                                    className="fixed bottom-5 right-16 rounded-full w-14 h-14 bg-gradient-to-r text-4xl font-bold text-white from-primary-start to-primary-end hover:text-5xl transition-all duration-300">
                                    +
                                </button>
                            </Tooltip> */}

                            {/* Modals content */}
                            {/* <AddNewPatientModal isOpen={canOpenAddNewPatientModal} onClose={()=>{setCanOpenAddNewPatientModal(false)}} setCanOpenSuccessModal={setCanOPenSuccessModal} setSuccessMessage={setSuccessMessage} setIsLoading={setIsLoading}/>*/}
                            <EditPatientInfosModal isOpen={canOpenEditPatientDetailModal} onClose={()=>{setCanOpenEditPatientDetailModal(false)}} setCanOpenSuccessModal={setCanOPenSuccessModal} setSuccessMessage={setSuccessMessage} setIsLoading={setIsLoading} patientData={selectedPatientDetails}/>
                            <SuccessModal isOpen={canOpenSuccessModal} message={successMessage} canOpenSuccessModal={setCanOPenSuccessModal} makeAction={async ()=> {await fetchPatients(), calculateNumberOfSlides(numberOfPatients, 5)}}/>
                            <ErrorModal isOpen={canOpenErrorMessageModal} onCloseErrorModal={()=>{setCanOpenErrorMessageModal(false)}} message={errorMessage}/>
                            <ViewPatientDetailsModal isOpen={canOpenViewPatientDetailModal} patient={selectedPatientDetails} onClose={()=>{setCanOpenViewPatientDetailModal(false)}}/>
                            {isLoading && <Wait/>}
                            <ConfirmationModal isOpen={canOpenConfirmActionModal} onClose={() => setCanOpenConfirmActionModal(false)} onConfirm={async () => await deletePatient(patientToDelete.id)} title={"Delete Patient"} message={`Are you sure you want to delete the patient ${patientToDelete.firstName + " " + patientToDelete.lastName} ?`}/>
                        </div>)
                        : (
                        <div className="flex flex-col items-center justify-center py-12 px-4 text-center mt-20">
                            <img src={noPatientImage} alt={"image"} className="w-36 h-36 rounded-lg"/>
                            <h3 className="font-bold text-3xl mt-4 mb-2 text-gray-800">No patients recorded</h3>
                            <p className="text-gray-600 mb-6 max-w-xl text-xl font-medium">There are currently no patients registered in the system</p>
                        </div>
                    )
                }
            </div>
        </CustomDashboard>
    )
}// END OF FILE: src/Pages/AdminViews/AdminPatientList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/ConsultationDetails.jsx

import { ArrowLeft, User, Stethoscope, Calendar, Weight,RulerIcon, CreditCard, Thermometer, Activity, Heart,  Pill, FileText,  Printer } from 'lucide-react';
import {useNavigate} from "react-router-dom";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {adminNavLink} from "./adminNavLink.js";
import {AdminNavBar} from "./AdminNavBar.jsx";
import {FaHistory, FaPills} from "react-icons/fa";
import {BsExclamationTriangle} from "react-icons/bs";
import {MdLocalHospital} from "react-icons/md";
import {IoMedkit} from "react-icons/io5";
import {GiStethoscope} from "react-icons/gi";



const consultationData = {
    id: 1,
    patientName: "Jean Dupont",
    patientAge: 45,
    doctorName: "Dr. Marie Claire",
    date: "2024-01-28",
    time: "09:00",
    status: "Finished",
    price: 25000,
    parameters: {
        temperature: 37.2,
        bloodPressure: "120/80",
        heartRate: 72,
        respiratoryRate: 16,
        weight: 70,
        height: 1.89,
    },
    diagnosis: "Grippe saisonnière",
    prescriptions: [
        { medication: "Paracétamol", dosage: "1000mg", frequency: "3 fois par jour", duration: "5 jours" },
        { medication: "Ibuprofène", dosage: "400mg", frequency: "2 fois par jour", duration: "3 jours" }
    ],
    notes: "Le patient présente des symptômes typiques de la grippe. Repos recommandé pendant 3-5 jours. Suivi téléphonique dans une semaine si les symptômes persistent."
};



export function ConsultationDetails() {
    const navigate = useNavigate();
    return (

        <CustomDashboard linkList={adminNavLink} requiredRole={"Admin"}>
            <AdminNavBar/>
            <div className="flex flex-col min-h-screen p-4 ">
                <div className="bg-gradient-to-r from-primary-end to-primary-start rounded-lg p-6 text-white mb-5">
                    <h1 className="text-3xl font-bold mb-2">Consultation of NGOUPAYE Thierry - 2025/06/23</h1>
                    <p className="opacity-90 font-semibold text-md">
                        This summary details the consultation of Mr NGOUPAYE Thierry with Dr. Tchassi Daniel, including the diagnosis established, the examinations performed and the treatment prescribed.
                    </p>
                </div>
                <div className="bg-gray-100 shadow-md rounded-lg mb-5 p-4 ">
                    <div className="flex justify-between items-center ">
                        <div className="flex justify-start">
                            <button onClick={() => navigate(-1)}
                                    className="text-secondary text-xl hover:text-primary-end transition-all duration-300 font-bold flex items-center">
                                <ArrowLeft/>
                                Back To Consultation List
                            </button>
                        </div>
                        <div className="flex items-center">
                            <button
                                onClick={()=>{alert("implementing print function")}}
                                className="bg-secondary font-bold duration-300  text-white px-4 py-2 rounded-md hover:bg-primary-end hover:text-white transition-all mr-2">
                                <Printer size={20} className="inline mr-2"/>
                                Print
                            </button>
                        </div>
                    </div>
                </div>
                <div className="flex-1 bg-gray-100 rounded-lg">
                    <div className="bg-white shadow overflow-hidden sm:rounded-lg">
                        <div className="border-t border-gray-200 px-4 py-5 sm:px-6">
                            <div className="grid  gap-x-4 gap-y-8 grid-cols-2">
                                <div className="col-span-1">
                                    <p className="text-xl font-bold ">Patient</p>
                                    <div className="mt-1 text-md text-gray-900 flex items-center">
                                        <User className="mr-2 h-8 w-8 text-gray-600"/>
                                        {consultationData.patientName}
                                    </div>
                                </div>
                                <div className="col-span-1">
                                    <p className="text-md font-bold">Doctor</p>
                                    <div className="mt-1 text-md text-gray-900 flex items-center">
                                        <Stethoscope className="mr-2 h-8 w-8 text-gray-600"/>
                                        {consultationData.doctorName}
                                    </div>
                                </div>
                                <div className="col-span-1">
                                    <p className="text-md font-bold">Date and Time</p>
                                    <div className="mt-1 text-md text-gray-900 flex items-center">
                                        <Calendar className="mr-2 h-8 w-8 text-gray-600"/>
                                        {new Date(consultationData.date).toLocaleDateString('en-En', {year: 'numeric', month: 'long', day: 'numeric'})} At {consultationData.time}
                                    </div>
                                </div>
                                <div className="col-span-1">
                                    <p className="text-md font-bold ">Status</p>
                                    <div className="mt-1 text-md text-gray-900">
                                        <span
                                            className={`px-4 py-1 text-sm  font-bold rounded-full ${consultationData.status === 'Finished' ? 'bg-green-200 text-green-800' : consultationData.status === 'Pending' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'}`}>
                                            {consultationData.status}
                                         </span>
                                    </div>
                                </div>
                                <div className="col-span-2">
                                    <p className="text-md font-bold ">Price</p>
                                    <div className="mt-1 text-md text-blue-500 font-bold flex items-center">
                                        <CreditCard className="mr-2 h-8 w-8 text-gray-400"/>
                                        {consultationData.price + " FCFA"}
                                    </div>
                                </div>

                                <div className="col-span-2">
                                    <div className="flex gap-2 mb-2 mt-4">
                                        <IoMedkit className="w-7 h-7"/>
                                        <p className="text-md font-bold mt-1">Patient's Parameters</p>
                                    </div>
                                    <div className="mt-1 text-sm text-gray-900">
                                        <div className="grid gap-4 grid-cols-4">
                                            <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                                                <Weight className="w-7 h-7 text-primary-end mr-2"/>
                                                <div>
                                                    <p className="text-sm text-gray-600 font-semibold">Weight</p>
                                                    <p className="text-xl font-semibold">{consultationData.parameters.weight} Kg</p>
                                                </div>
                                            </div>

                                            <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                                                <RulerIcon className="w-7 h-7 text-primary-end mr-2"/>
                                                <div>
                                                    <p className="text-sm text-gray-600 font-semibold">Height</p>
                                                    <p className="text-xl font-semibold">{consultationData.parameters.height} m^2</p>
                                                </div>
                                            </div>

                                            <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                                                <Thermometer className="w-7 h-7 text-primary-end mr-2"/>
                                                <div>
                                                    <p className="text-sm text-gray-600 font-semibold">Temperature</p>
                                                    <p className="text-xl font-semibold">{consultationData.parameters.temperature}°C</p>
                                                </div>
                                            </div>
                                            <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                                                <Activity className="text-xl w-7 h-7 text-primary-end mr-2"/>
                                                <div>
                                                    <p className="text-sm text-gray-600 font-semibold">Blood
                                                        Pressure</p>
                                                    <p className="text-xl font-semibold">{consultationData.parameters.bloodPressure} mmHg</p>
                                                </div>
                                            </div>
                                            <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                                                <Heart className="w-7 h-7 text-primary-end mr-2"/>
                                                <div>
                                                    <p className="text-sm text-gray-600 font-semibold">Heart Rate</p>
                                                    <p className="text-xl font-semibold">{consultationData.parameters.heartRate} bpm</p>
                                                </div>
                                            </div>
                                            <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                                                <BsExclamationTriangle className="w-7 h-7 text-primary-end mr-2"/>
                                                <div>
                                                    <p className="text-sm text-gray-600 font-semibold">Allergies</p>
                                                    <p className="text-xl font-semibold">{"Poussiere"}</p>
                                                </div>
                                            </div>
                                            <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                                                <FaPills className="w-7 h-7 text-primary-end mr-2"/>
                                                <div>
                                                    <p className="text-sm text-gray-600 font-semibold">Current
                                                        Medications</p>
                                                    <p className="text-xl font-semibold">{"Ventoline"}</p>
                                                </div>
                                            </div>
                                            <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                                                <FaHistory className="w-7 h-7 text-primary-end mr-2"/>
                                                <div>
                                                    <p className="text-sm text-gray-600 font-semibold">Family Medical
                                                        History</p>
                                                    <p className="text-xl font-semibold">{"Asthma"}</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div className="col-span-2 mt-3">
                                    <div className="flex gap-2">
                                        <Stethoscope className="w-7 h-7 mb-1"/>
                                        <p className="text-md font-bold mt-1">Diagnostic</p>

                                    </div>
                                    <div className="text-md text-gray-900 bg-gray-100 p-3 rounded-lg">
                                        {consultationData.diagnosis}
                                    </div>
                                </div>

                                <div className="col-span-2 mt-3">
                                    <div className="flex gap-2">
                                        <FileText className="w-7 h-7 mb-1"/>
                                        <p className="text-md font-bold ">Doctor Notes</p>
                                    </div>
                                    <div className="text-md text-gray-900 bg-gray-100 p-4 rounded-lg">
                                        {consultationData.notes}
                                    </div>
                                </div>

                                <div className="col-span-2">
                                    <div className="flex gap-2">
                                        <FaPills className="w-7 h-7 mb-1"/>
                                        <p className="text-md font-bold ">Prescriptions</p>
                                    </div>
                                    <div className="mt-1 text-sm text-gray-900">
                                        <ul className="border border-gray-200 rounded-md divide-y divide-gray-200">
                                            {consultationData.prescriptions.map((prescription, index) => (
                                                <li key={index}
                                                    className="pl-3 pr-4 py-3 flex items-center justify-between text-sm">
                                                    <div className="w-0 flex-1 flex items-center">
                                                        <Pill className="flex-shrink-0 h-5 w-5 text-[#4DB6AC]"
                                                              aria-hidden="true"/>
                                                        <span className="ml-2 flex-1 w-0 truncate">
                                                            {prescription.medication} - {prescription.dosage}, {prescription.frequency} pendant {prescription.duration}
                                                        </span>
                                                    </div>
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                </div>

                                <div className="col-span-2">
                                    <div className="flex gap-2">
                                        <GiStethoscope className="w-7 h-7 mb-1"/>
                                        <p className="text-md font-bold mt-1 ">Exams</p>
                                    </div>
                                    <div className="mt-1 text-sm text-gray-900">
                                        <ul className="border border-gray-200 rounded-md divide-y divide-gray-200">
                                            {consultationData.prescriptions.map((prescription, index) => (
                                                <li key={index}
                                                    className="pl-3 pr-4 py-3 flex items-center justify-between text-sm">
                                                    <div className="w-0 flex-1 flex items-center">
                                                        <MdLocalHospital
                                                            className="flex-shrink-0 h-5 w-5 text-[#4DB6AC]"
                                                            aria-hidden="true"/>
                                                        <span className="ml-2 flex-1 w-0 truncate">
                                                            {prescription.medication} - {prescription.dosage}, {prescription.frequency} pendant {prescription.duration}
                                                        </span>
                                                    </div>
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </CustomDashboard>
    );
}

// END OF FILE: src/Pages/AdminViews/ConsultationDetails.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/EditDrugInfosModal.jsx

import {useEffect, useState} from "react";
import PropTypes from "prop-types";
import axiosInstance from "../../Utils/axiosInstance.js";


export function EditDrugInfosModal ({ isOpen, onClose, setCanOpenSuccessModal, setSuccessMessage, setIsLoading, drugData }) {
    EditDrugInfosModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        setCanOpenSuccessModal: PropTypes.func.isRequired,
        setSuccessMessage: PropTypes.func.isRequired,
        setIsLoading: PropTypes.func.isRequired,
        drugData: PropTypes.object.isRequired
    };


    const [formData, setFormData] = useState({
        quantity: 0,
        name: '',
        status: '',
        price: 0.0,
        expiryDate: '',
        description: '',
    

    });
    const [error, setError] = useState("");
    const [checkedFields, setCheckedFields] = useState({
        quantity: false,
        name: false,
        status: false,
        price: false,
        expiryDate: false,
        description: false,
        
    });

    useEffect(() => {
        if (drugData) {
            setFormData(drugData);
        }
    }, [drugData]);



    function handleChange(e) {
        const { name, value } = e.target;
        if (name === 'expiryDate') {
            const date = new Date(value).toISOString();
            setFormData(prevData => ({ ...prevData, [name]: date }));
        } else {
            setFormData(prevData => ({ ...prevData, [name]: value }));
        }
    }


    function handleCheckboxChange(e) {
        const { name, checked } = e.target;
        setCheckedFields(prev => ({ ...prev, [name]: checked }));
    }

    async function handleSubmit(e) {
        e.preventDefault();
        setIsLoading(true);
            const updatedData = Object.keys(checkedFields).reduce((acc, key) => {
                if (checkedFields[key]) {
                    acc[key] = formData[key];
                }
                return acc;
            }, {});

            try {
                const response = await axiosInstance.patch(`/medicament/${drugData.id}/`, updatedData);
                if (response.status === 200) {
                    setIsLoading(false);
                    setSuccessMessage(`${drugData.name} 's information has been updated successfully!`);
                    setCanOpenSuccessModal(true);
                    onClose();
                }
            } catch (error) {
                setIsLoading(false);
                setSuccessMessage("");
                setCanOpenSuccessModal(false);
                setError("Something went wrong, please try again later!");
                console.log(error);
            }
        setIsLoading(false);
    }

    function applyFormStyle() {
        return "w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-2 focus:border-primary-end";
    }


    function applyCheckboxStyle() {
        return "form-checkbox h-3 w-3 mt-4 text-primary-end";
    }


    function formatDateForInput(isoDate){
        try {
            const date = new Date(isoDate);
            return date.toISOString().slice(0, 16);
        } catch (error) {
            console.error( error);
            return '';
        }
    }


    if (!isOpen) return null;

return (
    <>
            <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
                <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
                    <div className="bg-gradient-to-r from-primary-end to-primary-start px-6 py-4 rounded-t-lg flex-col flex justify-center items-center">
                        <h3 className="text-4xl font-bold text-white">Edit Drug Information</h3>
                        <div className="flex mt-3">
                            <p className="text-white font-semibold ml-3 italic">(Please check the fields you want to modify)</p>
                        </div>
                    </div>
                    {error && <p className="text-red-500 font-bold text-md ml-4">{error}</p>}
                    <form onSubmit={handleSubmit} className="p-4 space-y-6">
                        <div className="flex space-x-3">
                            <div className="w-2/3 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="Name"
                                    name="name"
                                    checked={checkedFields.name}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="Name"
                                           className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                                    <input
                                        type="text"
                                        id="name"
                                        name="name"
                                        placeholder="Enter drug's name"
                                        value={formData.name}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.name}
                                        disabled={!checkedFields.name}
                                    />
                                </div>
                            </div>


                            <div className="w-2/3 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="quantity"
                                    name="quantity"
                                    checked={checkedFields.quantity}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="quantity"
                                           className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                                    <input
                                        type="number"
                                        id="quantity"
                                        name="quantity"
                                        placeholder="Enter drug's quantity"
                                        value={formData.quantity}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.quantity}
                                        disabled={!checkedFields.quantity}
                                    />
                                </div>
                            </div>
                        </div>


                           <div className="grid grid-cols-2 ">
                                <div className="w-2/3 flex items-center space-x-2">
                                    <input
                                        type="checkbox"
                                        id="status"
                                        name="status"
                                        checked={checkedFields.status}
                                        onChange={handleCheckboxChange}
                                        className={applyCheckboxStyle()}
                                    />
                                    <div className="flex-1">
                                        <label htmlFor="lastName"
                                            className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                                        <input
                                            type="text"
                                            id="status"
                                            name="status"
                                            placeholder="Enter drug's status"
                                            value={formData.status}
                                            onChange={handleChange}
                                            className={applyFormStyle()}
                                            required={checkedFields.status}
                                            disabled={!checkedFields.status}
                                        />
                                    </div>
                                </div>

                                <div className="w-2/3 flex items-center space-x-2">
                                    <input
                                        type="checkbox"
                                        id="price"
                                        name="price"
                                        checked={checkedFields.price}
                                        onChange={handleCheckboxChange}
                                        className={applyCheckboxStyle()}
                                    />
                                    <div className="flex-1">
                                        <label htmlFor="price"
                                            className="block text-sm font-medium text-gray-700 mb-1">Price</label>
                                        <input
                                            type="number"
                                            id="price"
                                            name="price"
                                            placeholder="Enter drug's price"
                                            value={formData.price}
                                            onChange={handleChange}
                                            className={applyFormStyle()}
                                            required={checkedFields.price}
                                            disabled={!checkedFields.price}
                                        />
                                    </div>
                                </div>
                            </div>


                            <div className="grid grid-cols-2 ">
                                <div className="w-full flex items-center space-x-2">
                                    <input
                                        type="checkbox"
                                        id="expiryDate"
                                        name="expiryDate"
                                        checked={checkedFields.expiryDate}
                                        onChange={handleCheckboxChange}
                                        className={applyCheckboxStyle()}
                                    />
                                    <div className="flex-1">
                                        <label htmlFor="lastName"
                                            className="block text-sm font-medium text-gray-700 mb-1">Expiry Date</label>
                                        <input
                                            type="text"
                                            id="expiryDate"
                                            name="expiryDate"
                                            placeholder="Enter drug's expiryDate"
                                            value={formatDateForInput(formData.expiryDate)}
                                            onChange={handleChange}
                                            className={applyFormStyle()}
                                            required={formatDateForInput(checkedFields.expiryDate)}
                                            disabled={!checkedFields.expiryDate}
                                        />
                                    </div>
                                </div>
                            </div>
                            <div className="w-2/3 flex items-center space-x-2">
                                    <input
                                        type="checkbox"
                                        id="description"
                                        name="description"
                                        checked={checkedFields.description}
                                        onChange={handleCheckboxChange}
                                        className={applyCheckboxStyle()}
                                    />
                                    <div className="flex-1">
                                        <label htmlFor="description"
                                            className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                                        <input
                                            type="text"
                                            id="description"
                                            name="description"
                                            placeholder="Enter drug's description"
                                            value={formData.description}
                                            onChange={handleChange}
                                            className={applyFormStyle()}
                                            required={checkedFields.description}
                                            disabled={!checkedFields.description}
                                        />
                                    </div>
                                </div>
                            


                        <div className="px-6 py-1 flex justify-center space-x-6">
                            <button
                                type="submit"
                                className="px-4 py-2 bg-primary-end hover:text-xl text-md text-white rounded-lg font-bold transition-all duration-300"
                            >
                                Update
                            </button>
                            <button
                                type="button"
                                onClick={() => {
                                    setError(""),
                                    onClose()
                                }}
                                className="px-4 py-2 border bg-red-400 text-md hover:text-xl hover:bg-red-500 text-white font-bold rounded-lg transition-all duration-300"
                            >
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>
    </>
)
}// END OF FILE: src/Pages/AdminViews/EditDrugInfosModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/EditExamInfosModal.jsx

import {useEffect, useState} from "react";
import PropTypes from "prop-types";
import axiosInstance from "../../Utils/axiosInstance.js";


export function EditExamInfosModal ({ isOpen, onClose, setCanOpenSuccessModal, setSuccessMessage, setIsLoading, examData }) {
    EditExamInfosModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        setCanOpenSuccessModal: PropTypes.func.isRequired,
        setSuccessMessage: PropTypes.func.isRequired,
        setIsLoading: PropTypes.func.isRequired,
        examData: PropTypes.object.isRequired
    };


    const [formData, setFormData] = useState({
        name: '',
        cost: 0.0,
        description: '',
    });

    const [error, setError] = useState("");
    const [checkedFields, setCheckedFields] = useState({
        
        name: false,
        cost: false,
        description: false,
        
    });

    useEffect(() => {
        if (examData) {
            setFormData(examData);
        }
    }, [examData]);



    function handleChange(e) {
        const { name, value } = e.target;
        
            setFormData(prevData => ({ ...prevData, [name]: value }));
        
    }


    function handleCheckboxChange(e) {
        const { name, checked } = e.target;
        setCheckedFields(prev => ({ ...prev, [name]: checked }));
    }

    async function handleSubmit(e) {
        e.preventDefault();
        setIsLoading(true);
            const updatedData = Object.keys(checkedFields).reduce((acc, key) => {
                if (checkedFields[key]) {
                    acc[key] = formData[key];
                }
                return acc;
            }, {});

            try {
                const response = await axiosInstance.patch(`/exam/${examData.id}/`, updatedData);
                if (response.status === 200) {
                    setIsLoading(false);
                    setSuccessMessage(`${examData.name} 's information has been updated successfully!`);
                    setCanOpenSuccessModal(true);
                    onClose();
                }
            } catch (error) {
                setIsLoading(false);
                setSuccessMessage("");
                setCanOpenSuccessModal(false);
                setError("Something went wrong, please try again later!");
                console.log(error);
            }
        setIsLoading(false);
    }

    function applyFormStyle() {
        return "w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-2 focus:border-primary-end";
    }


    function applyCheckboxStyle() {
        return "form-checkbox h-3 w-3 mt-4 text-primary-end";
    }


    if (!isOpen) return null;

return (
    <>
            <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
                <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
                    <div className="bg-gradient-to-r from-primary-end to-primary-start px-6 py-4 rounded-t-lg flex-col flex justify-center items-center">
                        <h3 className="text-4xl font-bold text-white">Edit Exam Information</h3>
                        <div className="flex mt-3">
                            <p className="text-white font-semibold ml-3 italic">(Please check the fields you want to modify)</p>
                        </div>
                    </div>
                    {error && <p className="text-red-500 font-bold text-md ml-4">{error}</p>}
                    <form onSubmit={handleSubmit} className="p-4 space-y-6">
                        <div className="flex space-x-3">
                            <div className="w-2/3 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="Name"
                                    name="name"
                                    checked={checkedFields.name}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="Name"
                                           className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                                    <input
                                        type="text"
                                        id="name"
                                        name="name"
                                        placeholder="Enter exam's name"
                                        value={formData.name}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.name}
                                        disabled={!checkedFields.name}
                                    />
                                </div>
                            </div>

                                <div className="w-2/3 flex items-center space-x-2">
                                    <input
                                        type="checkbox"
                                        id="cost"
                                        name="cost"
                                        checked={checkedFields.cost}
                                        onChange={handleCheckboxChange}
                                        className={applyCheckboxStyle()}
                                    />
                                    <div className="flex-1">
                                        <label htmlFor="cost"
                                            className="block text-sm font-medium text-gray-700 mb-1">Cost</label>
                                        <input
                                            type="number"
                                            id="cost"
                                            name="cost"
                                            placeholder="Enter exam's cost"
                                            value={formData.cost}
                                            onChange={handleChange}
                                            className={applyFormStyle()}
                                            required={checkedFields.cost}
                                            disabled={!checkedFields.cost}
                                        />
                                    </div>
                                </div>
                        </div>
                                <div className="w-2/3 flex items-center space-x-2">
                                        <input
                                            type="checkbox"
                                            id="description"
                                            name="description"
                                            checked={checkedFields.description}
                                            onChange={handleCheckboxChange}
                                            className={applyCheckboxStyle()}
                                        />
                                        <div className="flex-1">
                                            <label htmlFor="description"
                                                className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                                            <input
                                                type="text"
                                                id="description"
                                                name="description"
                                                placeholder="Enter exam's description"
                                                value={formData.description}
                                                onChange={handleChange}
                                                className={applyFormStyle()}
                                                required={checkedFields.description}
                                                disabled={!checkedFields.description}
                                            />
                                        </div>
                                    </div>
                            


                        <div className="px-6 py-1 flex justify-center space-x-6">
                            <button
                                type="submit"
                                className="px-4 py-2 bg-primary-end hover:text-xl text-md text-white rounded-lg font-bold transition-all duration-300"
                            >
                                Update
                            </button>
                            <button
                                type="button"
                                onClick={() => {
                                    setError(""),
                                    onClose()
                                }}
                                className="px-4 py-2 border bg-red-400 text-md hover:text-xl hover:bg-red-500 text-white font-bold rounded-lg transition-all duration-300"
                            >
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>
    </>
)
}// END OF FILE: src/Pages/AdminViews/EditExamInfosModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/EditMedicalStaffInfosModal.jsx

import {useEffect, useState} from "react";
import PropTypes from "prop-types";
import axiosInstance from "../../Utils/axiosInstance.js";

export function EditMedicalStaffInfosModal({ isOpen, onClose, setCanOpenSuccessModal, setSuccessMessage, setIsLoading, medicalStaffData }) {

    EditMedicalStaffInfosModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        setCanOpenSuccessModal: PropTypes.func.isRequired,
        setSuccessMessage: PropTypes.func.isRequired,
        setIsLoading: PropTypes.func.isRequired,
        medicalStaffData: PropTypes.object.isRequired
    };


    const [formData, setFormData] = useState({
        first_name: '',
        last_name: '',
        date_joined: '',
        gender: '',
        email: '',
        cniNumber: '',
        username:'',
        isActive:'',
        role: '',
        password: '',
    });
    const [error, setError] = useState("");
    const [checkedFields, setCheckedFields] = useState({
        first_name: false,
        last_name: false,
        date_joined: false,
        gender: false,
        username: false,
        cniNumber: false,
        isActive: false,
        email: false,
        role: false,
        password: false,
    });



    useEffect(() => {
        if (medicalStaffData) {
            setFormData(medicalStaffData);
        }
    }, [medicalStaffData]);



    function handleChange(e) {
        const { name, value } = e.target;
        if (name === 'date_joined') {
            const date = new Date(value).toISOString();
            setFormData(prevData => ({ ...prevData, [name]: date }));
        } else {
            setFormData(prevData => ({ ...prevData, [name]: value }));
        }
    }


    function handleCheckboxChange(e) {
        const { name, checked } = e.target;
        setCheckedFields(prev => ({ ...prev, [name]: checked }));
    }


    async function handleSubmit(e) {
        e.preventDefault();
        setIsLoading(true);
            const updatedData = Object.keys(checkedFields).reduce((acc, key) => {
                if (checkedFields[key]) {
                    acc[key] = formData[key];
                }
                return acc;
            }, {});

            try {
                const response = await axiosInstance.patch(`/medical-staff/${medicalStaffData.id}/`, updatedData);
                if (response.status === 200) {
                    setIsLoading(false);
                    setSuccessMessage(`${medicalStaffData.role + " " + medicalStaffData.username} 's information has been updated successfully!`);
                    setCanOpenSuccessModal(true);
                    onClose();
                }
            } catch (error) {
                setIsLoading(false);
                setSuccessMessage("");
                setCanOpenSuccessModal(false);
                setError("Something went wrong, please try again later!");
                console.log(error);
            }
        setIsLoading(false);
    }

    function applyFormStyle() {
        return "w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-2 focus:border-primary-end";
    }


    function applyCheckboxStyle() {
        return "form-checkbox h-3 w-3 mt-4 text-primary-end";
    }


    function formatDateForInput(isoDate){
        try {
            const date = new Date(isoDate);
            return date.toISOString().slice(0, 16);
        } catch (error) {
            console.error( error);
            return '';
        }
    }


    if (!isOpen) return null;

    return (
        <>
            <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
                <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
                    <div className="bg-gradient-to-r from-primary-end to-primary-start px-6 py-4 rounded-t-lg flex-col flex justify-center items-center">
                        <h3 className="text-4xl font-bold text-white">Edit Medical Staff Information</h3>
                        <div className="flex mt-3">
                            <p className="text-white font-semibold ml-3 italic">(Please check the fields you want to modify)</p>
                        </div>
                    </div>
                    {error && <p className="text-red-500 font-bold text-md ml-4">{error}</p>}
                    <form onSubmit={handleSubmit} className="p-4 space-y-6">
                        <div className="flex space-x-3">
                            <div className="w-full flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkFirstName"
                                    name="first_name"
                                    checked={checkedFields.first_name}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="firstName"
                                           className="block text-sm font-medium text-gray-700 mb-1">Firstname</label>
                                    <input
                                        type="text"
                                        id="first_name"
                                        name="first_name"
                                        placeholder="Enter medical staff's first name"
                                        value={formData.first_name}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.first_name}
                                        disabled={!checkedFields.first_name}
                                    />
                                </div>
                            </div>


                            <div className="w-full flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkLastName"
                                    name="last_name"
                                    checked={checkedFields.last_name}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="lastName"
                                           className="block text-sm font-medium text-gray-700 mb-1">Lastname</label>
                                    <input
                                        type="text"
                                        id="last_name"
                                        name="last_name"
                                        placeholder="Enter medical staff's last name"
                                        value={formData.last_name}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.last_name}
                                        disabled={!checkedFields.last_name}
                                    />
                                </div>
                            </div>
                        </div>


                        <div className="flex space-x-2">
                            <div className="w-1/3 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkLastName"
                                    name="username"
                                    checked={checkedFields.username}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="lastName"
                                           className="block text-sm font-medium text-gray-700 mb-1">Username</label>
                                    <input
                                        type="text"
                                        id="username"
                                        name="username"
                                        placeholder="Enter medical staff's username"
                                        value={formData.username}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.username}
                                        disabled={!checkedFields.username}
                                    />
                                </div>
                            </div>

                            <div className="w-1/3 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkLastName"
                                    name="password"
                                    checked={checkedFields.password}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="lastName"
                                           className="block text-sm font-medium text-gray-700 mb-1">Password</label>
                                    <input
                                        type="password"
                                        id="password"
                                        name="password"
                                        placeholder="Enter medical staff's password"
                                        value={formData.password}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.password}
                                        disabled={!checkedFields.password}
                                    />
                                </div>
                            </div>


                            <div className=" w-1/3 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkGender"
                                    name="gender"
                                    checked={checkedFields.gender}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="gender"
                                           className="block text-sm font-medium text-gray-700 mb-1">Gender</label>
                                    <select
                                        id="gender"
                                        name="gender"
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.gender}
                                        disabled={!checkedFields.gender}
                                    >
                                        <option value="Male">Male</option>
                                        <option value="Female">Female</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div className="grid grid-cols-4 space-x-2">
                            <div className="col-span-2 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkAddress"
                                    name="date_joined"
                                    checked={checkedFields.date_joined}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="address"
                                           className="block text-sm font-medium text-gray-700 mb-1">Registered
                                        at</label>
                                    <input
                                        type="datetime-local"
                                        id="date_joined"
                                        name="date_joined"
                                        value={formatDateForInput(formData.date_joined)}
                                        max={new Date().toISOString().slice(0, 16)}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.date_joined}
                                        disabled={!checkedFields.date_joined}
                                    />
                                </div>
                            </div>

                            <div className="col-span-2 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkEmail"
                                    name="email"
                                    checked={checkedFields.email}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="email"
                                           className="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                                    <input
                                        type="email"
                                        id="email"
                                        name="email"
                                        value={formData.email}
                                        placeholder="Enter patient's email"
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.email}
                                        disabled={!checkedFields.email}
                                    />
                                </div>
                            </div>
                        </div>


                        <div className="grid grid-cols-3 space-x-2">

                            <div className="col-span-2 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkCniNumber"
                                    name="cniNumber"
                                    checked={checkedFields.cniNumber}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="cniNumber" className="block text-sm font-medium text-gray-700 mb-1">Identity
                                        Card Number</label>
                                    <input
                                        type="text"
                                        id="cniNumber"
                                        name="cniNumber"
                                        value={formData.cniNumber}
                                        placeholder="Enter patient's identity card number"
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.cniNumber}
                                        disabled={!checkedFields.cniNumber}
                                    />
                                </div>
                            </div>


                            <div className="col-span-1 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkGender"
                                    name="role"
                                    checked={checkedFields.role}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="gender"
                                           className="block text-sm font-medium text-gray-700 mb-1">Profession</label>
                                    <select
                                        id="role"
                                        name="role"
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.role}
                                        disabled={!checkedFields.role}
                                    >
                                        <option value={formData.role}>{formData.role}</option>
                                        <option value="Pharmacist">Pharmacist</option>
                                        <option value="Receptionist">Receptionist</option>
                                        <option value="Doctor">Doctor</option>
                                        <option value="Laboratory Assistant">Laboratory Assistant</option>
                                        <option value="Accountant">Accountant</option>
                                        <option value="Nurse">Nurse</option>
                                        <option value="Dentist">Dentist</option>
                                    </select>
                                </div>
                            </div>
                        </div>


                        <div className="px-6 py-1 flex justify-center space-x-6">
                            <button
                                type="submit"
                                className="px-4 py-2 bg-primary-end hover:text-xl text-md text-white rounded-lg font-bold transition-all duration-300"
                            >
                                Update
                            </button>
                            <button
                                type="button"
                                onClick={() => {
                                    setError(""),
                                    onClose()
                                }}
                                className="px-4 py-2 border bg-red-400 text-md hover:text-xl hover:bg-red-500 text-white font-bold rounded-lg transition-all duration-300"
                            >
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </>
    );
}



// END OF FILE: src/Pages/AdminViews/EditMedicalStaffInfosModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/AdminViews/ViewMedicalStaffDetailsModal.jsx

import PropTypes from "prop-types";
import userIcon from "../../assets/userIcon.png";
import { Mail, MapPin, Calendar, CreditCard, User } from 'lucide-react';
import { format } from 'date-fns';
import { enUS } from 'date-fns/locale';
import {FaUser} from "react-icons/fa";
import {BiHistory} from "react-icons/bi";


export function ViewMedicalStaffDetailsModal({isOpen, medicalStaff, onClose})
{
    ViewMedicalStaffDetailsModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        medicalStaff: PropTypes.object.isRequired,
        onClose: PropTypes.func.isRequired
    };

    function formatDate (date) {
        return format(new Date(date), "EEEE, d MMMM yyyy 'at' h:mm a", { locale: enUS });
    }



    console.log(medicalStaff);

    if(!isOpen) return null;


    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
            <div className="bg-white rounded-lg shadow-xl w-[700px] ">
                <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                    <div className="flex flex-row">
                        {/* Left Section - Avatar and Name */}
                        <div
                            className="bg-gradient-to-br from-blue-50 to-blue-100 p-6 flex flex-col items-center text-center w-1/3">
                            <div className="w-40 h-40 rounded-full bg-sky-200 overflow-hidden mb-4">
                                <img
                                    src={userIcon}
                                    alt="Profile avatar"
                                    className="w-full h-full object-cover"
                                />
                            </div>
                            <h1 className="text-2xl font-bold text-navy-900 mb-1">{medicalStaff?.last_name}</h1>
                            <h2 className="text-xl text-navy-700 mb-4">{medicalStaff?.first_name}</h2>
                            <div className="flex items-center text-gray-600">
                                <User className="w-8 h-8 mr-2"/>
                                <p className="text-xl font-bold">{medicalStaff?.gender}</p>
                            </div>
                        </div>

                        {/* Right Section - Personal Information */}
                        <div className="p-6 md:w-2/3">
                            <div className="space-y-4">

                                <div className="flex items-start">
                                    <FaUser className="w-7 h-7 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Username</p>
                                        <p className="text-gray-700 font-bold mt-1">{medicalStaff?.username}</p>
                                    </div>
                                </div>


                                <div className="flex items-start">
                                    <MapPin className="w-7 h-7 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-md text-gray-500 font-medium">{medicalStaff?.role === "Admin" ? "Role" : "Profession"}</p>
                                        <p className="text-gray-700 font-bold mt-1">{medicalStaff.role === "Labtech" ? "Laboratory Assistant" : medicalStaff.role}</p>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <Mail className="w-7 h-7 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Email</p>
                                        <p className="text-gray-700 font-bold mt-1">{medicalStaff?.email}</p>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <CreditCard className="w-7 h-7 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">CNI Number</p>
                                        <p className="text-gray-700 font-bold mt-1">{medicalStaff?.cniNumber}</p>
                                    </div>
                                </div>


                                <div className="flex items-start">
                                    <Calendar className="w-7 h-7 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Date joined</p>
                                        <p className="text-gray-700 font-bold mt-1">{formatDate(medicalStaff?.date_joined)}</p>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <BiHistory className="w-8 h-8 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Last login</p>
                                        <p className="text-gray-700 font-bold mt-1 mb-5">{medicalStaff?.last_login ? formatDate(medicalStaff?.last_login) : "no connection to the application"}</p>
                                    </div>
                                </div>
                            </div>

                            <div className="flex justify-end">
                                <button
                                    onClick={onClose}
                                    className="px-4 py-1 bg-primary-end text-md hover:text-xl font-bold text-md text-white rounded-md transition-all duration-300"
                                >
                                    Close
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}// END OF FILE: src/Pages/AdminViews/ViewMedicalStaffDetailsModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Authentication/ForgottenPassword.jsx

"use client";
import { useState } from 'react';
import { ArrowLeft, Send, Lock } from 'lucide-react';
import { Link } from 'react-router-dom';
import axiosInstance from "../../Utils/axiosInstance.js";
import loginBackground from "../../assets/logIn.png";
import axios from "axios";

export function ForgottenPassword() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [isSubmitted, setIsSubmitted] = useState(false);
    const [error, setError] = useState("");
    const [loading, setLoading] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (password !== confirmPassword) {
            setError("Les mots de passe ne correspondent pas.");
            return;
        }

        // Vérification si le mot de passe est trop commun
        const commonPasswords = [
            "password", "123456", "12345678", "qwerty", "abc123",
            "monkey", "letmein", "111111", "1234", "12345", "dragon"
        ];
        if (commonPasswords.includes(password.toLowerCase())) {
            setError("Ce mot de passe est trop commun, veuillez en choisir un autre.");
            return;
        }

        setLoading(true);
        setError("");
        try {
            const response = await axios.post(
                'http://85.214.142.178:8009/api/v1/auth/reset-password/',
                {
                    email: email,
                    password: password,
                    password_confirmation: confirmPassword
                },
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );
            if (response.status === 200 || response.status === 201) {
                setIsSubmitted(true);
            }
        } catch (err) {
            console.error(err);
            setError("Erreur lors de la réinitialisation du mot de passe.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <div
            className="flex flex-col min-h-screen bg-cover bg-center"
            style={{
                backgroundImage: `url(${loginBackground})`,
                height: "100vh",
                backgroundSize: "cover",
                backgroundRepeat: "no-repeat",
            }}
        >
            <Link to="/" className="text-3xl text-white font-bold mt-6 ml-8">
                FullTang
            </Link>
            <div className="flex-1 flex items-center justify-center px-4">
                <div className="bg-white bg-opacity-95 shadow-2xl border-2 w-full max-w-5xl rounded-lg overflow-hidden flex">
                    <div className="w-1/2 p-8 bg-gradient-to-br from-primary-start to-primary-end text-white">
                        <h2 className="text-4xl font-bold mb-6">Réinitialiser votre mot de passe</h2>
                        <p className="text-lg mb-6">
                            Remplissez les champs ci-contre pour mettre à jour votre mot de passe.
                        </p>
                        <div className="mb-8">
                            <Lock className="w-20 h-20 mx-auto mb-4" />
                            <p className="text-center">
                                Sécurisez votre compte en créant un nouveau mot de passe.
                            </p>
                        </div>
                        <div className="bg-white bg-opacity-20 p-4 rounded-lg">
                            <h3 className="font-bold mb-2">Conseils:</h3>
                            <ul className="list-disc list-inside">
                                <li>Utilisez une adresse email valide</li>
                                <li>Le mot de passe doit contenir au moins 8 caractères</li>
                                <li>Ne partagez jamais votre mot de passe</li>
                            </ul>
                        </div>
                    </div>
                    <div className="w-1/2 p-8">
                        <h3 className="text-2xl font-bold mb-6 text-gray-800">Réinitialiser le Mot de Passe</h3>
                        {!isSubmitted ? (
                            <form onSubmit={handleSubmit} className="space-y-6">
                                <div>
                                    <label htmlFor="email" className="text-md font-bold block mb-2 text-gray-700">
                                        Adresse Email
                                    </label>
                                    <input
                                        id="email"
                                        type="email"
                                        placeholder="Entrez votre email"
                                        value={email}
                                        onChange={(e) => setEmail(e.target.value)}
                                        required
                                        className="w-full bg-gray-100 border border-gray-300 rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-primary-start focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label htmlFor="password" className="text-md font-bold block mb-2 text-gray-700">
                                        Nouveau Mot de Passe
                                    </label>
                                    <input
                                        id="password"
                                        type="password"
                                        placeholder="Entrez votre nouveau mot de passe"
                                        value={password}
                                        onChange={(e) => setPassword(e.target.value)}
                                        required
                                        className="w-full bg-gray-100 border border-gray-300 rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-primary-start focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label htmlFor="confirmPassword" className="text-md font-bold block mb-2 text-gray-700">
                                        Confirmer le Mot de Passe
                                    </label>
                                    <input
                                        id="confirmPassword"
                                        type="password"
                                        placeholder="Confirmez votre nouveau mot de passe"
                                        value={confirmPassword}
                                        onChange={(e) => setConfirmPassword(e.target.value)}
                                        required
                                        className="w-full bg-gray-100 border border-gray-300 rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-primary-start focus:border-transparent"
                                    />
                                </div>
                                {error && <p className="text-red-500 text-sm">{error}</p>}
                                <button
                                    type="submit"
                                    disabled={loading}
                                    className="w-full bg-gradient-to-r from-primary-start to-primary-end hover:from-primary-end hover:to-primary-start text-white font-bold py-2 px-4 rounded-md transition-all duration-300 flex items-center justify-center"
                                >
                                    {loading ? (
                                        <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white mr-2"></div>
                                    ) : (
                                        <Send className="mr-2 h-4 w-4" />
                                    )}
                                    Réinitialiser
                                </button>
                            </form>
                        ) : (
                            <div className="text-center p-6 bg-green-100 rounded-lg">
                                <p className="text-xl mb-4 text-green-800 font-bold">
                                    Mot de passe réinitialisé!
                                </p>
                                <p className="text-gray-600">
                                    Votre mot de passe a été mis à jour avec succès. Vous pouvez maintenant vous connecter.
                                </p>
                            </div>
                        )}
                        <div className="mt-6">
                            <Link
                                to="/login"
                                className="text-primary-start hover:text-primary-end transition-colors duration-300 flex items-center"
                            >
                                <ArrowLeft className="mr-2 h-4 w-4" />
                                Retour à la connexion
                            </Link>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}
// END OF FILE: src/Pages/Authentication/ForgottenPassword.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Authentication/Login.jsx

import loginBackground from "../../assets/logIn.png";
import {FaExclamation} from "react-icons/fa";
import {Link, useNavigate} from 'react-router-dom';
import {useState} from "react";
import Wait from "../Modals/wait.jsx";
import { Eye, EyeOff } from 'lucide-react';
import {AppRoutesPaths as appRouterPaths} from "../../Router/appRouterPaths.js";
import {useAuthentication} from "../../Utils/Provider.jsx";






export function LoginPage()
{


    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");
    const [loginError, setLoginError] = useState("");
    const [isLoginErrorPresent, setIsLoginErrorPresent] = useState(false);
    const [showPassword, setShowPassword] = useState(false);
    const {isLoading, setIsLoading, login} = useAuthentication();
    const navigate = useNavigate();



    const data = {
        username: username,
        password: password
    }



    const handleLogin = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        const response = await login(data);
        console.log(response);
        if (response === "Pharmacist")
        {
            navigate(appRouterPaths.pharmacyPage);
        }
        else if (response === "Doctor")
        {
            navigate(appRouterPaths.doctorPage);
        }
        else if (response === "Nurse")
        {
            navigate(appRouterPaths.nursePage)
        }
        else if (response === "Labtech")
        {
            navigate(appRouterPaths.laboratoryAssistantPage)
        }
        else if (response === "Admin")
        {
            navigate(appRouterPaths.adminHomePage)
        }
        else if (response === "Receptionist")
        {
            navigate(appRouterPaths.receptionistPage)
        }
        else if (response === "Cashier")
        {
            navigate(appRouterPaths.cashierPage)
        }
        else if (response === "Specialist")
        {
            navigate(appRouterPaths.specialistPage)
        }
        else if (response === "Accountant")
        {
            navigate(appRouterPaths.financialAccountantHome)
        }
        else if (response === "bad role")
        {
            setIsLoginErrorPresent(true);
            setLoginError("bad role")
        }
        else if (response === "No role")
        {
            setIsLoginErrorPresent(true);
            setLoginError("You do not have a specialization, contact an administrator to complete your registration for the application.")
        }
        if (response === 401)
        {
            setIsLoginErrorPresent(true);
            setLoginError("Invalid username or password, please retry!")
        }
        else if (response === 404)
        {
            setIsLoginErrorPresent(true);
            setLoginError("You're not registered in our application!")
        }
        else
        {
            setIsLoginErrorPresent(true);
            setLoginError("An error occurred, please retry later!")
        }
    }




    return (
        <>
            <div className="flex flex-col"
                 style={{
                     backgroundImage: `url(${loginBackground})`,
                     height: "100vh",
                     backgroundSize: "cover",
                     backgroundRepeat: "no-repeat",
                 }}
            >
                <p onClick={ ()=>navigate("/") } className="text-3xl text-white font-bold mt-6 ml-8 cursor-pointer">
                    FullTang
                </p>
                <div className="flex-1 flex flex-col items-center justify-center">
                    <div className="flex ml-56 mt-28 w-[1400px] h-[480px]">
                        <div className= "flex flex-col w-[620px]">
                            <p className="text-white mt-28 mb-2 font-bold text-5xl ml-4">
                                WELCOME ON FULTANG
                            </p>
                            <p className="text-justify font-bold text-md leading-10">
                                Polyclinic fultang is a hospital management application, providing care and monitoring of patients from arrival to discharge,
                                this via the platform. We first register the patient at the reception level, then follow the chain of follow-up according to his problem or his situation.
                                Polyclinic Fultang has several departments namely the dental service, the ophthalmology service, the general medicine, the laboratory,
                                as well as a pharmacy.
                            </p>
                            <p className="italic mt-4 text-blue-400 text-xl ">
                                Note: this page is the hospital staff login page
                            </p>
                            <button onClick={()=>navigate(appRouterPaths.helpCenterPage)} className="w-44 h-14  py-2 border-secondary border-2 text-secondary rounded-lg px-1 mt-4 font-bold hover:text-white hover:bg-secondary transition-all duration-300">
                                <div className="flex justify-center items-center">
                                    <FaExclamation className="mr-1 "/>
                                    <p>Notify A problem</p>
                                </div>
                            </button>
                        </div>
                        <div className="bg-white shadow-2xl border-2 w-[550px] mt-6 ml-16 flex flex-col rounded-lg">
                            <div className="flex mb-10">
                                <p className="text-3xl font-bold mt-4 ml-4  ">Log In</p>
                                {isLoginErrorPresent && (
                                    <p className="text-red-500 text-md font-bold mt-6 ml-8 mr-2">{loginError}</p>)}

                            </div>
                            <form className="ml-4 mr-8 flex flex-col" onSubmit={handleLogin}>
                                <div>
                                    <label className="text-md font-bold">
                                        username
                                    </label>
                                    <div className="bg-gray-300 h-12 mt-2 rounded-lg mb-4">
                                        <input type="text"
                                               name="username"
                                               autoComplete="username"
                                               onChange={(e) => {setUsername(e.target.value)}}
                                               className="w-full rounded-lg h-12 ml-2 mr-2 bg-gray-300 border-none outline:none focus:border-none ring-0 focus:outline-none focus:ring-0 autofill:shadow-[inset_0_0_0px_1000px_rgb(209,213,219)]"
                                               placeholder={"Enter your username here"}/>
                                    </div>
                                </div>
                                <div className="mt-5">
                                    <label className="text-md font-bold">
                                        Password
                                    </label>
                                    <div className="bg-gray-300 h-12 mt-2 rounded-lg flex items-center relative">
                                        <input
                                            name="password"
                                            autoComplete="current-password"
                                            type={showPassword ? "text" : "password"}
                                            onChange={(e) => {setPassword(e.target.value)}}
                                            className="w-full rounded-lg h-12 ml-2 mr-10 bg-gray-300 border-none outline:none ring-0 focus:outline-none focus:ring-0"
                                            placeholder="Enter your password here"
                                        />
                                        <button
                                            type="button"
                                            onClick={() => setShowPassword(!showPassword)}
                                            className="absolute right-2 p-2 hover:bg-gray-400 rounded-full transition-all duration-300"
                                        >
                                            {showPassword ? (
                                                <EyeOff className="w-5 h-5 text-gray-600"/>
                                            ) : (
                                                <Eye className="w-5 h-5 text-gray-600"/>
                                            )}
                                        </button>
                                    </div>
                                    <Link to={appRouterPaths.forgottenPasswordPage}>
                                        <p className="text-end mt-1 text-sm text-blue-700 hover:text-secondary hover:font-bold transition-all duration-300 hover:underline">
                                            Forgotten password?
                                        </p>
                                    </Link>
                                </div>

                                {/*  <div className="flex mt-5">
                                    <input type="checkbox" id="rememberMeCheckbox" value="yes"
                                           className="mr-2 w-5 h-5 border-secondary border-2"/>
                                    <label htmlFor="maCheckbox" className="font-bold text-sm">Remember Me</label>
                                </div>*/}

                                <button type="submit"
                                        className="text-white text-2xl bg-gradient-to-r from-primary-start to-primary-end w-full h-12 rounded-lg mt-5 mb-5 font-bold">
                                    Log In
                                </button>
                            </form>
                        </div>
                    </div>
                </div>

            </div>
            {isLoading && (<Wait/>)}
        </>
    )
}// END OF FILE: src/Pages/Authentication/Login.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/Cashier.jsx

import { cashierNavLink } from "./cashierNavLink.js";
import { CashierNavBar } from "./CashierNavBar.jsx";
import { DashBoard } from "../../GlobalComponents/DashBoard.jsx";
import userIcon from "../../assets/userIcon.png";
import { useAuthentication } from "../../Utils/Provider.jsx";
import ConsultationList from "./ConsultationList.jsx";
import { useEffect, useState } from "react";
import axiosInstance from "../../Utils/axiosInstance.js";

export function Cashier() {
  const { userData } = useAuthentication();
  const [consultations, setConsultations] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [time, setTime] = useState(new Date().toLocaleTimeString());

  useEffect(() => {
    const interval = setInterval(() => {
      setTime(new Date().toLocaleTimeString());
    }, 1000); 

    return () => clearInterval(interval); 
  }, []);

  useEffect(() => {
    async function fetchConsultations() {
      setIsLoading(true);
      try {
        const response = await axiosInstance.get("/consultation/");
        setIsLoading(false);
        if (response.status === 200) {
          setConsultations(response.data.results);
        }
      } catch (error) {
        setIsLoading(false);
        console.log(error);
      }
    }
    fetchConsultations();
  }, []);

  return (
    <DashBoard linkList={cashierNavLink} requiredRole={"Cashier"}>
      <CashierNavBar />
      <div className="flex flex-col">
        <div className="ml-5 mr-5 h-[150px] bg-gradient-to-t from-primary-start to-primary-end flex rounded-lg justify-between">
          <div className="flex gap-4">
            <div className="mt-5 mb-5 ml-5 w-28 h-28 border-4 border-white rounded-full">
              <img
                src={userIcon}
                alt="user icon"
                className="h-[105px] w-[105px] mb-2"
              />
            </div>
            <div className="flex flex-col">
              <p className="text-white text-4xl font-bold mt-6">
                Welcome Back!
              </p>
              <p className="text-2xl mt-2 text-white"> {userData.username}</p>
            </div>
          </div>
          <div>
            <p className="text-white mt-28 text-xl font-bold mr-4">
              {time}
            </p>
          </div>
        </div>
        <ConsultationList consultationList={consultations} />
      </div>
    </DashBoard>
  );
}
// END OF FILE: src/Pages/Cashier/Cashier.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/CashierNavBar.jsx

import {FaCog, FaEnvelope, FaSignOutAlt} from "react-icons/fa";
import {Tooltip} from "antd";
import {useAuthentication} from "../../Utils/Provider.jsx";
import userIcon from "../../assets/userIcon.png";

export function CashierNavBar()
{

    const {logout , userData} = useAuthentication();

    const applyNavLinkBtnStyle = () => {
        return " w-12 h-10 mt-1 border-2 bg-gray-100 flex justify-center items-center rounded-xl shadow-xl hover:bg-secondary text-secondary text-xl hover:text-white transition-all duration-300";
    }


    return (
        <>
            <div className="border-b-2 m-3  border-b-gray-300">
                <div className="w-full h-[70px] flex justify-between">
                    <h1 className="ml-3 text-4xl text-secondary mt-3.5 font-bold">
                        Cashier
                    </h1>
                    <div className="flex gap-3 mt-3.5 mb-4 mr-5">
                        <Tooltip placement={"top"} title={"settings"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaCog/>
                            </button>

                        </Tooltip>

                        <Tooltip placement={"top"} title={"Messages"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaEnvelope/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"LogOut"}>
                            <button
                                onClick={() => {logout()}}
                                className={" w-12 h-10 mt-1 border-2 bg-red-400 flex justify-center items-center rounded-xl shadow-xl hover:bg-white text-white text-xl hover:text-red-500 transition-all duration-300"}>
                                <FaSignOutAlt/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"Profile"}>
                            <button className="ml-3 flex">
                                <p className="font-bold text-secondary text-xl mt-2">{"Hello " +userData?.username + "!"}</p>
                                <img src={userIcon} alt={"user-icon"} className="w-12 h-12 ml-2 mr-3"/>

                            </button>
                        </Tooltip>
                    </div>
                </div>
            </div>
        </>
    )
}// END OF FILE: src/Pages/Cashier/CashierNavBar.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/cashierNavLink.js

import { MdPending } from "react-icons/md";
import { AiOutlineFileExclamation } from "react-icons/ai";
import { HiOutlineDocumentReport } from "react-icons/hi";
import {AppRoutesPaths as appRoutes} from "../../Router/appRouterPaths.js";
import {FaHistory, FaHospital} from "react-icons/fa";
import { MdHelpOutline } from "react-icons/md";

export const cashierNavLink =
[
    {
        name: 'Consultation List',
        icon: MdPending,
        link: appRoutes.cashierPage,
    },

    {
        name: 'Exams List',
        icon: AiOutlineFileExclamation,
        link: appRoutes.examsList,
    },
    
    // {
    //     name: 'Hospitalisations List',
    //     icon: FaHospital,
    //     link: appRoutes.hospitalisations,
    // },
    {
        name: 'Financial History',
        icon: FaHistory,
        link: appRoutes.financialHistory,
    },
    {
        name: 'Financial Report',
        icon: HiOutlineDocumentReport,
        link: appRoutes.financialReport,
    },
    {
        name: 'Help Center',
        icon: MdHelpOutline,
        link: appRoutes.helpCenterPage,
    }

]// END OF FILE: src/Pages/Cashier/cashierNavLink.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/ConsultationList.jsx

import { useState } from "react"
import {AlertCircle, Search, Calendar, User, DollarSign, Filter, CheckCircle } from "lucide-react"
import PropTypes from "prop-types";
import {FaUserDoctor} from "react-icons/fa6";
import {PaymentModal} from "./PayementModal.jsx";

export default function ConsultationList({consultationList}) {


  ConsultationList.propTypes = {
    consultationList: PropTypes.array.isRequired,
  }


  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("all");
  const [selectedConsultation, setSelectedConsultation] = useState([]);
  const [canOpenPaymentModal, setCanOpenPaymentModal] = useState(false);

  const handlePayment = (consultation) => {
    setSelectedConsultation(consultation);
    setCanOpenPaymentModal(true);
  }

  const filteredConsultations = consultationList.filter((consultation) => {
    const patientFullName = `${consultation.idPatient.firstName} ${consultation.idPatient.lastName}`;
    const doctorFullName = `${consultation.idMedicalStaffGiver.first_name} ${consultation.idMedicalStaffGiver.last_name}`;
    return (
        (patientFullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            doctorFullName.toLowerCase().includes(searchTerm.toLowerCase())) &&
        (filterStatus === "all" || consultation.paymentStatus === filterStatus)
    )
  })


  return (
      <div className="w-full mx-auto p-6 rounded-lg">
        <h1 className="text-3xl font-bold text-gray-800 mb-6">Management of Consulting Payments</h1>

        <div className="flex flex-col md:flex-row justify-between items-center mb-6 space-y-4 md:space-y-0">
          <div className="relative w-full md:w-1/3">
            <input
                type="text"
                placeholder="Rechercher un patient ou un médecin"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>

          <div className="flex items-center space-x-4">
            <Filter className="text-gray-400" />
            <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              <option value="all">All Status</option>
              <option value="Invalid">On load</option>
              <option value="Valid">Payed</option>
            </select>
          </div>
        </div>

          <div>
            {
              consultationList.length === 0 ? (
                <div className="flex flex-col items-center justify-center py-10">
                    <AlertCircle className="h-12 w-12 text-gray-400 mb-4" />
                    <p className="text-lg font-semibold text-gray-600">
                      No consultations available
                    </p>
                </div>
              ) : (
                  
                  <table className="w-full ">
                      <thead className="bg-primary-end">
                        <tr>
                          <th className="px-6 py-5 text-center text-md font-bold text-white uppercase  rounded-l-lg">
                            Patient
                          </th>
                          <th className="px-6 py-5 text-center text-md font-bold text-white uppercase ">
                            Doctor
                          </th>
                          <th className="px-6 py-5 text-center text-md font-bold text-white uppercase ">Date</th>
                          <th className="px-6 py-5 text-center text-md font-bold text-white uppercase ">
                            Price
                          </th>
                          <th className="px-6 py-5 text-center text-md font-bold text-white uppercase ">Status</th>
                          <th className="px-6 py-5 text-center text-md font-bold text-white uppercase  rounded-r-lg">Action</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                          {filteredConsultations.map((consultation) => {

                            const patientInfo = consultation.idPatient;
                            const doctorInfo = consultation.idMedicalStaffGiver;
                            return (
                              <tr key={consultation.id}>
                                <td className=" py-6 ">
                                  <div className="flex items-center justify-center">
                                    <User className="h-5 w-5 text-gray-400 mr-2" />
                                    <div className="text-md font-semibold text-gray-900">{patientInfo.firstName +" "+ patientInfo.lastName}</div>
                                  </div>
                                </td>
                                <td className=" py-6 ">
                                  <div className="flex items-center justify-center">
                                    <FaUserDoctor className="h-5 w-5 text-gray-400 mr-2" />
                                    <div className="text-md  font-semibold text-gray-900">{doctorInfo.first_name + " "+ doctorInfo.last_name}</div>
                                  </div>
                                </td>
                                <td className=" py-6 ">
                                  <div className="flex items-center justify-center">
                                    <Calendar className="h-5 w-5 text-gray-400 mr-2" />
                                    <div className="text-md text-center font-semibold text-gray-900">{new Date(consultation.consultationDate).toLocaleDateString()}</div>
                                  </div>
                                </td>
                                <td className=" py-6  ">
                                  <div className="flex items-center justify-center">
                                    <DollarSign className="h-5 w-5 text-gray-400 mr-2" />
                                    <div className="text-md text-center font-bold text-gray-900">{consultation.consultationPrice} FCFA</div>
                                  </div>
                                </td>
                                <td className=" py-6  items-center justify-center flex ">
                                  <span className={`px-3  py-1 inline-flex text-sm leading-5 border-2  font-semibold rounded-full ${consultation.paymentStatus === "Valid" ? "bg-green-100 text-green-600 border-green-600" : "bg-yellow-100 text-yellow-600 border-yellow-600"}`}
                                  >
                                    {consultation.paymentStatus === "Valid" ? "Paid" : "Pending"}
                                  </span>
                                </td>
                                <td className="text-md font-medium text-center py-6">
                                  {consultation.paymentStatus === "Invalid" && (
                                      <button
                                          onClick={() => handlePayment(consultation)}
                                          className="text-primary-end hover:text-green-700 transition-all duration-500 flex items-center justify-center mx-auto"
                                      >
                                        <CheckCircle className="h-6 w-6 mr-1" />
                                        Pay
                                      </button>
                                  )}
                                </td>
                              </tr>
                            )})}
                      </tbody>
                  </table>
              )}
          </div>
          

        <PaymentModal
            isOpen={canOpenPaymentModal}
            onClose={()=>{setCanOpenPaymentModal(false)}}
            consultationData={selectedConsultation}
        />
      </div>
  )
}

// END OF FILE: src/Pages/Cashier/ConsultationList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/DailyFinancialReports.jsx

import { useState, useEffect } from "react"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts"
import { Calendar, Printer, Download, DollarSign, Users, Activity, FileText } from "lucide-react"

// Fonction pour générer des données simulées pour une journée
const generateDailyData = (date) => {
    const hours = Array.from({ length: 24 }, (_, i) => i)
    return hours.map((hour) => ({
        hour: `${hour}:00`,
        consultations: Math.floor(Math.random() * 5000) + 1000,
        examens: Math.floor(Math.random() * 8000) + 2000,
    }))
}

export  function DailyFinancialReport() {
    const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split("T")[0])
    const [dailyData, setDailyData] = useState([])

    useEffect(() => {
        // Simuler le chargement des données pour la date sélectionnée
        setDailyData(generateDailyData(selectedDate))
    }, [selectedDate])

    const totalConsultations = dailyData.reduce((sum, hour) => sum + hour.consultations, 0)
    const totalExamens = dailyData.reduce((sum, hour) => sum + hour.examens, 0)
    const totalRevenue = totalConsultations + totalExamens

    const handleDateChange = (e) => {
        setSelectedDate(e.target.value)
    }

    const handlePrint = () => {
        window.print()
    }

    const handleDownload = () => {
        // Logique pour télécharger le rapport (à implémenter)
        console.log("Téléchargement du rapport pour la date:", selectedDate)
    }

    return (
        <div className="max-w-7xl mx-auto p-6 bg-white rounded-lg shadow-lg">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-bold text-gray-800">Rapport Financier Journalier</h1>
                <div className="flex items-center space-x-4">
                    <div className="flex items-center">
                        <Calendar className="h-5 w-5 text-gray-400 mr-2" />
                        <input
                            type="date"
                            value={selectedDate}
                            onChange={handleDateChange}
                            className="border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        />
                    </div>
                    <button
                        onClick={handlePrint}
                        className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
                    >
                        <Printer className="h-5 w-5 mr-2" />
                        Imprimer
                    </button>
                    <button
                        onClick={handleDownload}
                        className="flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                    >
                        <Download className="h-5 w-5 mr-2" />
                        Télécharger
                    </button>
                </div>
            </div>

            {/* Cartes de résumé */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                <div className="p-4 bg-blue-100 rounded-lg">
                    <div className="flex justify-between items-start">
                        <div>
                            <p className="text-sm text-blue-600 font-medium">Revenus Totaux</p>
                            <p className="text-2xl font-bold text-blue-800">{totalRevenue.toLocaleString()} FCFA</p>
                        </div>
                        <DollarSign className="h-6 w-6 text-blue-500" />
                    </div>
                </div>

                <div className="p-4 bg-green-100 rounded-lg">
                    <div className="flex justify-between items-start">
                        <div>
                            <p className="text-sm text-green-600 font-medium">Consultations</p>
                            <p className="text-2xl font-bold text-green-800">{totalConsultations.toLocaleString()} FCFA</p>
                        </div>
                        <Users className="h-6 w-6 text-green-500" />
                    </div>
                </div>

                <div className="p-4 bg-purple-100 rounded-lg">
                    <div className="flex justify-between items-start">
                        <div>
                            <p className="text-sm text-purple-600 font-medium">Examens</p>
                            <p className="text-2xl font-bold text-purple-800">{totalExamens.toLocaleString()} FCFA</p>
                        </div>
                        <Activity className="h-6 w-6 text-purple-500" />
                    </div>
                </div>

                <div className="p-4 bg-yellow-100 rounded-lg">
                    <div className="flex justify-between items-start">
                        <div>
                            <p className="text-sm text-yellow-600 font-medium">Nombre de Transactions</p>
                            <p className="text-2xl font-bold text-yellow-800">{dailyData.length}</p>
                        </div>
                        <FileText className="h-6 w-6 text-yellow-500" />
                    </div>
                </div>
            </div>

            {/* Graphique */}
            <div className="mb-6 bg-white p-4 rounded-lg border">
                <h2 className="text-lg font-semibold mb-4">Revenus par Heure</h2>
                <ResponsiveContainer width="100%" height={400}>
                    <BarChart data={dailyData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="hour" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Bar dataKey="consultations" name="Consultations" fill="#4ade80" />
                        <Bar dataKey="examens" name="Examens" fill="#a78bfa" />
                    </BarChart>
                </ResponsiveContainer>
            </div>

            {/* Tableau détaillé */}
            <div className="overflow-x-auto">
                <table className="min-w-full bg-white border rounded-lg">
                    <thead className="bg-gray-50">
                    <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Heure</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Consultations
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Examens
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                    </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                    {dailyData.map((hour, index) => (
                        <tr key={index}>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{hour.hour}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {hour.consultations.toLocaleString()} FCFA
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {hour.examens.toLocaleString()} FCFA
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                {(hour.consultations + hour.examens).toLocaleString()} FCFA
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </table>
            </div>
        </div>
    )
}

// END OF FILE: src/Pages/Cashier/DailyFinancialReports.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/Exams.jsx

import { useEffect, useState } from "react"
import {AlertCircle, Search, Calendar, User, DollarSign, Filter, CheckCircle, Activity } from "lucide-react"
import axiosInstance from "../../Utils/axiosInstance.js";


const mockExams = [
  // {
  //   id: 1,
  //   addDate: "2025-02-14",
  //   examType: "Scanner thoracique",
  //   examStatus: "pending",
  //   patientStatus: "Stable",
  //   notes: "Patient présente une légère toux",
  //   idExam: 101,
  //   idMedicalFolderPage: 201,
  //   idPatient: 301,
  //   idMedicalStaff: 401
  // },
  // {
  //   id: 2,
  //   addDate: "2025-02-14",
  //   examType: "IRM cérébrale",
  //   examStatus: "paid",
  //   patientStatus: "Critique",
  //   notes: "Suspicion d’AVC",
  //   idExam: 102,
  //   idMedicalFolderPage: 202,
  //   idPatient: 302,
  //   idMedicalStaff: 402
  // },
  // {
  //   id: 3,
  //   addDate: "2025-02-14",
  //   examType: "Radiographie pulmonaire",
  //   examStatus: "pending",
  //   patientStatus: "Stable",
  //   notes: "Examen de contrôle post-opératoire",
  //   idExam: 103,
  //   idMedicalFolderPage: 203,
  //   idPatient: 303,
  //   idMedicalStaff: 403
  // }
]

const mockPatient = []


export default function Exams() {
  const [exams, setExams] = useState(mockExams)
  const [searchTerm, setSearchTerm] = useState("")
  const [filterStatus, setFilterStatus] = useState("all")
  const [isLoading, setIsLoading] = useState(false);
  const [patient, setPatient] = useState(mockPatient)

  const handlePayment = (examId) => {
    setExams((prevExams) => {
      // Mettre à jour le statut de l'examen payé
      const updatedExams = prevExams.map((exam) =>
        exam.id === examId ? { ...exam, examStatus: "paid" } : exam
      );  
      return updatedExams;
    });
  };

  const filteredExams = exams.filter((exam) => {
    return (
        (exam.idPatient == searchTerm ||
            exam.examType.toLowerCase().includes(searchTerm.toLowerCase())) &&
        (filterStatus === "all" || exam.status === filterStatus)
    )
  })

   useEffect(() => {
     async function fetchExams()
     {  
      setIsLoading(true);
        
         try
         {
             const response = await axiosInstance.get("/exam-request/");
             setIsLoading(false);
             if (response.status === 200)
             {
                 setExams(response.data.results);
                 console.log(exams)
             }
         }
         catch (error)
         {
             setIsLoading(false);
             console.log(error);
         }
     }
     fetchExams();
 }, []);

 useEffect(() => {
  async function fetchPatient(id)
  {  
   setIsLoading(true);
     
      try
      {
          const response = await axiosInstance.get(`/patient/${id}`);
          setIsLoading(false);
          if (response.status === 200)
          {
              setPatient(response.data.results);
              console.log(patient)
          }
      }
      catch (error)
      {
          setIsLoading(false);
          console.log(error);
      }
  }
  fetchPatient();
}, []);


  return (
      <div className="mx-auto p-6  rounded-lg">
        <h1 className="text-3xl font-bold text-gray-800 mb-6">Management of Exam Payments</h1>
        <div className="flex justify-between items-center mb-6">
          <div className="relative w-full md:w-1/3">
            <input
                type="text"
                placeholder="Rechercher un patient ou un examen"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>

          <div className="flex items-center space-x-4">
            <Filter className="text-gray-400" />
            <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              <option value="all">All statuses</option>
              <option value="pending">On hold</option>
              <option value="paid">Payed</option>
            </select>
          </div>
        </div>

        <div className="overflow-x-auto">
        {
              exams.length === 0 ? (
                <div className="flex flex-col items-center justify-center py-10">
                    <AlertCircle className="h-12 w-12 text-gray-400 mb-4" />
                    <p className="text-lg font-semibold text-gray-600">
                      No exams available.
                    </p>
                </div>
              ) : ( 
                <table className="w-full bg-white">
                  <thead className="bg-primary-end">
                  <tr>
                    <th className="px-6 py-5 text-center text-md font-semibold text-white uppercase rounded-l-lg ">
                      Patient
                    </th>

                    <th className="px-6 py-5 text-center text-md font-semibold  text-white uppercase ">
                      Exam Type
                    </th>

                    <th className="px-6 py-5 text-center text-md font-semibold  text-white uppercase ">Date</th>

                    <th className="px-6 py-5 text-center text-md font-semibold  text-white uppercase ">
                    Patient Status
                    </th>

                    <th className="px-6 py-5 text-center text-md font-semibold  text-white uppercase ">Status</th>

                    <th className="px-6 py-5 text-center text-md font-semibold  text-white uppercase rounded-r-lg">Action</th>

                  </tr>
                  </thead>
                    <tbody className="divide-y divide-gray-200">
                    {filteredExams.map((exam) => (
                        <tr key={exam.id}>
                          <td className="px-6 py-5 ">
                            <div className="flex items-center justify-center">
                              <User className="h-5 w-5 text-gray-400 mr-2" />
                              <div className="text-md font-semibold text-gray-900">{exam.idPatient}</div>
                            </div>
                          </td>

                          <td className="px-6 py-5 ">
                            <div className="flex items-center justify-center">
                              <Activity className="h-5 w-5 text-gray-400 mr-2" />
                              <div className="text-md text-gray-900">{exam.examType}</div>
                            </div>
                          </td>

                          <td className="px-6 py-5 ">
                            <div className="flex items-center justify-center">
                              <Calendar className="h-5 w-5 text-gray-400 mr-2" />
                              <div className="text-md text-gray-900">{new Date(exam.addDate).toLocaleDateString()}</div>
                            </div>
                          </td>

                          <td className="px-6 py-5 ">
                            <div className="flex items-center justify-center">
                              <div className="text-sm text-gray-900">{exam.patientStatus}</div>
                            </div>
                          </td>

                          <td className="px-6 py-5  flex justify-center items-center">
                            <span className={`px-2 inline-flex text-center text-xs leading-5 font-semibold rounded-full ${exam.examStatus === "paid" ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800"}`}>
                              {exam.examStatus === "paid" ? "Paid" : "On Load"}
                            </span>
                          </td>

                          <td className="text-md font-medium text-center py-5">
                            {exam.examStatus === "pending" && (
                                <button onClick={() => handlePayment(exam.id)}
                                className="text-primary-end hover:text-green-700 transition-all duration-500 flex items-center justify-center mx-auto">
                                  <CheckCircle className="h-5 w-5 mr-1" />
                                  Pay
                                </button>
                            )}
                          </td>

                        </tr>
                    ))}
                    </tbody>
          </table>
              )}
        </div>
      </div>
  )
}

// END OF FILE: src/Pages/Cashier/Exams.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/ExamsList.jsx

import {cashierNavLink} from './cashierNavLink.js'
import {CashierNavBar} from './CashierNavBar.jsx'
import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";
import Exams from './Exams.jsx'


export function ExamsList()
{


    return(
        <DashBoard linkList={cashierNavLink} requiredRole={"Cashier"}>
            <CashierNavBar/>
            <div className="flex flex-col">
            </div>
            <Exams/>
        </DashBoard>
    )
}// END OF FILE: src/Pages/Cashier/ExamsList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/FinancialHistory.jsx

import { useEffect, useState } from "react"
import {AlertCircle, Search, Calendar, User, DollarSign, Filter, Printer, Activity, Home } from "lucide-react"
import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";
import {cashierNavLink} from "./cashierNavLink.js";
import {CashierNavBar} from "./CashierNavBar.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";


const mockTransactions = [
    
 ]


export function FinancialHistory() {

    const [transactions, setTransactions] = useState(mockTransactions)
    const [searchTerm, setSearchTerm] = useState("")
    const [filterType, setFilterType] = useState("all")
    const [showInvoice, setShowInvoice] = useState(null)

    const handleSearch = (e) => {
        setSearchTerm(e.target.value)
    }

    const handleFilterChange = (e) => {
        setFilterType(e.target.value)
    }

    const handleGenerateInvoice = (transactionId) => {
        setShowInvoice(transactionId)
    }

    const filteredTransactions = transactions.filter((transaction) => {
        return (
            transaction.patientName.toLowerCase().includes(searchTerm.toLowerCase()) &&
            (filterType === "all" || transaction.type === filterType)
        )
    })

    useEffect(() => {
        async function fetchFacture()
        {
            
            try
            {
                const response = await axiosInstance.get("/accounting/facture/");
                
                if (response.status === 200)
                {
                    setTransactions(response.data.results);
                }
            }
            catch (error)
            {
                
                console.log(error);
            }
        }
        fetchFacture();
    }, []);


    const getTransactionIcon = (type) => {
        switch (type) {
            case "Consultation":
                return <User className="h-5 w-5 text-blue-500" />
            case "Examen":
                return <Activity className="h-5 w-5 text-green-500" />
            case "Hospitalisation":
                return <Home className="h-5 w-5 text-red-500" />
            default:
                return <DollarSign className="h-5 w-5 text-gray-500" />
        }
    }

    const handlePrint = () => {
        const printContents = document.getElementById("invoice").innerHTML;
        const originalContents = document.body.innerHTML;
        document.body.innerHTML = printContents;
        window.print();
        document.body.innerHTML = originalContents; // Restaure la page après l'impression
    };
    
    return (

        <DashBoard linkList={cashierNavLink} requiredRole={"Cashier"}>

            <CashierNavBar/>
            <div className="mx-auto p-6">
                <h1 className="text-3xl font-bold text-gray-800 mb-6">History of Financial Transactions</h1>

                <div className="flex flex-col md:flex-row justify-between items-center mb-6 space-y-4 md:space-y-0">
                    <div className="relative w-full md:w-1/3">
                        <input
                            type="text"
                            placeholder="Rechercher un patient"
                            value={searchTerm}
                            onChange={handleSearch}
                            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        />
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"/>
                    </div>

                    <div className="flex items-center space-x-4">
                        <Filter className="text-gray-400"/>
                        <select
                            value={filterType}
                            onChange={handleFilterChange}
                            className="border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        >
                            <option value="all">All Types</option>
                            <option value="Consultation">Consultation</option>
                            <option value="Examen">Exams</option>
                            <option value="Hospitalisation">Hospitalisation</option>
                        </select>
                    </div>
                </div>

                {
                    transactions.length === 0 ? (
                        <div className="flex flex-col items-center justify-center py-10">
                            <AlertCircle className="h-12 w-12 text-gray-400 mb-4" />
                            <p className="text-lg font-semibold text-gray-600">
                            No transactions available
                            </p>
                        </div>
                    ) : (
                        <div className="overflow-x-auto">
                                <table className="min-w-full bg-white">
                                        <thead className="bg-primary-end">
                                            <tr>
                                                <th className="px-6 py-5 text-center text-md font-bold text-white uppercase rounded-l-lg">Patient</th>
                                                <th className="px-6 py-5 text-center text-md font-bold text-white uppercase">
                                                    Type
                                                </th>
                                                <th className="px-6 py-5 text-center text-md font-bold text-white uppercase">Date</th>
                                                <th className="px-6 py-5 text-center text-md font-bold text-white uppercase">Price</th>
                                                <th className="px-6 py-5 text-center text-md font-bold text-white uppercase rounded-r-lg">
                                                    Action
                                                </th>
                                            </tr>
                                        </thead>
                                    <tbody className="divide-y divide-gray-200">
                                            {filteredTransactions.map((transaction, index) => (
                                                <tr key={transaction.id}>
                                                    <td className="px-6 py-6 whitespace-nowrap">
                                                        <div className="flex items-center justify-center">
                                                            <User className="h-5 w-5 text-gray-400 mr-2"/>
                                                            <div
                                                                className="text-md font-semibold text-gray-900">{transaction.patientName}</div>
                                                        </div>
                                                    </td>
                                                    <td className="px-6 py-6 whitespace-nowrap">
                                                        <div className="flex items-center justify-center">
                                                            {getTransactionIcon(transaction.type)}
                                                            <div className="ml-2 text-md text-gray-900">{transaction.type}</div>
                                                        </div>
                                                    </td>
                                                    <td className="px-6 py-6 whitespace-nowrap">
                                                        <div className="flex items-center justify-center">
                                                            <Calendar className="h-5 w-5 text-gray-400 mr-2"/>
                                                            <div
                                                                className="text-md text-gray-900">{new Date(transaction.date).toLocaleDateString()}</div>
                                                        </div>
                                                    </td>
                                                    <td className="px-6 py-6 whitespace-nowrap">
                                                        <div className="flex items-center justify-center">
                                                            <div className="text-md text-gray-900">{transaction.montant} FCFA</div>
                                                        </div>
                                                    </td>
                                                    <td className="px-6 py-6 whitespace-nowrap text-center text-md font-medium">
                                                        <button
                                                            onClick={() => handleGenerateInvoice(transaction.id)}
                                                            className="text-indigo-600 hover:text-indigo-900 flex items-center justify-center mx-auto"
                                                        >
                                                            <Printer className="h-5 w-5 mr-1"/>
                                                            Print
                                                        </button>
                                                    </td>
                                                </tr>
                                            ))}
                                    </tbody>
                            </table>
                        </div>
                       
                
                    )}
                     {showInvoice && (
                            <div className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm h-full w-full flex items-center justify-center">
                                <div className="bg-white p-8 rounded-lg  w-full max-w-2xl">
                                    <h2 className="text-2xl font-bold mb-4">Bill</h2>
                                    {(() => {
                                        const transaction = transactions.find((t) => t.id === showInvoice)
                                        return (
                                            <>

                                                <div id="invoice">
                                                    <div className="mb-4">
                                                        <p>
                                                            <strong>Patient:</strong> {transaction.patientName}
                                                        </p>
                                                        <p>
                                                            <strong>Date:</strong> {new Date(transaction.date).toLocaleDateString()}
                                                        </p>
                                                        <p>
                                                            <strong>Type:</strong> {transaction.type}
                                                        </p>
                                                    </div>
                                                    <table className="w-full mb-4">
                                                        <thead>
                                                        <tr className="border-b">
                                                            <th className="text-left py-2">Description</th>
                                                            <th className="text-right py-2">Price</th>
                                                        </tr>
                                                        </thead>
                                                        <tbody>
                                                        <tr className="border-b">
                                                            <td className="py-2">
                                                                {transaction.type} - {new Date(transaction.date).toLocaleDateString()}
                                                            </td>
                                                            <td className="text-right py-2">{transaction.amount} FCFA</td>
                                                        </tr>
                                                        </tbody>
                                                        <tfoot>
                                                        <tr className="font-bold">
                                                            <td className="py-2">Total</td>
                                                            <td className="text-right py-2">{transaction.amount} FCFA</td>
                                                        </tr>
                                                        </tfoot>
                                                    </table>
                                                </div>
                                                
                                                <div className="flex justify-end">
                                                    <button
                                                        onClick={() => setShowInvoice(null)}
                                                        className="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 mr-2"
                                                    >
                                                        Close
                                                    </button>
                                                    <button
                                                        onClick={handlePrint}
                                                        className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 flex items-center"
                                                    >
                                                        <Printer className="h-5 w-5 mr-2"/>
                                                        Print
                                                    </button>
                                                </div>
                                            </>
                                        )
                                    })()}
                                </div>
                            </div>
                        )}

            </div>
        </DashBoard>
    )
}

// END OF FILE: src/Pages/Cashier/FinancialHistory.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/FinancialReport.jsx

import { useState, useEffect } from "react"
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts"
import { FileText, Calendar, DollarSign, Activity, Users, Download } from "lucide-react"
import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";
import {cashierNavLink} from "./cashierNavLink.js";
import {CashierNavBar} from "./CashierNavBar.jsx";



const generateMonthlyData = (months) => {
    return Array.from({ length: months }, (_, i) => ({
        month: new Date(2024, i, 1).toLocaleDateString("fr-FR", { month: "short" }),
        consultations: Math.floor(Math.random() * 500000) + 100000,
        examens: Math.floor(Math.random() * 1000000) + 500000,
        total: 0, // Sera calculé
    })).map((item) => ({
        ...item,
        total: item.consultations + item.examens,
    }))
}

export function FinancialReport() {
    const [filterType, setFilterType] = useState("currentMonth")
    const [startDate, setStartDate] = useState("")
    const [endDate, setEndDate] = useState("")
    const [data, setData] = useState([])
    const [summaryData, setSummaryData] = useState({
        total: 0,
        monthTotal: 0,
        examTotal: 0,
        consultationTotal: 0,
    })

    useEffect(() => {
        // Simuler le chargement des données selon le filtre
        let monthlyData = []
        switch (filterType) {
            case "currentMonth":
                monthlyData = generateMonthlyData(1)
                break
            case "year":
                monthlyData = generateMonthlyData(12)
                break
            case "yearToDate":
                { let currentMonth = new Date().getMonth()
                monthlyData = generateMonthlyData(currentMonth + 1)
                break }
            case "custom":
                if (startDate && endDate) {
                    const months = Math.ceil((new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24 * 30))
                    monthlyData = generateMonthlyData(months)
                }
                break
        }

        setData(monthlyData)

        // Calculer les totaux
        const totals = monthlyData.reduce(
            (acc, curr) => ({
                total: acc.total + curr.total,
                examTotal: acc.examTotal + curr.examens,
                consultationTotal: acc.consultationTotal + curr.consultations,
            }),
            { total: 0, examTotal: 0, consultationTotal: 0 },
        )

        setSummaryData({
            ...totals,
            monthTotal: monthlyData[monthlyData.length - 1]?.total || 0,
        })
    }, [filterType, startDate, endDate])


    const handleGeneratePDF = () => {
        console.log("Génération du PDF pour la période:", filterType)
    }

    return (
        <DashBoard linkList={cashierNavLink} requiredRole={"Cashier"}>

         <CashierNavBar/>


        <div className="mx-auto p-6">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-bold text-gray-800">General Hospital Statistics</h1>
                <button
                    onClick={handleGeneratePDF}
                    className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
                >
                    <Download className="h-5 w-5 mr-2" />
                    Générer PDF
                </button>
            </div>

            {/* Filtres */}
            <div className="mb-6 flex flex-wrap gap-4">
                <select
                    value={filterType}
                    onChange={(e) => setFilterType(e.target.value)}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                >
                    <option value="currentMonth">Mois en cours</option>
                    <option value="year">Année complète</option>
                    <option value="yearToDate">Année jusqu'à présent</option>
                    <option value="custom">Période personnalisée</option>
                </select>

                {filterType === "custom" && (
                    <div className="flex gap-4">
                        <input
                            type="date"
                            value={startDate}
                            onChange={(e) => setStartDate(e.target.value)}
                            className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        />
                        <input
                            type="date"
                            value={endDate}
                            onChange={(e) => setEndDate(e.target.value)}
                            className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        />
                    </div>
                )}
            </div>

            {/* Cartes de résumé */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-14">
                <div className="p-4 bg-green-100 rounded-lg">
                    <div className="flex justify-between items-start">
                        <div>
                            <p className="text-sm text-green-600 font-medium">Total des entrées</p>
                            <p className="text-2xl font-bold text-green-800">{summaryData.total.toLocaleString()} $</p>
                        </div>
                        <DollarSign className="h-6 w-6 text-green-500" />
                    </div>
                </div>

                <div className="p-4 bg-red-100 rounded-lg">
                    <div className="flex justify-between items-start">
                        <div>
                            <p className="text-sm text-red-600 font-medium">Entrées totales du mois</p>
                            <p className="text-2xl font-bold text-red-800">{summaryData.monthTotal.toLocaleString()} $</p>
                        </div>
                        <Calendar className="h-6 w-6 text-red-500" />
                    </div>
                </div>

                <div className="p-4 bg-blue-100 rounded-lg">
                    <div className="flex justify-between items-start">
                        <div>
                            <p className="text-sm text-blue-600 font-medium">Entrées des examens</p>
                            <p className="text-2xl font-bold text-blue-800">{summaryData.examTotal.toLocaleString()} $</p>
                        </div>
                        <Activity className="h-6 w-6 text-blue-500" />
                    </div>
                </div>

                <div className="p-4 bg-purple-100 rounded-lg">
                    <div className="flex justify-between items-start">
                        <div>
                            <p className="text-sm text-purple-600 font-medium">Entrées des consultations</p>
                            <p className="text-2xl font-bold text-purple-800">{summaryData.consultationTotal.toLocaleString()} $</p>
                        </div>
                        <Users className="h-6 w-6 text-purple-500" />
                    </div>
                </div>
            </div>



            {/* Tableau détaillé */}
            <table className="w-full  rounded-lg mb-14">
                <thead className="bg-primary-end">
                <tr>
                    <th className="px-6 py-5 text-center text-md font-bold text-white uppercase rounded-l-lg ">
                        Period
                    </th>
                    <th className="px-6 py-5 text-center text-md font-bold text-white uppercase ">
                        Consultations
                    </th>
                    <th className="px-6 py-5 text-center text-md font-bold text-white uppercase ">
                        Exams
                    </th>
                    <th className="px-6 py-5 text-center text-md font-bold text-white uppercase ">Total</th>
                    <th className="px-6 py-5 text-center text-md font-bold text-white uppercase  rounded-r-lg">
                        Actions
                    </th>
                </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                {data.map((item, index) => (
                    <tr key={index}>
                        <td className="px-6 py-4 whitespace-nowrap text-md text-center font-bold text-gray-900">{item.month}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-md text-center text-gray-900">{item.consultations.toLocaleString()} FCFA</td>
                        <td className="px-6 py-4 whitespace-nowrap text-md text-center text-gray-900">{item.examens.toLocaleString()} FCFA</td>
                        <td className="px-6 py-4 whitespace-nowrap text-md  text-center text-gray-900">{item.total.toLocaleString()} FCFA</td>
                        <td className="px-6 py-4 whitespace-nowrap text-md text-center text-gray-900">
                            <button
                                onClick={() => handleGeneratePDF()}
                                className="flex justify-center mx-auto items-center text-indigo-600 hover:text-indigo-900"
                            >
                                <FileText className="h-4 w-4 mr-1" />
                                Generate PDF
                            </button>
                        </td>
                    </tr>
                ))}
                </tbody>
            </table>

            {/* Graphique */}
            <div className="mb-5  p-4 rounded-lg border">
                <h2 className="text-lg font-semibold mb-4">Évolution des entrées</h2>
                <ResponsiveContainer width="100%" height={400}>
                    <LineChart data={data}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="month" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Line type="monotone" dataKey="consultations" name="Entrées des Consultations" stroke="#9333ea" />
                        <Line type="monotone" dataKey="examens" name="Entrées des Examens" stroke="#3b82f6" />
                        <Line type="monotone" dataKey="total" name="Total des Entrées" stroke="#22c55e" />
                    </LineChart>
                </ResponsiveContainer>
            </div>




        </div>
    </DashBoard>
    )
}

// END OF FILE: src/Pages/Cashier/FinancialReport.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/Hospitalisations.jsx

import {cashierNavLink} from './cashierNavLink.js'
import {CashierNavBar} from './CashierNavBar.jsx'
import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";
import HospitalisationList from './HospitalisationsList.jsx'


export function Hospitalisations()
{


    return(
        <DashBoard linkList={cashierNavLink} requiredRole={"Cashier"}>
            <CashierNavBar/>
            <div className="flex flex-col">
            </div>
            <HospitalisationList/>
        </DashBoard>
    )
}// END OF FILE: src/Pages/Cashier/Hospitalisations.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/HospitalisationsList.jsx

import { useEffect, useState } from "react"
import {AlertCircle, Search, Filter} from "lucide-react"
import axiosInstance from "../../Utils/axiosInstance.js";


const mockHospitalisations = [      
]

export default function HospitalisationList() {
  const [hospitalisations, setHospitalisations] = useState(mockHospitalisations)
  const [searchTerm, setSearchTerm] = useState("")
  const [filterStatus, setFilterStatus] = useState("all")
  

   const handlePayment = (hospitalisationId) => {
     setHospitalisations((prevHospitalisations) => prevHospitalisations.map((hospitalisation) => (hospitalisation.id === hospitalisationId ? { ...hospitalisation, status: "paid" } : hospitalisation)))
   }

   const filteredHospitalisations = hospitalisations.filter((hospitalisation) => {
     return (
         (hospitalisation.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||
             hospitalisation.hospitalisationType.toLowerCase().includes(searchTerm.toLowerCase())) &&
         (filterStatus === "all" || hospitalisation.status === filterStatus)
     )
   })

   useEffect(() => {
     async function fetchHospitalisations()
     {
        
         try
         {
             const response = await axiosInstance.get("/hospitalisation/");
           
             if (response.status === 200)
             {
                 setHospitalisations(response.data.results);
             }
         }
         catch (error)
         {
            
             console.log(error);
         }
     }
     fetchHospitalisations();
 }, []);

  return (
      <div className="mx-auto p-6  rounded-lg">
        <h1 className="text-3xl font-bold text-gray-800 mb-6">Management of hospitalisation Payments</h1>
        <div className="flex justify-between items-center mb-6">
          <div className="relative w-full md:w-1/3">
            <input
                type="text"
                placeholder="Rechercher un patient ou un hospitalisationen"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>

          <div className="flex items-center space-x-4">
            <Filter className="text-gray-400" />
            <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              <option value="all">All statuses</option>
              <option value="pending">On hold</option>
              <option value="paid">Payed</option>
            </select>
          </div>
        </div>

        <div className="overflow-x-auto">
        {
              hospitalisations.length === 0 ? (
                <div className="flex flex-col items-center justify-center py-10">
                    <AlertCircle className="h-12 w-12 text-gray-400 mb-4" />
                    <p className="text-lg font-semibold text-gray-600">
                      No hospitalisations available.
                    </p>
                </div>
              ) : ( 
                <table className="w-full bg-white">
                  <thead className="bg-primary-end">
                  <tr>
                    <th className="px-4 py-3 text-center text-md font-semibold text-white uppercase rounded-l-lg ">
                      ID
                    </th>

                    <th className="px-4 py-3 text-center text-md font-semibold  text-white uppercase ">
                      At Date
                    </th>

                    <th className="px-4 py-3 text-center text-md font-semibold  text-white uppercase ">Bed Label</th>

                    <th className="px-4 py-3 text-center text-md font-semibold  text-white uppercase ">
                        Note
                    </th>

                    <th className="px-4 py-3 text-center text-md font-semibold  text-white uppercase ">Status</th>

                    <th className="px-4 py-3 text-center text-md font-semibold  text-white uppercase ">Removal Date</th>

                    <th className="px-4 py-3 text-center text-md font-semibold  text-white uppercase ">Room</th>

                    <th className="px-4 py-3 text-center text-md font-semibold  text-white uppercase ">Patient</th>

                    <th className="px-4 py-3 text-center text-md font-semibold  text-white uppercase rounded-r-lg">Medical Staff</th>
                  </tr>
                  </thead>
                    <tbody className="divide-y divide-gray-200">
                    {hospitalisations.map((hospitalisation) => (
                        <tr key={hospitalisation.id}>
                          <td className="px-4 py-3 ">
                            <div className="flex items-center justify-center">
                              <div className="text-md font-semibold text-gray-900">{hospitalisation.id}</div>
                            </div>
                          </td>

                          <td className="px-4 py-3 ">
                            <div className="flex items-center justify-center">
                              <div className="text-md text-gray-900">{hospitalisation.atDate}</div>
                            </div>
                          </td>

                          <td className="px-4 py-3 ">
                            <div className="flex items-center justify-center">
                              <div className="text-md text-gray-900">{hospitalisation.bedLabel}</div>
                            </div>
                          </td>

                          <td className="px-4 py-3 ">
                            <div className="flex items-center justify-center">
                              <div className="text-sm text-gray-900">{hospitalisation.note}</div>
                            </div>
                          </td>

                          <td className="px-4 py-3  flex justify-center items-center">
                            <span className={`px-2 inline-flex text-center text-xs leading-5 font-semibold rounded-full ${hospitalisation.isActive ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800"}`}>
                              {hospitalisation.isActive ? "Active" : "Not Active"}
                            </span>
                          </td>

                          <td className="px-4 py-3 ">
                            <div className="flex items-center justify-center">
                              <div className="text-sm text-gray-900">{hospitalisation.idRoom}</div>
                            </div>
                          </td>

                          <td className="px-4 py-3 ">
                            <div className="flex items-center justify-center">
                              <div className="text-sm text-gray-900">{hospitalisation.idPatient}</div>
                            </div>
                          </td>

                          <td className="px-4 py-3 ">
                            <div className="flex items-center justify-center">
                              <div className="text-sm text-gray-900">{hospitalisation.idMedicalStaff}</div>
                            </div>
                          </td>

                          

                        </tr>
                    ))}
                    </tbody>
          </table>
              )}
        </div>
      </div>
  )
}


// END OF FILE: src/Pages/Cashier/HospitalisationsList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/PayementModal.jsx

import { useState, useEffect } from "react"
import { X, Printer, Save, AlertCircle } from "lucide-react"
import PropTypes from "prop-types";
import axiosInstanceAccountant from "../../Utils/axiosInstanceAccountant.js";
import {useAuthentication} from "../../Utils/Provider.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import {formatDateOnly} from "../../Utils/formatDateMethods.js";

export function PaymentModal({ isOpen, onClose, consultationData }) {


    PaymentModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        consultationData: PropTypes.object.isRequired,
    };


    const [selectedFinancialOperation, setSelectedFinancialOperation] = useState("");
    const [isProcessing, setIsProcessing] = useState(false);
    const [isSuccess, setIsSuccess] = useState(false);
    const [billNumber, setBillNumber] = useState("");
    const [isClosing, setIsClosing] = useState(false);
    const [financialOperations, setFinancialOperations] = useState([]);
    const {userData} = useAuthentication();
    const [error, setError] = useState("");
    const [bill, setBill] = useState() 


    useEffect(() => {
        if (isOpen) {
            setIsClosing(false);
            setIsSuccess(false);
        }
    }, [isOpen])


    function handleClose (){
        setIsClosing(true);
        setTimeout(() => {onClose()}, 300)
    }

    async function handleSubmit (e){
        e.preventDefault();
        setIsProcessing(true);
        let billData = {
            bill_items:
                [
                    {
                        designation : 'consultation',
                        consultation: consultationData?.id

                    },
                ],
            patient: consultationData?.idPatient?.id,
            operation: selectedFinancialOperation,
            operator: userData?.id,
        }
        try
        {
            console.log(billData);
            const response = await axiosInstance.post("/bill/", billData);
            
            setIsProcessing(false);
            if (response.status === 201)

            {   setBill(response?.data)
                console.log(response.data);
                setBillNumber(response?.data?.id);
                setIsSuccess(true);
                setError(null);
            }
        }
        catch (error)
        {
            setIsProcessing(false);
            setError("Something went wrong went creating bill, please retry later !!!");
            console.log(error);
        }
    }



    useEffect(() => {
        async function fetchFinancialOperation()
        {
            try
            {
                const response = await axiosInstanceAccountant.get("/financial-operation/");
                if (response.status === 200)
                {
                    console.log("financial operation", response);
                    setFinancialOperations(response.data);
                }
            }
            catch (error)
            {
                console.log(error);
            }
        }
        fetchFinancialOperation();
    }, []);

    const handlePrint = () => {
        const printContents = document.getElementById("invoice").innerHTML;
        const originalContents = document.body.innerHTML;
        document.body.innerHTML = printContents;
        window.print();
        document.body.innerHTML = originalContents; // Restaure la page après l'impression
    };


    if (!isOpen) return null

    return (
        <div className="fixed inset-0 z-50 overflow-y-auto backdrop-blur-sm">
            <div className={`fixed inset-0 bg-black  transition-opacity duration-300 ${isClosing ? "opacity-0" : "opacity-70"}`} onClick={handleClose}/>
            <div className="flex min-h-full items-center justify-center p-4">
                <div className={`relative w-full max-w-2xl transform overflow-hidden rounded-lg bg-white shadow-xl transition-all duration-300 ${isClosing ? "opacity-0 scale-95" : "opacity-100 scale-100"}`}>
                    <div className="border-b border-gray-200 px-6 py-4 flex items-center justify-between">
                        <h2 className="text-2xl font-bold ">Invoice Creation</h2>
                        <button onClick={handleClose} className="rounded-full p-1 hover:bg-red-100 transition-colors duration-500">
                            <X className="h-7 w-7 text-red-500" />
                        </button>
                    </div>

                    {error && <p className="m-4 font-bold text-md text-red-500">{error}</p>}

                    <div className="px-6 py-4">
                        {isSuccess ? (
                            <div className="space-y-6">
                                <div className="rounded-md bg-green-50 p-4 border border-green-200">
                                    <div className="flex items-center">
                                        <AlertCircle className="h-5 w-5 text-green-600" />
                                        <p className="ml-3 text-green-700">Invoice created successfully! Invoice number: {billNumber}</p>
                                    </div>
                                </div>


                                <div className="rounded-lg bg-gray-50 p-4 space-y-4">
                                    <div id = "invoice" className="grid grid-cols-2 gap-4">
                                        <div>
                                            <p className="text-sm text-gray-500">Patient</p>
                                            <p className="font-medium">{consultationData.idPatient.firstName + " " + consultationData.idPatient.lastName}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm text-gray-500">Phone Number</p>
                                            <p className="font-medium">{consultationData.idPatient.phoneNumber || "Not specified"}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm text-gray-500">Price</p>
                                            <p className="font-medium">{consultationData.consultationPrice.toLocaleString()} FCFA</p>
                                        </div>
                                        <div>
                                            <p className="text-sm text-gray-500">Date</p>
                                            <p className="font-medium">{new Date(consultationData.consultationDate).toLocaleDateString()}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm text-gray-500">Price</p>
                                            <p className="font-medium">{consultationData.consultationPrice.toLocaleString()} FCFA</p>
                                        </div>
                                    </div>
                                </div>


                                <div className="flex justify-end space-x-4">
                                    <button
                                        onClick={handleClose}
                                        className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
                                    >
                                        Close
                                    </button>
                                    <button
                                        onClick={handlePrint}
                                        className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors flex items-center"
                                    >
                                        <Printer className="h-4 w-4 mr-2" />
                                        Print Facture
                                    </button>
                                </div>
                            </div>
                        ) : (
                            <form onSubmit={handleSubmit} className="space-y-6">
                                <div className="space-y-4">
                                    <div className="grid grid-cols-2 gap-4">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">Patient</label>
                                            <input
                                                type="text"
                                                value={consultationData?.idPatient?.firstName + " " + consultationData?.idPatient?.lastName}
                                                disabled
                                                className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500"
                                            />
                                        </div>
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                                            <input
                                                type="text"
                                                value={consultationData?.idPatient?.phoneNumber || ""}
                                                disabled
                                                className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500"
                                            />
                                        </div>
                                    </div>


                                    <div className="grid grid-cols-2 gap-4">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">Price</label>
                                            <input
                                                type="text"
                                                value={`${consultationData?.consultationPrice} FCFA`}
                                                disabled
                                                className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500"
                                            />
                                        </div>
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                                            <input
                                                type="text"
                                                value={consultationData?.consultationDate ? formatDateOnly(consultationData?.consultationDate) : 'Not Specified'}
                                                disabled
                                                className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500"
                                            />
                                        </div>
                                    </div>


                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Type of financial transaction</label>
                                        <select
                                            value={selectedFinancialOperation}
                                            onChange={(e) => setSelectedFinancialOperation(e.target.value)}
                                            required
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-0 focus:border-2  focus:border-primary-end"
                                        >
                                            <option value="">Select operation type</option>
                                            {financialOperations && financialOperations.length > 0 && financialOperations.map((operation) => (
                                                <option key={operation?.id} value={operation?.id}>{operation?.name}</option>
                                            ))}
                                        </select>
                                    </div>
                                </div>


                                <div className="flex justify-end space-x-4">
                                    <button
                                        type="button"
                                        onClick={handleClose}
                                        className="px-4 py-2  bg-red-400  font-bold  rounded-md text-white hover:bg-red-600 transition-all duration-500"
                                    >
                                        Cancel
                                    </button>
                                    <button
                                        type="submit"
                                        disabled={isProcessing || !selectedFinancialOperation}
                                        className={`px-4 py-2 rounded-md text-white font-bold flex items-center transition-colors ${
                                            isProcessing || !selectedFinancialOperation
                                                ? "bg-primary-end/70 cursor-not-allowed"
                                                : "bg-primary-end hover:bg-indigo-700"
                                        }`}
                                    >
                                        <Save className="h-4 w-4 mr-2" />
                                        <p className={`${isProcessing ? "animate-pulse" : ""}`}>{isProcessing ? "Creation in progress..." : "Create the invoice"}</p>
                                    </button>
                                </div>
                            </form>
                        )}
                    </div>
                </div>
            </div>
        </div>
    )
}

// END OF FILE: src/Pages/Cashier/PayementModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Cashier/StatisticsReport.jsx

import { FaCalendarAlt, FaChartPie, FaUserMd, FaPrescriptionBottle, FaFileMedical } from "react-icons/fa";
import { useState } from "react";
import PropTypes from "prop-types";


export function StatisticsReport({ annualStats, monthlyStats, dailyStats }) {


    StatisticsReport.propTypes = {
        annualStats: PropTypes.shape({
            consultations: PropTypes.number.isRequired,
            exams: PropTypes.number.isRequired,
            medications: PropTypes.number.isRequired,
            revenue: PropTypes.number.isRequired,
        }).isRequired,
        monthlyStats: PropTypes.arrayOf(
            PropTypes.shape({
                month: PropTypes.string.isRequired,
                consultations: PropTypes.number.isRequired,
                exams: PropTypes.number.isRequired,
                medications: PropTypes.number.isRequired,
                revenue: PropTypes.number.isRequired,
            })
        ).isRequired,
        dailyStats: PropTypes.arrayOf(
            PropTypes.shape({
                date: PropTypes.string.isRequired,
                consultations: PropTypes.number.isRequired,
                exams: PropTypes.number.isRequired,
                medications: PropTypes.number.isRequired,
                revenue: PropTypes.number.isRequired,
            })
        ).isRequired,
    };

    const [selectedTab, setSelectedTab] = useState("annual");
    const [customFilter, setCustomFilter] = useState({});
    const [customFilteredStats, setCustomFilteredStats] = useState([]);

const handleCustomFilter = (filter) => {
    const { startDate, endDate, category } = filter;
    const filteredByDate = dailyStats.filter((stat) => {
        const statDate = new Date(stat.date);
        const start = startDate ? new Date(startDate) : null;
        const end = endDate ? new Date(endDate) : null;

        return (
            (!start || statDate >= start) &&
            (!end || statDate <= end)
        );
    });

    const filteredByCategory = filteredByDate.map((stat) => {
        if (category === "consultations") {
            return { ...stat, exams: null, medications: null, revenue: null };
        } else if (category === "exams") {
            return { ...stat, consultations: null, medications: null, revenue: null };
        } else if (category === "medications") {
            return { ...stat, consultations: null, exams: null, revenue: null };
        } else if (category === "revenue") {
            return { ...stat, consultations: null, exams: null, medications: null };
        }
        return stat;
    });

    setCustomFilteredStats(filteredByCategory);
};

    const renderStats = () => {
        if (selectedTab === "annual") {
            return (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mt-6">
                    <StatCard
                        icon={<FaUserMd className="text-3xl text-green-600" />}
                        label="Consultations"
                        value={annualStats.consultations}
                    />
                    <StatCard
                        icon={<FaFileMedical className="text-3xl text-blue-600" />}
                        label="Examens"
                        value={annualStats.exams}
                    />
                    <StatCard
                        icon={<FaPrescriptionBottle className="text-3xl text-orange-600" />}
                        label="Médicaments"
                        value={annualStats.medications}
                    />
                    <StatCard
                        icon={<FaChartPie className="text-3xl text-red-600" />}
                        label="Revenus"
                        value={`${annualStats.revenue} FCFA`}
                    />
                </div>
            );
        } else if (selectedTab === "monthly") {
            return (
                <TableStats title="Statistiques mensuelles" stats={monthlyStats} />
            );
        } else if (selectedTab === "daily") {
            return (
                <TableStats title="Statistiques journalières" stats={dailyStats} />
            );
        } else if (selectedTab === "custom") {
            return (
                <div className="mt-6">
                    <h3 className="text-lg font-bold mb-4">Bilan personnalisé</h3>
                    <CustomReportFilter onFilter={handleCustomFilter} />
                    {customFilteredStats.length > 0 ? (
                        <TableStats title="Résultats filtrés" stats={customFilteredStats} />
                    ) : (
                        <p className="mt-4 text-gray-600">Aucun résultat trouvé selon les critères.</p>
                    )}
                </div>
            );
        }

        
    };

    return (
        <div className="p-6">
            <h2 className="text-2xl font-bold mb-6">Rapport Statistique de l'Hôpital</h2>
            <div className="flex space-x-4 mb-6">
                {[
                    { tab: "annual", label: "Annuel" },
                    { tab: "monthly", label: "Mensuel" },
                    { tab: "daily", label: "Journalier" },
                    { tab: "custom", label: "Personnalisé" },
                ].map(({ tab, label }) => (
                    <button
                        key={tab}
                        onClick={() => setSelectedTab(tab)}
                        className={`px-4 py-2 rounded ${
                            selectedTab === tab
                                ? "bg-blue-600 text-white"
                                : "bg-gray-200 hover:bg-gray-300"
                        }`}
                    >
                        {label}
                    </button>
                ))}
            </div>
            {renderStats()}
        </div>
    );
}


function StatCard({ icon, label, value }) {
    return (
        <div className="bg-white shadow-lg p-4 rounded-lg flex items-center">
            {icon}
            <div className="ml-4">
                <p className="text-gray-600">{label}</p>
                <h2 className="text-2xl font-bold">{value}</h2>
            </div>
        </div>
    );
}

StatCard.propTypes = {
    icon: PropTypes.element.isRequired,
    label: PropTypes.string.isRequired,
    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
};

function TableStats({ title, stats }) {
    return (
        <div className="mt-6">
            <h3 className="text-lg font-bold mb-4">{title}</h3>
            <table className="w-full text-left border-collapse">
                <thead>
                    <tr>
                        <th className="border-b p-2">Period</th>
                        <th className="border-b p-2">Consultations</th>
                        <th className="border-b p-2">Exams</th>
                        <th className="border-b p-2">Medicine</th>
                        <th className="border-b p-2">Income (FCFA)</th>
                    </tr>
                </thead>
                <tbody>
                    {stats.map((stat, index) => (
                        <tr key={index} className="odd:bg-gray-100">
                            <td className="p-2">{stat.period || stat.date || stat.month}</td>
                            <td className="p-2 font-bold">{stat.consultations}</td>
                            <td className="p-2 font-bold">{stat.exams}</td>
                            <td className="p-2 font-bold">{stat.medications}</td>
                            <td className="p-2 font-bold">{stat.revenue}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
}

TableStats.propTypes = {
    title: PropTypes.string.isRequired,
    stats: PropTypes.arrayOf(
        PropTypes.shape({
            period: PropTypes.string,
            date: PropTypes.string,
            month: PropTypes.string,
            consultations: PropTypes.number.isRequired,
            exams: PropTypes.number.isRequired,
            medications: PropTypes.number.isRequired,
            revenue: PropTypes.number.isRequired,
        })
    ).isRequired,
};

function CustomReportFilter({ onFilter }) {
    const [startDate, setStartDate] = useState("");
    const [endDate, setEndDate] = useState("");
    const [category, setCategory] = useState("all");

    const handleSubmit = (e) => {
        e.preventDefault();
        onFilter({ startDate, endDate, category });
    };

    return (
        <form className="bg-white p-4 shadow rounded" onSubmit={handleSubmit}>
            <div className="flex space-x-4 mb-4">
                <div>
                    <label className="block text-gray-600 mb-2">Date de début</label>
                    <input
                        type="date"
                        value={startDate}
                        onChange={(e) => setStartDate(e.target.value)}
                        className="border p-2 rounded w-full"
                    />
                </div>
                <div>
                    <label className="block text-gray-600 mb-2">Date de fin</label>
                    <input
                        type="date"
                        value={endDate}
                        onChange={(e) => setEndDate(e.target.value)}
                        className="border p-2 rounded w-full"
                    />
                </div>
                <div>
                    <label className="block text-gray-600 mb-2">Category</label>
                    <select
                        value={category}
                        onChange={(e) => setCategory(e.target.value)}
                        className="border p-2 rounded w-full"
                        >
                            <option value="all">All categories</option>
                            <option value="consultations">Consultations</option>
                            <option value="exams">Exams</option>
                            <option value="medications">Medicines</option>
                            <option value="revenue">Income</option>
                        </select>
                    </div>
                </div>
                <div className="flex justify-end">
                    <button
                        type="submit"
                        className="bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700"
                    >
                        Filter
                    </button>
                </div>
            </form>
        );
    }
    
    CustomReportFilter.propTypes = {
        onFilter: PropTypes.func.isRequired,
    };
    
// END OF FILE: src/Pages/Cashier/StatisticsReport.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/AppointmentList.jsx

import {useEffect, useState} from "react"
import { Search, Calendar,  ChevronLeft, ChevronRight } from "lucide-react"
import AppointmentCard from "./DoctorComponents/AppointmentCard.jsx";
import {useAuthentication} from "../../Utils/Provider.jsx";
import {doctorNavLink} from "./lib/doctorNavLink.js";
import {DoctorNavBar} from "./DoctorComponents/DoctorNavBar.jsx";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";



export  function AppointmentList() {
    const [filter, setFilter] = useState("Pending");
    const [searchTerm, setSearchTerm] = useState("");
    const [dateFilter, setDateFilter] = useState("");
    const [currentPage, setCurrentPage] = useState(1);
    const appointmentsPerPage = 5;
    const [appointmentList, setAppointmentList] = useState([{}]);

    const [isLoading, setIsLoading] = useState(false);
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");




    const filteredAppointments = appointmentList.filter((appointment) => {
        const fullName = appointment?.idPatient?.firstName + " " + appointment?.idPatient?.lastName;
        const matchesFilter = filter === "all" || appointment?.state === filter
        const matchesSearch = fullName.toLowerCase().includes(searchTerm.toLowerCase())
        const matchesDate = dateFilter ? appointment?.atDate === dateFilter : true
        return matchesFilter && matchesSearch && matchesDate
    })


    const indexOfLastAppointment = currentPage * appointmentsPerPage;
    const indexOfFirstAppointment = indexOfLastAppointment - appointmentsPerPage;
    const currentAppointments = filteredAppointments.slice(indexOfFirstAppointment, indexOfLastAppointment);

    const paginate = (pageNumber) => setCurrentPage(pageNumber)
    const {userData} = useAuthentication();



    async function retrieveDoctorAppointments(doctorId)
    {
        setIsLoading(true);
        try
        {
            const response  = await axiosInstance.get(`/appointment/doctor/${doctorId}/`);
            setIsLoading(false);
            if (response.status === 200)
            {
                setAppointmentList(response?.data);
                console.log(response.data);
                setErrorStatus(null);
                setErrorMessage("");
            }
        }
        catch (error)
        {
            setIsLoading(false);
            console.log(error);
            setErrorStatus(error.status);
            setErrorMessage("Something went wrong when retrieving your appointments, please try again later !");
        }
    }




    useEffect(() => {
        if(userData.id)
        {
            retrieveDoctorAppointments(userData.id);
        }
    }, [userData.id]);




    return (
        <CustomDashboard linkList={doctorNavLink} requiredRole={"Doctor"}>
            <DoctorNavBar/>
            <div className="mx-auto p-6 h-fit">
                <h1 className="text-3xl font-bold text-gray-800 mb-6">{`Appointments of Dr. ${userData?.first_name + " " + userData?.last_name}`}</h1>


                <div className="mb-8 space-y-4">
                    <div className="flex flex-wrap gap-4">
                        <button
                            onClick={() => setFilter("Pending")}
                            className={`px-4 py-2 rounded-md hover:bg-primary-start text-white duration-300 transition-all ${filter === "Pending" ? "bg-primary-end text-white font-bold " : "bg-gray-100 text-gray-800 hover:bg-gray-200"} transition-colors`}
                        >
                            Upcoming appointments
                        </button>
                        <button
                            onClick={() => setFilter("Completed")}
                            className={`px-4 py-2 rounded-md hover:bg-primary-start duration-300 transition-all  hover:text-white ${
                                filter === "Completed" ? "bg-primary-end text-white font-bold " : "bg-gray-100 text-gray-800 hover:bg-gray-200"
                            } transition-colors`}
                        >
                            Honored appointments
                        </button>
                        <button
                            onClick={() => setFilter("all")}
                            className={`px-4 py-2 rounded-md  hover:bg-primary-start duration-300 transition-all hover:text-white ${filter === "all" ? "bg-primary-end text-white font-bold" : "bg-gray-100 text-gray-800 hover:bg-gray-200"} transition-colors`}
                        >
                            All appointments
                        </button>
                    </div>
                    <div className="flex flex-wrap gap-4">
                        <div className="relative flex-grow">
                            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                            <input
                                type="text"
                                placeholder="Search for a patient..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-0 focus:outline-none focus:border-2 focus:border-primary-end"
                            />
                        </div>
                        <div className="flex items-center">
                            <Calendar className="text-gray-400 mr-2" />
                            <input
                                type="date"
                                value={dateFilter}
                                onChange={(e) => setDateFilter(e.target.value)}
                                className="px-4 py-2 border border-gray-300 rounded-md  focus:ring-0 focus:outline-none focus:border-2 focus:border-primary-end "
                            />
                        </div>
                    </div>
                </div>

                {/* Liste des rendez-vous */}

                    {isLoading ? (
                        <div className="h-[400px] w-full flex justify-center items-center">
                            <Loader size={"medium"} color={"primary-end"}/>
                        </div>
                    ) : (
                        errorStatus ?  <ServerErrorPage errorStatus={errorStatus} message={errorMessage}/> :(
                            filteredAppointments.length>0 ? (
                                    <div className="space-y-6">
                                        {currentAppointments.map((appointment) => (
                                        <AppointmentCard key={appointment.id} appointment={appointment} />))}
                                    </div>
                            ) : (
                                <div className="p-8 mt-24 flex items-center justify-center">
                                    <div className="flex flex-col">
                                        <Calendar className="h-16 w-16 text-primary-end mx-auto mb-4"/>
                                        <h2 className="text-2xl font-bold text-gray-800 mb-2 mx-auto">No Appointments
                                            </h2>
                                        <p className="text-gray-600 mb-4 mx-auto">There are currently no appointments
                                            scheduled.</p>
                                        <button
                                            className="px-4 hover:bg-primary-start  duration-300 mx-auto py-2 bg-primary-end text-white rounded-lg transition-all "
                                            onClick={() => {
                                                window.location.reload()
                                            }}
                                        >
                                            Refresh
                                        </button>
                                    </div>
                                </div>
                            )
                        )
                    )}

                {/* Pagination */}
                {appointmentList.length > appointmentsPerPage && (
                    <div className="mt-8 flex justify-center">
                        <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px"
                             aria-label="Pagination">
                            <button
                                onClick={() => paginate(currentPage - 1)}
                                disabled={currentPage === 1}
                                className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                            >
                                <span className="sr-only">Précédent</span>
                                <ChevronLeft className="h-5 w-5" aria-hidden="true"/>
                            </button>
                            {Array.from({length: Math.ceil(appointmentList.length / appointmentsPerPage) }).map((_, index) => (
                                <button
                                    key={index}
                                    onClick={() => paginate(index + 1)}
                                    className={`relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium ${
                                        currentPage === index + 1
                                            ? "z-10 bg-blue-50 border-blue-500 text-blue-600"
                                            : "text-gray-500 hover:bg-gray-50"
                                    }`}
                                >
                                    {index + 1}
                                </button>
                            ))}
                            <button
                                onClick={() => paginate(currentPage + 1)}
                                disabled={currentPage === Math.ceil(filteredAppointments.length / appointmentsPerPage)}
                                className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                            >
                                <span className="sr-only">Next</span>
                                <ChevronRight className="h-5 w-5" aria-hidden="true" />
                            </button>
                        </nav>
                    </div>
                )}
            </div>
        </CustomDashboard>
    )
}

// END OF FILE: src/Pages/Doctor/AppointmentList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/ConsultationHistoryDetails.jsx

import {
    Microscope,
    Pill,
    User,
    Calendar,
    Weight,
    Ruler,
    Thermometer,
    Activity,
    PillIcon as Pills,
    FileText,
    Stethoscope,
    ClipboardList, Heart, AlertTriangle, MapPin, Phone, ArrowLeft, Printer, Clock,
} from "lucide-react"
import {doctorNavLink} from "./lib/doctorNavLink.js";
import {DoctorNavBar} from "./DoctorComponents/DoctorNavBar.jsx";
import {useLocation, useNavigate} from "react-router-dom";
import {useCalculateAge} from "../../Utils/compute.js";
import {formatDateOnly, formatDateOnlyWithoutWeekDay, formatDateToTime} from "../../Utils/formatDateMethods.js";
import MedicalParametersCard from "./DoctorComponents/MedicalParametersCard.jsx";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {useEffect, useState} from "react";
import {GiMedicines} from "react-icons/gi";
import {FaEdit} from "react-icons/fa";
import EditConsultationModal from "./DoctorComponents/EditConsultationModal.jsx";

export  function ConsultationHistoryDetails() {

    const {state} = useLocation();
    const consultation = state?.consultation || {};

    const patientInfos = consultation?.idPatient;
    const medicalFolderPageInfos = consultation?.idMedicalFolderPage;

    const {calculateAge} = useCalculateAge();
    const { value: ageValue, unit: ageUnit } = calculateAge(patientInfos?.birthDate);


    const MedicalParametersInfos = [
        {
            icon: Weight,
            label: 'Weight',
            value: medicalFolderPageInfos?.parameters?.weight || '-',
            unit:  medicalFolderPageInfos?.parameters?.weight && ' Kg'
        },
        {
            icon: Ruler,
            label: 'Height',
            value: medicalFolderPageInfos?.parameters?.height || '-',
            unit: medicalFolderPageInfos?.parameters?.height && ' m²'
        },
        {
            icon: Thermometer,
            label: 'Temperature',
            value: medicalFolderPageInfos?.parameters?.temperature || '-',
            unit:  medicalFolderPageInfos?.parameters?.temperature && '°C'
        },
        {
            icon: Activity,
            label: 'Blood Pressure',
            value: medicalFolderPageInfos?.parameters?.bloodPressure || '-',
            unit: medicalFolderPageInfos?.parameters?.bloodPressure && ' mmHg'
        },
        {
            icon: Heart,
            label: 'Heart Rate',
            value: medicalFolderPageInfos?.parameters?.heartRate || '-',
            unit: medicalFolderPageInfos?.parameters?.heartRate && ' bpm'
        },
        {
            icon: AlertTriangle,
            label: 'Allergies',
            value: medicalFolderPageInfos?.parameters?.allergies || '-'
        },
        {
            icon: Pills,
            label: 'Family Medical History',
            value: medicalFolderPageInfos?.parameters?.familyMedicalHistory || '-'
        },
        {
            icon: FileText,
            label: 'Current Medication',
            value: medicalFolderPageInfos?.parameters?.currentMedication || '-'
        }
    ];

    useEffect(() => {
        console.log(consultation);
    }, []);


    const navigate = useNavigate();
    const [canOpenEditConsultationModal, setCanOpenEditConsultationModal] = useState(false);


    return (
        <CustomDashboard linkList={doctorNavLink} requiredRole={"Doctor"}>
            <DoctorNavBar/>
        <div className="space-y-6">

            {/* Patient Information */}
            <div className="bg-white rounded-lg shadow-sm p-6">
                <div className="bg-gradient-to-br from-primary-end to-primary-start rounded-lg shadow-lg p-6 mb-6">
                    <div className="flex items-center gap-6">
                        <div className="w-24 h-24 bg-white rounded-full flex items-center justify-center">
                            <User className="w-12 h-12 text-black"/>
                        </div>
                        <div className="flex-1 flex flex-col gap-3">
                            <div className="flex justify-between">
                                <h1 className="text-3xl font-bold text-white">CONSULTATION
                                    OF {patientInfos?.firstName || 'NGOUPAYE DJIO'} {patientInfos?.lastName || 'Thierry'}</h1>

                                <p className="text-white font-bold text-xl">
                                    {consultation?.consultationDate ? formatDateOnly(consultation?.consultationDate) : ' Any Date Specified'}
                                </p>
                            </div>
                            <div className="mt-3.5 grid grid-cols-3 gap-4 font-semibold">
                                <div className="flex items-center gap-2 text-white">
                                    <Calendar className="w-6 h-6"/>
                                    <div className="flex">
                                        <span>Born on {patientInfos?.birthDate && formatDateOnlyWithoutWeekDay(patientInfos?.birthDate) || 'Not Specified'}</span>
                                        <div className="flex gap-1 mt-0.5 ">
                                            <span className="ml-2 text-white text-sm">({ageValue}</span>
                                            <span className="text-white text-sm">{ageUnit})</span>
                                        </div>
                                    </div>
                                </div>
                                <div className="flex items-center gap-2 text-white">
                                    <MapPin className="w-6 h-6"/>
                                    <span>{patientInfos?.address || 'Not specified'}</span>
                                </div>
                                <div className="flex items-center gap-2 text-white">
                                    <Phone className="w-6 h-6"/>
                                    <span>{patientInfos?.phoneNumber || 'Not Specified'}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                {/* Go back */}
                <div className="bg-gray-100 shadow-md rounded-lg mb-5 p-4 ">
                    <div className="flex justify-between items-center ">
                        <div className="flex justify-start">
                            <button onClick={() => navigate(-1)}
                                    className="text-secondary text-xl transition-all duration-300 font-bold flex gap-2 items-center">
                                <div
                                    className="w-8 h-8 border-2 rounded-full flex justify-center items-center border-secondary">
                                    <ArrowLeft/>
                                </div>
                                <p className="text-[17px] mt-0.5">Back To Consultation History List</p>
                            </button>
                        </div>
                        <div className="flex gap-2">
                            <div className="flex items-center">
                                <button
                                    onClick={() => {setCanOpenEditConsultationModal(true)}}
                                    className="bg-secondary font-bold duration-300  text-white px-4 py-2 rounded-md hover:bg-primary-end hover:text-white transition-all mr-2">
                                    <FaEdit size={20} className="inline mr-2"/>
                                    Edit Consultation
                                </button>
                            </div>


                            <div className="flex items-center">
                                <button
                                    onClick={() => {
                                        window.print();
                                    }}
                                    className="bg-secondary font-bold duration-300  text-white px-4 py-2 rounded-md hover:bg-primary-end hover:text-white transition-all mr-2">
                                    <Printer size={20} className="inline mr-2"/>
                                    Print Medical Folder Page
                                </button>
                            </div>

                        </div>

                    </div>
                </div>


                {/* Medical Parameters */}
                <div className="w-full mx-auto">
                    <div className="bg-gray-100 flex flex-col w-full rounded-lg  p-6">
                        <p className="font-bold text-xl ml-5 text-secondary">Patient Medical Parameters</p>
                        <div className="grid grid-cols-4 gap-4 mt-6">
                            {MedicalParametersInfos.map((info, index) => (
                                <MedicalParametersCard
                                    key={index}
                                    icon={info.icon}
                                    label={info.label}
                                    value={info.value}
                                    unit={info.unit}
                                />
                            ))}
                        </div>
                    </div>
                </div>




                {/* Consultation Details */}
                <div className="bg-white rounded-lg shadow-sm p-6">

                    {/*Nurse Notes*/}

                    <div className="mb-10">
                        <h3 className="text-lg font-semibold mb-4 flex items-center">
                            <ClipboardList className="h-5 w-5 mr-2 text-blue-500"/>
                            Nurse Notes
                        </h3>
                        <p className="text-gray-700 ml-10">{medicalFolderPageInfos?.nurseNotes || consultation?.consultationNotes || 'Not Specified'}</p>
                    </div>


                    {/*Doctor notes*/}
                    <div className="mb-10">
                        <h3 className="text-lg font-semibold mb-4 flex items-center">
                            <ClipboardList className="h-5 w-5 mr-2 text-blue-500"/>
                            Doctor Notes
                        </h3>
                        <p className="text-gray-700 ml-10">{medicalFolderPageInfos?.doctorNote || 'Not Specified'}</p>
                    </div>


                    {/* Diagnostic */}
                    <div className="mb-8">
                        <h3 className="text-lg font-semibold mb-4 flex items-center">
                            <Stethoscope className="h-5 w-5 mr-2 text-blue-500"/>
                            Diagnostic
                        </h3>
                        <p className="text-gray-700 ml-10">{medicalFolderPageInfos?.diagnostic || 'Not Specified'}</p>
                    </div>




                    {/* Prescriptions */}
                    <div className="mb-10">
                        <h3 className="text-lg font-semibold mb-4 flex items-center">
                            <GiMedicines className="h-5 w-5 mr-2 text-blue-500"/>
                            Prescriptions
                        </h3>
                        {medicalFolderPageInfos?.prescriptions && medicalFolderPageInfos?.prescriptions.length > 0 && (
                            <div className="grid grid-cols-2 gap-5">
                                {medicalFolderPageInfos?.prescriptions.map((prescription) => {
                                    let drugsInfo = []
                                    drugsInfo = prescription?.prescriptionDrug;
                                    return (
                                        drugsInfo.length > 0 && drugsInfo.map((drugInfo, index) => (
                                    <div key={index} className="bg-gray-100 p-4 rounded-lg">
                                        <div className="grid grid-cols-2 gap-5">
                                            <div className="flex items-start">
                                                <Pill className="h-6 w-6 text-blue-500 mt-1" />
                                                <div className="ml-2">
                                                    <span className="text-sm text-gray-500">Medicine</span>
                                                    <p className="font-medium">{drugInfo?.medicament?.name}</p>
                                                </div>
                                            </div>
                                            <div className="flex items-start">
                                                <svg xmlns="http://www.w3.org/2000/svg"
                                                     className="h-6 w-6 text-blue-500 mt-1" fill="none"
                                                     viewBox="0 0 24 24" stroke="currentColor">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2}
                                                          d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"/>
                                                </svg>
                                                <div className="ml-2">
                                                    <span className="text-sm text-gray-500">Dosage</span>
                                                    <p className="font-medium">{drugInfo?.dosage ? drugInfo?.dosage : "not specified"}</p>
                                                </div>
                                            </div>
                                            <div className="flex items-start">
                                                <Clock className="h-6 w-6 text-blue-500 mt-1"/>
                                                <div className="ml-2">
                                                    <span className="text-sm text-gray-500">Frequency</span>
                                                    <p className="font-medium">{drugInfo?.frequency}</p>
                                                </div>
                                            </div>
                                            <div className="flex items-start">
                                                <Calendar className="h-6 w-6 text-blue-500 mt-1" />
                                                <div className="ml-2">
                                                    <span className="text-sm text-gray-500">Duration</span>
                                                    <p className="font-medium">{drugInfo?.duration ? drugInfo?.duration : "not specified"}</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                        ))
                                    )
                                })}
                            </div>
                        )}
                    </div>



                    {/* Exams */}
                    {medicalFolderPageInfos?.examRequests && medicalFolderPageInfos?.examRequests.length > 0 && (
                        <div className="mb-5">
                            <h3 className="text-lg font-semibold mb-4 flex items-center">
                                <FileText className="h-5 w-5 mr-2 text-blue-500"/>
                                Prescribed Exams
                            </h3>
                            <div className="grid grid-cols-2">
                                {medicalFolderPageInfos?.examRequests.map((exam, index) => (

                                    <div key={index} className="bg-gray-100 p-4 rounded-lg grid grid-cols-2">
                                        <div className="flex mb-2">
                                            <Microscope className="h-6 w-6 text-blue-500 mt-1"/>
                                            <div className="ml-2">
                                                <span className="text-sm text-gray-500">Exams</span>
                                                <p className="font-medium">{exam?.idExam?.examName}</p>
                                            </div>
                                        </div>

                                        {/*
                                        <div className="flex mb-2">
                                            <FileText className="h-6 w-6 text-blue-500 mt-1"/>
                                            <div className="ml-2">
                                                <span className="text-sm text-gray-500">Exam Description</span>
                                                <p className="font-medium">{exam?.idExam?.examDescription}</p>
                                            </div>
                                        </div>*/}

                                        <div className="flex mb-2">
                                            <FileText className="h-6 w-6 text-blue-500 mt-1"/>
                                            <div className="ml-2">
                                                <span className="text-sm text-gray-500">Instructions</span>
                                                <p className="font-medium">{exam?.notes}</p>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Appointment */}
                    {consultation?.appointments && consultation?.appointments.length > 0 && (
                        <div>
                            <h3 className="text-lg font-semibold mb-4 flex items-center">
                                <Clock className="h-5 w-5 mr-2 text-blue-500"/>
                                Scheduled Appointments
                            </h3>
                            <div className="grid grid-cols-2 gap-5">
                                {consultation?.appointments.map((appointment, index) => (
                                    <div key={index} className="bg-gray-100 p-4 rounded-lg">
                                        <div className="flex gap-20">
                                            <div className="mb-2">
                                                <div className="flex gap-2">
                                                    <Calendar className="text-blue-500"/>
                                                    <span className="text-sm text-gray-500">Date</span>
                                                </div>
                                                <p className="font-medium ml-8">{appointment?.atDate ? formatDateOnly(appointment?.atDate) : 'Not Specified'}</p>
                                            </div>
                                            <div>
                                                <div className="flex gap-2">
                                                    <Clock className="text-blue-500"/>
                                                    <span className="text-sm text-gray-500">Time</span>
                                                </div>
                                                <p className="text-gray-700 ml-8">{appointment?.atDate ? formatDateToTime(appointment?.atDate) : 'Not Specified'}</p>
                                            </div>
                                        </div>
                                        <div>
                                            <span className="text-sm text-gray-500">Reason</span>
                                            <p className="text-gray-700">{appointment?.reason}</p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>

            <EditConsultationModal
                isOpen={canOpenEditConsultationModal}
                onClose={() => setCanOpenEditConsultationModal(false)}
                consultation={consultation}
                onSave={()=>{alert("save")}}
            />
        </CustomDashboard>
    )
}

// END OF FILE: src/Pages/Doctor/ConsultationHistoryDetails.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/ConsultationHistory.jsx

import {useEffect, useState} from "react"
import { Search, Calendar, Eye, User, Clock, DollarSign } from "lucide-react"
import {doctorNavLink} from "./lib/doctorNavLink.js";
import {DoctorNavBar} from "./DoctorComponents/DoctorNavBar.jsx";
import {useCalculateAge} from "../../Utils/compute.js";
import {formatDateOnly, formatDateToTime} from "../../Utils/formatDateMethods.js";
import {getStateStyles} from "./lib/applyStyleFunction.js";
import {useNavigate} from "react-router-dom";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {useAuthentication} from "../../Utils/Provider.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";


export function ConsultationHistory() {
    const [searchTerm, setSearchTerm] = useState("");
    const [dateFilter, setDateFilter] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const {userData} = useAuthentication();
    const [consultationHistoryList, setConsultationHistoryList] = useState([]);
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");


    async function loadConsultationHistory(idDoctor)
    {
        setIsLoading(true);
        try
        {
            const response =  await axiosInstance.get(`/consultation/doctor/${idDoctor}/?history=true`);
            setIsLoading(false);
            if(response.status === 200)
            {
                setConsultationHistoryList(response?.data);
                setErrorStatus(null);
                setErrorMessage("");
                console.log(response?.data);
            }

        }
        catch (error)
        {
            setIsLoading(false);
            setErrorStatus(error.status);
            console.log(error);
        }
    }

    useEffect(() => {
        if (userData.id)
        {
            loadConsultationHistory(userData.id);
        }
    }, [userData.id]);


    const filteredConsultations = consultationHistoryList.filter((consultation) => {
        const fullName = consultation?.idPatient?.firstName + " "+ consultation?.idPatient?.lastName;
        const matchesSearch = fullName.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesDate = !dateFilter || new Date(consultation?.consultationDate || '').toISOString().split('T')[0] === dateFilter;
        return matchesSearch && matchesDate
    })


    const navigate = useNavigate();

    const {calculateAge} = useCalculateAge();


    return (
        <CustomDashboard linkList={doctorNavLink} requiredRole={"Doctor"}>
            <DoctorNavBar/>
            <div className="mx-auto p-6">
                <h1 className="text-2xl font-bold text-gray-800 mb-6">History of Consultations</h1>

                {/* Filters */}
                <div className="flex flex-col md:flex-row gap-4 mb-6">
                    <div className="relative flex-1">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                        <input
                            type="text"
                            placeholder="Search for a consultation according to the patient name or a date..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-full pl-10 pr-4 py-2 border border-gray-300  focus:border-none rounded-lg focus:ring-2 focus:ring-primary-end focus:outline-none transition-all duration-300"
                        />
                    </div>
                    <div className="flex items-center gap-4">
                        <Calendar className="text-gray-400 h-5 w-5" />
                        <input
                            type="date"
                            value={dateFilter}
                            onChange={(e) => setDateFilter(e.target.value)}
                            className="px-4 py-2 border border-gray-300 focus:border-none rounded-lg focus:ring-2 focus:ring-primary-end focus:outline-none transition-all duration-300"
                        />
                    </div>
                </div>

                {/* consultation history List */}
                {isLoading ? (
                    <div className="h-[500px] w-full flex justify-center items-center">
                        <Loader size={"medium"} color={"primary-end"}/>
                    </div>
                    ) : (
                        errorStatus ? <ServerErrorPage errorStatus={errorStatus} message={errorMessage}/>  :
                        ( filteredConsultations && filteredConsultations.length > 0 ?
                            (
                                < div >
                                    < table className="w-full border-separate border-spacing-y-2 ">
                                        <thead>
                                        <tr>
                                            <th className="px-6 py-3  bg-primary-end rounded-l-xl text-center text-md text-white font-bold uppercase">
                                                Patient
                                            </th>
                                            <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                                Date & Time
                                            </th>
                                            <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                                Reason for consultation
                                            </th>
                                            <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                                patient condition
                                            </th>
                                            <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">Price</th>
                                            <th className="px-6 py-3 text-center text-md text-white font-bold bg-primary-end rounded-r-xl uppercase ">
                                                Action
                                            </th>
                                        </tr>
                                        </thead>
                                        <tbody className="bg-white  border-separate ">
                                        {filteredConsultations.map((consultation) => {
                                            const patientInfo = consultation?.idPatient;
                                            return (
                                                <tr key={consultation.id} className="">
                                                    <td className={`px-6 py-5 rounded-l-xl bg-gray-100  border-l-4  ${getStateStyles(consultation?.statePatient).container}`}>
                                                        <div className="w-full flex items-center justify-center">
                                                            <User className="h-6 w-6 text-gray-400 mr-2"/>
                                                            <div>
                                                                <div
                                                                    className="text-md font-medium text-gray-900">{patientInfo?.firstName + " " + patientInfo?.lastName}</div>
                                                                <div className="text-md text-gray-500">
                                                                    {calculateAge(patientInfo?.birthDate).value + " " + calculateAge(patientInfo?.birthDate).unit}
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td className="px-6 py-5 bg-gray-100 ">
                                                        <div className="w-full flex justify-center items-center ">
                                                            <Clock className="h-5 w-5 text-gray-400 mr-2 mt-2"/>
                                                            <div>
                                                                <div className="text-sm text-center text-gray-900">{consultation?.consultationDate ? formatDateOnly(consultation?.consultationDate) : 'Not Specified'}</div>
                                                                <div className="text-sm  text-center text-gray-500">{consultation?.consultationDate ? formatDateToTime(consultation?.consultationDate) : 'Not Specified'} </div>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td className="px-6 py-5 bg-gray-100">
                                                        <div
                                                            className="text-sm text-center text-gray-900">{consultation?.consultationNotes || 'Not Specified'}</div>
                                                    </td>
                                                    <td className="px-6 py-4 bg-gray-100 ">
                                                        <div className="flex items-center justify-center text-sm text-gray-900">
                                                <span
                                                    className={`px-2 py-1 rounded-full border-2 text-sm font-medium ${getStateStyles(consultation?.statePatient).badge}`}>
                                                     {consultation?.statePatient || 'Not Critical'}
                                                </span>
                                                        </div>
                                                    </td>
                                                    <td className="px-6 py-5 bg-gray-100 ">
                                                        <div className="flex items-center justify-center text-sm text-gray-900">
                                                            <DollarSign className="h-5 w-5 text-gray-400 mr-1"/>
                                                            {consultation?.consultationPrice ? consultation?.consultationPrice.toLocaleString() + ' FCFA' : ' - '}
                                                        </div>
                                                    </td>
                                                    <td className="px-6 py-5  bg-gray-100 rounded-r-xl">
                                                        <button
                                                            onClick={() => {
                                                                navigate(`/doctor/consultation-history/details/${consultation?.id}`, {state: {consultation}})
                                                            }}
                                                            className="flex items-center text-primary-end hover:text-primary-start font-semibold hover:text-[17px] transition-all duration-500"
                                                        >
                                                            <Eye className="h-5 w-5 "/>
                                                            <span className="ml-2">Details</span>
                                                        </button>
                                                    </td>
                                                </tr>
                                            )
                                        })}
                                        </tbody>
                                    </table>
                                </div>
                            ): (
                                <div className="p-8 mt-24 flex items-center justify-center">
                                    <div className="flex flex-col">
                                        <Calendar className="h-16 w-16 text-primary-end mx-auto mb-4"/>
                                        <h2 className="text-2xl font-bold text-gray-800 mb-2 mx-auto">No Consultations
                                            History</h2>
                                        <p className="text-gray-600 mb-4 mx-auto text-center">You don't have any saved consultations yet. Once your medical consultations have been carried out, their history will appear here for better monitoring of your patients.</p>
                                        <button
                                            className="px-4 hover:bg-primary-start  duration-300 mx-auto py-2 bg-primary-end text-white rounded-lg transition-all "
                                            onClick={() => {
                                                window.location.reload()
                                            }}
                                        >
                                            Refresh
                                        </button>
                                    </div>
                                </div>
                            )
                        )
                    )
                }
            </div>
        </CustomDashboard>
    )
}

// END OF FILE: src/Pages/Doctor/ConsultationHistory.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/AppointmentCard.jsx

import PropTypes from 'prop-types';
import {Calendar, Clock, Phone, CheckCircle, Eye, ClipboardList} from 'lucide-react';
import {useCalculateAge} from "../../../Utils/compute.js";
import {FaUser} from "react-icons/fa";
import {formatDateToTime} from "../../../Utils/formatDateMethods.js";


export default function AppointmentCard ({ appointment }) {


    AppointmentCard.propTypes = {
        appointment: PropTypes.object.isRequired
    }


    const patientInfos = appointment?.idPatient;
    const {calculateAge} = useCalculateAge();
    const { value: ageValue, unit: ageUnit } = calculateAge(patientInfos?.birthDate);



    return (
        <div className="bg-gray-100 rounded-lg shadow-md p-4  hover:shadow-lg transition-shadow">
            <div className="flex justify-between items-start mb-4">
                <div className="flex">
                    <FaUser className="w-7 h-7 text-primary-end mr-2"/>
                    <h3 className="text-xl font-semibold  mt-0.5 text-gray-800">{patientInfos?.firstName + ' ' + patientInfos?.lastName}</h3>
                    <div className="flex gap-1 mt-1 ">
                        <span className="ml-2 text-gray-700 font-semibold text-md">({ageValue}</span>
                        <span className="text-gray-700 font-semibold text-md">{ageUnit})</span>
                    </div>
                </div>
                <div className={`px-4 py-2 rounded-full text-sm font-semibold border-2  ${appointment.state === "Pending" ? "bg-blue-100 text-blue-800 border-blue-500" : "bg-green-100 text-green-800 border-green-500"}`}>
                    {appointment?.state === "Pending" ? "Future" : "Finished"}
                </div>
            </div>
            <div className="grid grid-cols-2 gap-4 ml-10">
                <div className="flex items-center text-gray-600">
                    <Calendar className="h-6 w-6 mr-2 text-primary-end"/>
                    <span className="font-semibold">{new Date(appointment.atDate).toLocaleDateString()}</span>
                </div>
                <div className="flex items-center text-gray-600">
                    <Clock className="h-6 w-6 mr-2 text-primary-end"/>
                    <span className="font-semibold">{formatDateToTime(appointment?.atDate)}</span>
                </div>
                <div className="flex items-center text-gray-600">
                    <Phone className="h-6 w-6 mr-2 text-primary-end"/>
                    <span className="font-semibold">{patientInfos?.phoneNumber ? patientInfos?.phoneNumber : "697092048"}</span>
                </div>
                <div className="mt-1 flex flex-col">
                    <div className="flex ">
                        <ClipboardList className="h-6 w-6 mr-2 text-primary-end"/>
                        <h4 className="text-md font-medium text-gray-700 mb-2">Reason for medical appointment</h4>
                    </div>
                    <p className="text-gray-600 font-semibold ml-7">{appointment.reason}</p>
                </div>
            </div>
            <div className="mt-2 flex justify-end">
                {appointment.status === "upcoming" ? (
                    <button
                        className="px-4 py-2 bg-primary-end text-white rounded-lg font-bold hover:bg-primary-start transition-colors flex items-center">
                        <CheckCircle className="h-5 w-5 mr-2"/>
                        Start Consultation
                    </button>
                ) : (
                    <button
                        className="px-4 py-2 bg-primary-end text-white font-bold rounded-lg hover:bg-primary-start transition-colors flex items-center">
                        <Eye className="h-5 w-5 mr-2"/>
                        View Details
                    </button>
                )}
            </div>
        </div>
    )
}// END OF FILE: src/Pages/Doctor/DoctorComponents/AppointmentCard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/AppointmentPrescriptionCard.jsx

import PropTypes from "prop-types";

export default function AppointmentPrescriptionCard({applyInputStyle, onSubmit, endConsultation, appointmentDate, appointmentTime, setAppointmentDate, setAppointmentTime, requirements, setRequirements, appointmentReason, setAppointmentReason,isPrescribingAppointment}) {

    AppointmentPrescriptionCard.propTypes = {
        applyInputStyle: PropTypes.func.isRequired,
        onSubmit:PropTypes.func.isRequired,
        endConsultation: PropTypes.func.isRequired,
        appointmentDate: PropTypes.object.isRequired,
        appointmentTime: PropTypes.object.isRequired,
        appointmentReason: PropTypes.string.isRequired,
        setAppointmentReason: PropTypes.func.isRequired,
        setAppointmentDate: PropTypes.func.isRequired,
        setAppointmentTime: PropTypes.func.isRequired,
        requirements: PropTypes.string.isRequired,
        setRequirements: PropTypes.func.isRequired,
        isPrescribingAppointment: PropTypes.bool.isRequired,
    }

    return (
        <form className="space-y-6 bg-gray-100 rounded-lg p-6" onSubmit={onSubmit}>
            <div className="grid grid-cols-2 gap-5">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Date of next
                        appointment</label>
                    <input
                        value={appointmentDate}
                        onChange={(e) => setAppointmentDate(e.target.value)}
                        required={true}
                        type="date"
                        className={applyInputStyle()}/>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Appointment
                        time</label>
                    <input
                        type="time"
                        value={appointmentTime}
                        onChange={(e) => setAppointmentTime(e.target.value)}
                        required={true}
                        className={applyInputStyle()}
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Reasons for the appointment</label>
                <textarea
                    value={appointmentReason}
                    onChange={(e) => setAppointmentReason(e.target.value)}
                    required={true}
                    className={applyInputStyle()}
                    rows={2}
                    placeholder="Causes for scheduling the appointment"
                />
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Instructions for
                    tracking</label>
                <textarea
                    value={requirements}
                    onChange={(e) => setRequirements(e.target.value)}
                    required={true}
                    className={applyInputStyle()}
                    rows={2}
                    placeholder="Special instructions and necessary for the next appointment"
                />
            </div>

            <div className="flex justify-end gap-4">
                <button disabled={isPrescribingAppointment}
                        type="submit"
                        className="bg-primary-end hover:bg-primary-start font-semibold text-white py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed">
                    {isPrescribingAppointment ? "Processing..." : "Submit"}
                </button>

                <button type={"button"}
                        onClick={endConsultation}
                        className="px-4 py-2 bg-primary-end hover:bg-primary-start transition-all duration-300 text-white font-bold rounded-lg"
                >
                    End consultation
                </button>
            </div>
        </form>
    )
}// END OF FILE: src/Pages/Doctor/DoctorComponents/AppointmentPrescriptionCard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/ConsultationCard.jsx

import {  Clock, Phone, Stethoscope, User, FileText } from "lucide-react"
import PropTypes from "prop-types";
import {formatDateToTime} from "../../../Utils/formatDateMethods.js";
import {useCalculateAge} from "../../../Utils/compute.js";
import {useNavigate} from "react-router-dom";




export default function ConsultationCard ({ consultation }) {

    ConsultationCard.propTypes = {
        consultation: PropTypes.array.isRequired,
    }


    const patientInfos = consultation.idPatient;
    const { calculateAge } = useCalculateAge();
    const { value: ageValue, unit: ageUnit } = calculateAge('2000-01-01');
    const navigate = useNavigate();

    function getStateStyles  (state)  {
        const styles = {
            Critical: {
                container: "border-l-red-600",
                badge: "bg-red-100 border-red-500 text-red-500"
            },
            Serious: {
                container: "border-l-orange-500",
                badge: "bg-orange-100 border-orange-500  text-orange-500"
            },
            "Not Critical": {
                container: "border-l-yellow-500",
                badge: "bg-yellow-50 border-yellow-500 text-yellow-500"
            },
            Stable: {
                container: "border-l-green-500",
                badge: "bg-green-100 border-green-600 text-green-600"
            },
            Improving: {
                container: "border-l-blue-500",
                badge: "bg-blue-100 border-blue-600 text-blue-600"
            }
        };

        return styles[state] || { container: "border-l-gray-300", badge: "bg-gray-100 border-gray-600 text-gray-600" };
    }

    if (!consultation || Object.keys(consultation).length === 0) {
        return (
            <div className="h-full bg-gray-100 border rounded-2xl p-4 hover:-translate-y-1.5 hover:shadow-lg transition-all duration-500 border-l-4 border-blue-500 flex items-center justify-center">
                <div className="text-center space-y-4">
                    <Stethoscope className="h-16 w-16 text-blue-500 mx-auto" />
                    <h3 className="font-semibold text-gray-800 text-xl">No Consultation Data</h3>
                    <p className="text-gray-600">There are currently no consultations available.</p>
                </div>
            </div>
        )
    }

    return (
        <div className={`h-full bg-gray-100 border rounded-2xl p-4 hover:-translate-y-1.5 hover:shadow-lg transition-all duration-500 border-l-4 ${getStateStyles(consultation.statePatient).container}`}>
            <div className="space-y-3">
                <div className="flex items-center justify-between">
                    <div className="flex items-center">
                        <User className="h-5 w-5 text-gray-500 mr-2"/>
                        <h3 className="font-semibold text-gray-800">
                            {patientInfos?.firstName + " " + patientInfos?.lastName}
                            <div className="flex gap-1">
                                <span className="ml-2 text-gray-500 text-sm">{ageValue}</span>
                                <span className="text-gray-500 text-sm">{ageUnit}</span>
                            </div>
                        </h3>
                    </div>
                    <span
                        className={`px-2 py-1 rounded-full border-2 text-sm font-medium ${getStateStyles(consultation?.statePatient).badge}`}>
                        {consultation?.statePatient || 'Not Critical'}
                  </span>
                </div>

                <div className="flex ml-7 gap-2 text-gray-600">
                    <FileText className="h-5 w-5 mr-1 mt-2"/>
                    <p className=" ">Consultation Reason:</p>
                    <p className="text-black font-semibold">{consultation.consultationNotes}</p>
                </div>


                <div className="flex flex-col gap-4 ml-7">
                    <div className="flex items-center text-gray-500">
                        <Clock className="h-4 w-4 mr-1"/>
                        <span className="text-gray-500 mr-2"> Arrival Time: </span>
                        <span className="font-semibold text-black"> {formatDateToTime(consultation?.consultationDate)}</span>
                    </div>
                    <div className="flex items-center text-gray-500">
                        <Phone className="h-4 w-4 mr-1"/>
                        <span className="font-semibold text-black">{patientInfos?.phoneNumber}</span>
                    </div>
                </div>

                <div className="justify-end flex">
                    <button onClick={() => {navigate(`/doctor/consultation-list/details/${consultation.id}`, {state: {consultation}})}}
                            className="px-4 py-2 bg-primary-end text-white rounded-lg  transition-colors flex items-center justify-center">
                        <Stethoscope className="h-5 w-5 mr-2"/>
                        Consult Now
                    </button>
                </div>
            </div>
        </div>
    )
}
// END OF FILE: src/Pages/Doctor/DoctorComponents/ConsultationCard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/DiagnosticCard.jsx

import PropTypes from "prop-types";

export default function DiagnosticCard({applyInputStyle, setDiagnostic, setDoctorNotes, diagnostic, doctorNotes, handleConsult, endConsultation, isUpdatingConsultation}) {

    DiagnosticCard.propTypes = {
        applyInputStyle: PropTypes.func.isRequired,
        setDiagnostic: PropTypes.func.isRequired,
        setDoctorNotes: PropTypes.func.isRequired,
        diagnostic: PropTypes.string.isRequired,
        doctorNotes: PropTypes.string.isRequired,
        handleConsult: PropTypes.func.isRequired,
        endConsultation: PropTypes.func.isRequired,
        isUpdatingConsultation: PropTypes.bool.isRequired
    }


    return (
        <form className="space-y-3 bg-gray-100 rounded-lg p-6" onSubmit={handleConsult}>
            <div>
                <label
                    className="block text-sm font-medium text-gray-700 mb-2">Diagnostic</label>
                <textarea
                    required
                    rows={3}
                    value={diagnostic}
                    onChange={(e) => setDiagnostic(e.target.value)}
                    className={applyInputStyle()}
                    placeholder="Enter your diagnosis here"
                />
            </div>
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Doctor
                    Notes</label>
                <textarea
                    value={doctorNotes}
                    required
                    onChange={(e) => setDoctorNotes(e.target.value)}
                    rows={3}
                    className={applyInputStyle()}
                    placeholder="Please add your observations, notes and recommendations here"
                />
            </div>
            <div className="flex justify-end gap-4">
                <button disabled={isUpdatingConsultation}
                        type="submit"
                        className="bg-primary-end hover:bg-primary-start font-semibold text-white py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed">
                 {isUpdatingConsultation ? "Updating..." : "Submit"}
                </button>

                <button type={"button"}
                        onClick={endConsultation}
                        className="px-4 py-2 bg-primary-end hover:bg-primary-start transition-all duration-300 text-white font-bold rounded-lg"
                >
                    End consultation
                </button>
            </div>
        </form>
    )
}// END OF FILE: src/Pages/Doctor/DoctorComponents/DiagnosticCard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/DoctorNavBar.jsx

import {FaCog, FaEnvelope, FaSignOutAlt} from "react-icons/fa";
import {Tooltip} from "antd";
import {useAuthentication} from "../../../Utils/Provider.jsx";
import userIcon from "../../../assets/userIcon.png";

export function DoctorNavBar()
{

    const {logout , userData} = useAuthentication();

    const applyNavLinkBtnStyle = () => {
        return " w-12 h-10 mt-1 border-2 bg-gray-100 flex justify-center items-center rounded-xl shadow-xl hover:bg-secondary text-secondary text-xl hover:text-white transition-all duration-300";
    }


    return (
        <>
            <div className="border-b-2 m-3  border-b-gray-300">
                <div className="w-full h-[70px] flex justify-between">
                    <h1 className="ml-3 text-4xl text-secondary mt-3.5 font-bold">
                       Doctor
                    </h1>
                    <div className="flex gap-3 mt-3.5 mb-4 mr-5">
                        <Tooltip placement={"top"} title={"settings"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaCog/>
                            </button>

                        </Tooltip>

                        <Tooltip placement={"top"} title={"Messages"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaEnvelope/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"LogOut"}>
                            <button
                                onClick={() => {logout()}}
                                className={" w-12 h-10 mt-1 border-2 bg-red-400 flex justify-center items-center rounded-xl shadow-xl hover:bg-white text-white text-xl hover:text-red-500 transition-all duration-300"}>
                                <FaSignOutAlt/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"Profile"}>
                            <button className="ml-3 flex">
                                <p className="font-bold text-secondary text-xl mt-2">{"Hello " +userData?.username + "!"}</p>
                                <img src={userIcon} alt={"user-icon"} className="w-12 h-12 ml-2 mr-3"/>

                            </button>
                        </Tooltip>
                    </div>
                </div>
            </div>
        </>
    )
}// END OF FILE: src/Pages/Doctor/DoctorComponents/DoctorNavBar.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/EditConsultationModal.jsx

"use client"

import { useState, useEffect } from "react"
import Modal from "./Modal"
import PropTypes from "prop-types";

const EditConsultationModal = ({ isOpen, onClose, consultation, onSave }) => {



    EditConsultationModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        consultation: PropTypes.object.isRequired,
        onSave: PropTypes.func.isRequired
    }


    const [editedConsultation, setEditedConsultation] = useState(consultation);

    console.log(consultation);

    useEffect(() => {
        setEditedConsultation(consultation)
    }, [consultation])

    const handleChange = (e, section, index = null) => {
        const { name, value } = e.target
        if (section) {
            if (index !== null) {
                setEditedConsultation((prev) => ({
                    ...prev,
                    [section]: prev[section].map((item, i) => (i === index ? { ...item, [name]: value } : item)),
                }))
            } else {
                setEditedConsultation((prev) => ({
                    ...prev,
                    [section]: { ...prev[section], [name]: value },
                }))
            }
        } else {
            setEditedConsultation((prev) => ({ ...prev, [name]: value }))
        }
    }

    const handleSubmit = (e) => {
        e.preventDefault()
        onSave(editedConsultation)
        onClose()
    }

    const addItem = (section) => {
        setEditedConsultation((prev) => ({
            ...prev,
            [section]: [...prev[section], {}],
        }))
    }

    const removeItem = (section, index) => {
        setEditedConsultation((prev) => ({
            ...prev,
            [section]: prev[section].filter((_, i) => i !== index),
        }))
    }

    if (!consultation) return null

    return (
        <Modal isOpen={isOpen} onClose={onClose}>
            <form onSubmit={handleSubmit} className="space-y-6">
                {/* Diagnostic et Notes */}
                <div className="space-y-4">
                    <h3 className="text-xl font-semibold">Diagnostic et Notes</h3>
                    <div>
                        <label htmlFor="diagnostic" className="block text-sm font-medium text-gray-700 mb-2">
                            Diagnostic
                        </label>
                        <textarea
                            id="diagnostic"
                            name="diagnostic"
                            value={editedConsultation.diagnostic}
                            onChange={(e) => handleChange(e, "diagnosticAndNotes")}
                            rows={3}
                            className="w-full p-3 border-2 border-gray-300 bg-white rounded-lg focus:outline-none focus:border-primary-end focus:border-2 transition-all duration-500"
                        />
                    </div>
                    <div>
                        <label htmlFor="doctorNotes" className="block text-sm font-medium text-gray-700 mb-2">
                            Notes du médecin
                        </label>
                        <textarea
                            id="doctorNotes"
                            name="doctorNotes"
                            value={editedConsultation.doctorNotes}
                            onChange={(e) => handleChange(e, "diagnosticAndNotes")}
                            rows={3}
                            className="w-full p-3 border-2 border-gray-300 bg-white rounded-lg focus:outline-none focus:border-primary-end focus:border-2 transition-all duration-500"
                        />
                    </div>
                </div>

                {/* Prescriptions de médicaments */}
                <div className="space-y-4">
                    <h3 className="text-xl font-semibold">Prescriptions de médicaments</h3>
                    {editedConsultation?.idMedicalFolderPage?.prescriptions.map((prescription, index) => (
                        <div key={index} className="space-y-2 p-4 bg-gray-100 rounded-lg">
                            <input
                                type="text"
                                name="medicament"
                                value={prescription.medicament}
                                onChange={(e) => handleChange(e, "prescriptions", index)}
                                placeholder="Médicament"
                                className="w-full p-2 border-2 border-gray-300 rounded-lg"
                            />
                            <input
                                type="text"
                                name="dosage"
                                value={prescription.dosage}
                                onChange={(e) => handleChange(e, "prescriptions", index)}
                                placeholder="Dosage"
                                className="w-full p-2 border-2 border-gray-300 rounded-lg"
                            />
                            <button type="button" onClick={() => removeItem("prescriptions", index)} className="text-red-500">
                                Supprimer
                            </button>
                        </div>
                    ))}
                    <button type="button" onClick={() => addItem("prescriptions")} className="text-blue-500">
                        Ajouter une prescription
                    </button>
                </div>

                {/* Examens */}
                <div className="space-y-4">
                    <h3 className="text-xl font-semibold">Examens</h3>
                    {editedConsultation?.idMedicalFolderPage?.examRequests.map((exam, index) => (
                        <div key={index} className="space-y-2 p-4 bg-gray-100 rounded-lg">
                            <input
                                type="text"
                                name="examName"
                                value={exam.examName}
                                onChange={(e) => handleChange(e, "exams", index)}
                                placeholder="Nom de l'examen"
                                className="w-full p-2 border-2 border-gray-300 rounded-lg"
                            />
                            <textarea
                                name="notes"
                                value={exam.notes}
                                onChange={(e) => handleChange(e, "exams", index)}
                                placeholder="Notes pour l'examen"
                                rows={2}
                                className="w-full p-2 border-2 border-gray-300 rounded-lg"
                            />
                            <button type="button" onClick={() => removeItem("exams", index)} className="text-red-500">
                                Supprimer
                            </button>
                        </div>
                    ))}
                    <button type="button" onClick={() => addItem("exams")} className="text-blue-500">
                        Ajouter un examen
                    </button>
                </div>

                {/* Rendez-vous */}
                <div className="space-y-4">
                    <h3 className="text-xl font-semibold">Rendez-vous</h3>
                    <div>
                        <label htmlFor="appointmentDate" className="block text-sm font-medium text-gray-700 mb-2">
                            Date du prochain rendez-vous
                        </label>
                        <input
                            type="date"
                            id="appointmentDate"
                            name="appointmentDate"
                            value={editedConsultation?.appointment?.atDate}
                            onChange={(e) => handleChange(e, "appointment")}
                            className="w-full p-2 border-2 border-gray-300 rounded-lg"
                        />
                    </div>
                    <div>
                        <label htmlFor="appointmentTime" className="block text-sm font-medium text-gray-700 mb-2">
                            Heure du rendez-vous
                        </label>
                        <input
                            type="time"
                            id="appointmentTime"
                            name="appointmentTime"
                            value={editedConsultation?.appointment?.time}
                            onChange={(e) => handleChange(e, "appointment")}
                            className="w-full p-2 border-2 border-gray-300 rounded-lg"
                        />
                    </div>
                    <div>
                        <label htmlFor="appointmentReason" className="block text-sm font-medium text-gray-700 mb-2">
                            Raison du rendez-vous
                        </label>
                        <textarea
                            id="appointmentReason"
                            name="appointmentReason"
                            value={editedConsultation?.appointment?.reason}
                            onChange={(e) => handleChange(e, "appointment")}
                            rows={2}
                            className="w-full p-3 border-2 border-gray-300 bg-white rounded-lg focus:outline-none focus:border-primary-end focus:border-2 transition-all duration-500"
                        />
                    </div>
                </div>

                <div className="flex justify-end space-x-2">
                    <button
                        type="button"
                        onClick={onClose}
                        className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-all duration-300"
                    >
                        Annuler
                    </button>
                    <button
                        type="submit"
                        className="px-4 py-2 bg-primary-end hover:bg-primary-start text-white rounded-lg transition-all duration-300"
                    >
                        Enregistrer
                    </button>
                </div>
            </form>
        </Modal>
    )
}

export default EditConsultationModal

// END OF FILE: src/Pages/Doctor/DoctorComponents/EditConsultationModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/ExamPrescriptionCard.jsx

import {FaInfo} from "react-icons/fa";
import {Tooltip} from "antd";
import {MinusCircle, PlusCircle} from "lucide-react";
import PropTypes from "prop-types";

export default function ExamPrescriptionCard({exams, availableExams, setExams, removeExam, addExam, applyInputStyle, handlePrescribeExam,  endConsultation, isPrescribingExam})
{

    ExamPrescriptionCard.propTypes = {
        exams: PropTypes.array.isRequired,
        availableExams: PropTypes.array.isRequired,
        setExams: PropTypes.func.isRequired,
        removeExam: PropTypes.func.isRequired,
        addExam: PropTypes.func.isRequired,
        applyInputStyle: PropTypes.func.isRequired,
        handlePrescribeExam: PropTypes.func.isRequired,
        endConsultation: PropTypes.func.isRequired,
        isPrescribingExam: PropTypes.bool.isRequired
    };



    return (
        <form className="space-y-3" onSubmit={handlePrescribeExam}>
            {/*<div className="flex ml-7 gap-2">
                <div
                    className="w-7 h-7 flex justify-center items-center rounded-full border border-orange-500">
                    <FaInfo className="w-5 h-5 text-orange-500"/>
                </div>
                <p className="mt-1.5 text-[15px] italic font-semibold text-orange-500">
                    {"This section is dedicated to prescribing the patient's medical examinations.Please indicate the analyses, imaging or other investigations necessary fora precise diagnosis."}
                </p>
            </div> */}
            {exams.map((exam, index) => (
                <div key={exam.id || index} className="bg-gray-100 p-4 rounded-lg relative">
                    <Tooltip placement={"top"} title={"Remove Exam"}>
                        <button
                            type="button"
                            onClick={() => removeExam(exam.id)}
                            className="absolute top-4 right-4 text-red-500 hover:text-red-700 transition-all duration-300"
                        >
                            <MinusCircle className="h-6 w-6"/>
                        </button>
                    </Tooltip>
                    <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="md:col-span-2">
                            <label className="block text-sm font-medium text-gray-700 mb-2">Exam Type</label>
                            <select
                                required
                                onChange={(e) => {
                                    const isCustom = e.target.value === "another"
                                    setExams(exams.map((ex) => (ex.id === exam.id ? {
                                        ...ex,
                                        idExam: e.target.value,
                                        isCustom: isCustom,
                                    } : ex)))
                                }}
                                className={applyInputStyle()}
                            >
                                <option value="">Select an exam</option>
                                {availableExams.map((e) => (
                                    <option key={e.id} value={e.id}>
                                        {e.examName} - {e.examCost} FCFA
                                    </option>
                                ))}
                                <option value={"another"}>Another Exam</option>
                            </select>
                        </div>
                        {exam.isCustom && (
                            <div className="col-span-2">
                                <input
                                    required
                                    type="text"
                                    placeholder="Specify the exam"
                                    onChange={(e) => setExams(exams.map((ex) => (ex.id === exam.id ? {
                                        ...ex,
                                        examName: e.target.value,
                                        idExam: '',
                                    } : ex)))}
                                    className={applyInputStyle()}
                                />
                            </div>
                        )}
                        <div className="col-span-2">
                            <label
                                className="block text-sm font-medium text-gray-700 mb-2">Instructions</label>
                            <textarea
                                value={exam.notes}
                                onChange={(e) =>
                                    setExams(
                                        exams.map((ex) => (ex.id === exam.id ? {
                                            ...ex,
                                            notes: e.target.value
                                        } : ex)),
                                    )
                                }
                                required
                                className={applyInputStyle()}
                                placeholder="Special instructions for the exam"
                                rows={2}
                            />
                        </div>
                    </div>
                </div>
            ))}
            <button type="button" onClick={addExam}
                    className="flex font-semibold items-center text-primary-end text-md hover:text-xl transition-all duration-500">
                <PlusCircle className="h-7 w-7 mr-2"/>
                Add an exam
            </button>

            <div className="flex justify-end gap-4">
                <button disabled={isPrescribingExam} type="submit"
                        className="bg-primary-end hover:bg-primary-start text-white py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed">
                    {isPrescribingExam ? "Processing..." : "Submit"}
                </button>

                <button type={"button"}
                        onClick={endConsultation}
                        className="px-4 py-2 bg-primary-end hover:bg-primary-start transition-all duration-300 text-white font-bold rounded-lg"
                >
                    End consultation
                </button>
            </div>
        </form>
    )
}// END OF FILE: src/Pages/Doctor/DoctorComponents/ExamPrescriptionCard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/ExamPrescriptionForm.jsx

import  { useState } from 'react';
import { Search, User, ChevronDown,Plus, Trash2, FileText } from 'lucide-react';
import {Users, Calendar, ClipboardList, Pill,Stethoscope} from 'lucide-react';
import {DashBoard} from "../../../GlobalComponents/DashBoard.jsx";
import {links} from "../Doctor.jsx";


// Mock data for patients
const patients = [
  { id: 1, name: "Jean Dupont", age: 45, email: "jean@email.com", phone: "0123456789" },
  { id: 2, name: "Marie Martin", age: 32, email: "marie@email.com", phone: "0123456788" },
  { id: 3, name: "Pierre Durant", age: 28, email: "pierre@email.com", phone: "0123456787" },
];

export const ExamPrescriptionForm2 = () => {
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [searchPatient, setSearchPatient] = useState('');
  const [formData, setFormData] = useState({
    examDetails: '',
    examStatus: 'en_attente',
    notes: '',
  });
  const [exams, setExams] = useState([{ type: '', details: '' }]);

  const filteredPatients = patients.filter(patient =>
      patient.name.toLowerCase().includes(searchPatient.toLowerCase())
  );

  const addExam = () => {
    setExams([...exams, { type: '', details: '' }]);
  };

  const removeExam = (index) => {
    const newExams = exams.filter((_, i) => i !== index);
    setExams(newExams);
  };

  const updateExam = (index, field, value) => {
    const newExams = exams.map((exam, i) => {
      if (i === index) {
        return { ...exam, [field]: value };
      }
      return exam;
    });
    setExams(newExams);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const prescriptionData = {
      ...formData,
      exams,
      patientId: selectedPatient.id,
      // Autres champs qui seraient normalement gérés par le backend
      addDate: new Date().toISOString(),
      idMedicalFolderPage: 1, // À remplacer par la vraie valeur
      idMedicalStaff: 1, // À remplacer par la vraie valeur
    };
    console.log('Prescription d\'examens soumise:', prescriptionData);
    // Ici, vous ajouteriez la logique pour envoyer les données au serveur
  };

  if (!selectedPatient) {
    return (
        <div className="min-h-screen bg-gray-50 p-6">
          <div className="max-w-4xl mx-auto bg-white rounded-2xl shadow-lg overflow-hidden">
            <div className="p-8">
              <div className="flex items-center justify-center mb-8">
                <div className="w-16 h-16 bg-green-50 rounded-full flex items-center justify-center">
                  <FileText className="w-8 h-8 text-green-700" />
                </div>
              </div>

              <h1 className="text-2xl font-bold text-center text-gray-800 mb-2">
                Prescription d&#39;Examens Médicaux
              </h1>
              <p className="text-center text-gray-600 mb-8">
                Sélectionnez un patient pour commencer la prescription
              </p>

              <div className="bg-white rounded-xl">
                <div className="relative mb-4">
                  <input
                      type="text"
                      placeholder="Rechercher un patient..."
                      value={searchPatient}
                      onChange={(e) => setSearchPatient(e.target.value)}
                      className="w-full px-4 py-3 pl-12 rounded-lg border border-gray-200 focus:border-green-500 focus:ring-2 focus:ring-green-200 outline-none transition-all"
                  />
                  <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                </div>

                <div className="mt-4 max-h-96 overflow-y-auto">
                  {filteredPatients.map(patient => (
                      <button
                          key={patient.id}
                          onClick={() => setSelectedPatient(patient)}
                          className="w-full p-4 flex items-center space-x-4 hover:bg-green-50 rounded-lg transition-all group"
                      >
                        <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center group-hover:bg-green-200 transition-all">
                          <User className="w-6 h-6 text-green-700" />
                        </div>
                        <div className="flex-1 text-left">
                          <h3 className="font-medium text-gray-800">{patient.name}</h3>
                          <div className="text-sm text-gray-500 space-x-4">
                            <span>{patient.age} ans</span>
                            <span>•</span>
                            <span>{patient.phone}</span>
                          </div>
                        </div>
                      </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
    );
  }

  return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-6">
        <div className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl overflow-hidden border border-green-100">
          <div className="bg-gradient-to-r from-green-600 to-green-700 p-6 text-white">
            <h1 className="text-3xl font-bold">
              Prescription d&#39;Examens Médicaux
            </h1>
          </div>
          <div className="p-8">
            <div className="flex items-center justify-between mb-8">
              <h1 className="text-2xl font-bold text-gray-800">
                Prescription d&#39;Examens Médicaux
              </h1>
              <button
                  onClick={() => setSelectedPatient(null)}
                  className="text-green-700 hover:text-green-800 transition-colors"
              >
                <ChevronDown size={24} />
              </button>
            </div>

            <div className="mb-8 p-6 bg-green-50 rounded-xl">
              <div className="flex items-center space-x-4">
                <div className="w-16 h-16 bg-white rounded-full flex items-center justify-center">
                  <User className="w-8 h-8 text-green-700" />
                </div>
                <div>
                  <h2 className="text-lg font-medium text-gray-800">
                    {selectedPatient.name}
                  </h2>
                  <div className="text-sm text-gray-600 space-x-4">
                    <span>{selectedPatient.age} ans</span>
                    <span>•</span>
                    <span>{selectedPatient.phone}</span>
                    <span>•</span>
                    <span>{selectedPatient.email}</span>
                  </div>
                </div>
              </div>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="space-y-6">
                <div>
                  <label htmlFor="examDetails" className="block text-sm font-medium text-gray-700 mb-1">
                    Détails de l&#39;examen
                  </label>
                  <textarea
                      id="examDetails"
                      name="examDetails"
                      value={formData.examDetails}
                      onChange={handleInputChange}
                      rows={3}
                      className="w-full px-4 py-2 rounded-md border border-gray-300 focus:border-green-500 focus:ring-2 focus:ring-green-200 outline-none transition-all"
                      placeholder="Entrez les détails de l'examen ici..."
                  />
                </div>
                <div>
                  <label htmlFor="examStatus" className="block text-sm font-medium text-gray-700 mb-1">
                    Statut de l&#39;examen
                  </label>
                  <select
                      id="examStatus"
                      name="examStatus"
                      value={formData.examStatus}
                      onChange={handleInputChange}
                      className="w-full px-4 py-2 rounded-md border border-gray-300 focus:border-green-500 focus:ring-2 focus:ring-green-200 outline-none transition-all"
                  >
                    <option value="en_attente">En attente</option>
                    <option value="en_cours">En cours</option>
                    <option value="effectue">Effectué</option>
                  </select>
                </div>
                <div>
                  <label htmlFor="notes" className="block text-sm font-medium text-gray-700 mb-1">
                    Notes du médecin
                  </label>
                  <textarea
                      id="notes"
                      name="notes"
                      value={formData.notes}
                      onChange={handleInputChange}
                      rows={4}
                      className="w-full px-4 py-2 rounded-md border border-gray-300 focus:border-green-500 focus:ring-2 focus:ring-green-200 outline-none transition-all"
                      placeholder="Ajoutez vos notes ici..."
                  />
                </div>
              </div>

              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-800">
                  Examens prescrits
                </h3>
                {exams.map((exam, index) => (
                    <div key={index} className="p-4 border border-gray-200 rounded-md bg-white">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label htmlFor={`exam-type-${index}`} className="block text-sm font-medium text-gray-700 mb-1">
                            Type d&#39;examen
                          </label>
                          <input
                              type="text"
                              id={`exam-type-${index}`}
                              value={exam.type}
                              onChange={(e) => updateExam(index, 'type', e.target.value)}
                              className="w-full px-4 py-2 rounded-md border border-gray-300 focus:border-green-500 focus:ring-2 focus:ring-green-200 outline-none transition-all"
                              required
                          />
                        </div>
                        <div>
                          <label htmlFor={`exam-details-${index}`} className="block text-sm font-medium text-gray-700 mb-1">
                            Détails de l&#39;examen
                          </label>
                          <textarea
                              id={`exam-details-${index}`}
                              value={exam.details}
                              onChange={(e) => updateExam(index, 'details', e.target.value)}
                              rows={3}
                              className="w-full px-4 py-2 rounded-md border border-gray-300 focus:border-green-500 focus:ring-2 focus:ring-green-200 outline-none transition-all"
                          />
                        </div>
                      </div>
                      {exams.length > 1 && (
                          <button
                              type="button"
                              onClick={() => removeExam(index)}
                              className="mt-2 text-red-500 hover:text-red-700 focus:outline-none"
                              aria-label="Supprimer cet examen"
                          >
                            <Trash2 className="h-5 w-5" />
                          </button>
                      )}
                    </div>
                ))}
                <button
                    type="button"
                    onClick={addExam}
                    className="mt-2 flex items-center text-green-700 hover:text-green-800 focus:outline-none"
                >
                  <Plus className="h-5 w-5 mr-1" />
                  Ajouter un examen
                </button>
              </div>

              <button
                  type="submit"
                  className="w-full px-6 py-3 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 flex items-center justify-center"
              >
                <FileText className="mr-2" />
                Soumettre la prescription d&#39;examens
              </button>
            </form>
          </div>
        </div>
      </div>
  );
}





export default function ExamPrescriptionForm()
{
  return(
      <DashBoard linkList={links} requiredRole="doctor">
        <ExamPrescriptionForm2></ExamPrescriptionForm2>
      </DashBoard>
  )
}// END OF FILE: src/Pages/Doctor/DoctorComponents/ExamPrescriptionForm.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/ExamResults.jsx

import {useCallback, useState} from 'react';
import {

  Search, User, ChevronDown, ChevronUp, AlertCircle,
} from 'lucide-react';
import {DashBoard} from "../../../GlobalComponents/DashBoard.jsx";
import {links} from "../Doctor.jsx";




/// Mock data for patients and exam results
const patients = [
  { id: 1, name: "Jean Dupont", age: 45, email: "jean@email.com", phone: "0123456789" },
  { id: 2, name: "Marie Martin", age: 32, email: "marie@email.com", phone: "0123456788" },
  { id: 3, name: "Pierre Durant", age: 28, email: "pierre@email.com", phone: "0123456787" },
];

const examData = [
  {
    id: 1,
    patientId: 1,
    name: "Bilan sanguin",
    date: "2023-05-15",
    status: "available",
    results: "Globules rouges: 4.5 M/µL\nGlobules blancs: 7.5 K/µL\nPlaquettes: 250 K/µL",
    doctorNotes: "Résultats dans la norme. Aucune anomalie détectée.",
    addedDate: "2023-05-17",
    examRequestId: "ER001",
    medicalFileId: "MF001",
    doctorId: "DR001"
  },
  {
    id: 2,
    patientId: 1,
    name: "Radiographie pulmonaire",
    date: "2023-05-20",
    status: "pending",
    results: "",
    doctorNotes: "",
    addedDate: "",
    examRequestId: "ER002",
    medicalFileId: "MF001",
    doctorId: "DR002"
  },
  {
    id: 3,
    patientId: 2,
    name: "Test d'allergie",
    date: "2023-05-18",
    status: "available",
    results: "Positif pour les arachides et le pollen",
    doctorNotes: "Recommandation d'éviter les arachides et de prendre des antihistaminiques pendant la saison pollinique.",
    addedDate: "2023-05-19",
    examRequestId: "ER003",
    medicalFileId: "MF002",
    doctorId: "DR003"
  },
];



export const ExamResults2 = () => {
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [expandedExam, setExpandedExam] = useState(null);
  const [searchPatient, setSearchPatient] = useState('');

  const toggleExam = useCallback((id) => {
    setExpandedExam(prevId => prevId === id ? null : id);
  }, []);

  const filteredPatients = patients.filter(patient =>
      patient.name.toLowerCase().includes(searchPatient.toLowerCase())
  );

  const patientExams = selectedPatient
      ? examData.filter(exam => exam.patientId === selectedPatient.id)
      : [];

  if (!selectedPatient) {
    return (
        <div className="min-h-screen bg-gray-50 p-6">
          <div className="max-w-4xl mx-auto bg-white rounded-2xl shadow-lg overflow-hidden">
            <div className="p-8">
              <div className="flex items-center justify-center mb-8">
                <div className="w-16 h-16 bg-green-50 rounded-full flex items-center justify-center">
                  <User className="w-8 h-8 text-green-700" />
                </div>
              </div>

              <h1 className="text-2xl font-bold text-center text-gray-800 mb-2">
                Résultats d&#39;Examens
              </h1>
              <p className="text-center text-gray-600 mb-8">
                Sélectionnez un patient pour voir ses résultats d&#39;examens
              </p>

              <div className="bg-white rounded-xl">
                <div className="relative mb-4">
                  <input
                      type="text"
                      placeholder="Rechercher un patient..."
                      value={searchPatient}
                      onChange={(e) => setSearchPatient(e.target.value)}
                      className="w-full px-4 py-3 pl-12 rounded-lg border border-gray-200 focus:border-green-500 focus:ring-2 focus:ring-green-200 outline-none transition-all"
                  />
                  <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                </div>

                <div className="mt-4 max-h-96 overflow-y-auto">
                  {filteredPatients.map(patient => (
                      <button
                          key={patient.id}
                          onClick={() => setSelectedPatient(patient)}
                          className="w-full p-4 flex items-center space-x-4 hover:bg-green-50 rounded-lg transition-all group"
                      >
                        <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center group-hover:bg-green-200 transition-all">
                          <User className="w-6 h-6 text-green-700" />
                        </div>
                        <div className="flex-1 text-left">
                          <h3 className="font-medium text-gray-800">{patient.name}</h3>
                          <div className="text-sm text-gray-500 space-x-4">
                            <span>{patient.age} ans</span>
                            <span>•</span>
                            <span>{patient.phone}</span>
                          </div>
                        </div>
                      </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
    );
  }

  return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl overflow-hidden">
          <div className="p-8">
            <div className="flex items-center justify-between mb-8">
              <h1 className="text-2xl font-bold text-gray-800">
                Résultats d&#39;Examens
              </h1>
              <button
                  onClick={() => setSelectedPatient(null)}
                  className="text-green-700 hover:text-green-800 transition-colors"
              >
                <ChevronDown size={24} />
              </button>
            </div>

            <div className="mb-8 p-6 bg-green-50 rounded-xl">
              <div className="flex items-center space-x-4">
                <div className="w-16 h-16 bg-white rounded-full flex items-center justify-center">
                  <User className="w-8 h-8 text-green-700" />
                </div>
                <div>
                  <h2 className="text-lg font-medium text-gray-800">
                    {selectedPatient.name}
                  </h2>
                  <div className="text-sm text-gray-600 space-x-4">
                    <span>{selectedPatient.age} ans</span>
                    <span>•</span>
                    <span>{selectedPatient.phone}</span>
                    <span>•</span>
                    <span>{selectedPatient.email}</span>
                  </div>
                </div>
              </div>
            </div>

            {patientExams.length === 0 ? (
                <div className="bg-yellow-50 text-yellow-800 p-4 rounded-md mb-6 flex items-start">
                  <AlertCircle className="mr-2 flex-shrink-0 mt-1" />
                  <p>Aucun examen n&#39;a été prescrit pour ce patient.</p>
                </div>
            ) : (
                <div className="space-y-4">
                  {patientExams.map((exam) => (
                      <div key={exam.id} className="border border-gray-200 rounded-md overflow-hidden">
                        <button
                            onClick={() => toggleExam(exam.id)}
                            className="w-full p-4 text-left bg-white hover:bg-green-50 transition-colors flex justify-between items-center"
                        >
                          <span className="font-medium text-gray-800">{exam.name} - {exam.date}</span>
                          {expandedExam === exam.id ? <ChevronUp className="text-green-700" /> : <ChevronDown className="text-green-700" />}
                        </button>
                        {expandedExam === exam.id && (
                            <div className="p-4 bg-white">
                              <h3 className="font-semibold mb-2">Notes du médecin :</h3>
                              <p className="text-gray-700">{exam.doctorNotes}</p>
                              <p className="text-sm text-gray-500 mt-4">Date d&#39;ajout : {exam.addedDate}</p>
                            </div>
                        )}
                      </div>
                  ))}
                </div>
            )}
          </div>
        </div>
      </div>
  );
}

export default ExamResults;


export function ExamResults() {
  return (
      <DashBoard linkList={links} requiredRole="doctor">
        <ExamResults2 />
      </DashBoard>
  )
}// END OF FILE: src/Pages/Doctor/DoctorComponents/ExamResults.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/MedicalParametersCard.jsx

import PropTypes from "prop-types";

export default function MedicalParametersCard ({ icon : Icon, label, value, unit = '' }) {

    MedicalParametersCard.propTypes = {
        icon: PropTypes.element.isRequired,
        label: PropTypes.string.isRequired,
        value: PropTypes.number.isRequired,
        unit: PropTypes.string
    }

    return (
        <div className="bg-white p-3 rounded-lg">
            <div className="flex items-center text-gray-600">
                <Icon className="h-5 w-5 mr-2 text-blue-500"/>
                <span className="text-sm">{label}</span>
            </div>
            <p className="text-lg font-semibold mt-1 ml-8">{value}{unit}</p>
        </div>
    )
}// END OF FILE: src/Pages/Doctor/DoctorComponents/MedicalParametersCard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/MedicationPrescriptionCard.jsx

import {FaInfo} from "react-icons/fa";
import {Tooltip} from "antd";
import {MinusCircle, PlusCircle} from "lucide-react";
import PropTypes from "prop-types";

export default function MedicationPrescriptionCard({prescriptions, availableMedications, updatePrescription, removePrescription, addPrescription, applyInputStyle, handlePrescribe,  endConsultation, isPrescribing}) {


    MedicationPrescriptionCard.propTypes = {
        prescriptions: PropTypes.array.isRequired,
        availableMedications: PropTypes.array.isRequired,
        updatePrescription: PropTypes.func.isRequired,
        removePrescription: PropTypes.func.isRequired,
        addPrescription: PropTypes.func.isRequired,
        applyInputStyle: PropTypes.func.isRequired,
        handlePrescribe: PropTypes.func.isRequired,
        endConsultation: PropTypes.func.isRequired,
        isPrescribing: PropTypes.bool.isRequired,
    };





    return (
        <form className="space-y-4" onSubmit={handlePrescribe}>
            {/* <div className="flex ml-7 gap-2 mb-2">
                <div className="w-7 h-7 flex justify-center items-center rounded-full border border-orange-500">
                    <FaInfo className="w-5 h-5 text-orange-500"/>
                </div>
                <p className="mt-1.5 text-[15px] italic font-semibold text-orange-500">This
                    section is intended for prescribing medications. Please indicate the
                    recommended treatments, as well as the dosage and duration of treatment.</p>
            </div>*/}
            {prescriptions.map((prescription, index) => (
                <div key={prescription.id || index} className="bg-gray-100 p-4 rounded-lg relative">
                    <Tooltip placement={"top"} title={"Remove Medication"}>
                        <button
                            type="button"
                            onClick={() => removePrescription(prescription.id)}
                            className="absolute top-4 right-4 text-red-500 hover:text-red-600"
                        >
                            <MinusCircle className="h-6 w-6"/>
                        </button>
                    </Tooltip>
                    <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label
                                className="block text-sm font-medium text-gray-700 mb-2">Medicine</label>
                            <select
                                required
                                value={prescription.medicament}
                                onChange={(e) => updatePrescription(prescription.id, "medicament", e.target.value)}
                                className={applyInputStyle()}
                            >
                                <option value="">Select a medication</option>
                                {availableMedications.map((med) => (
                                    <option key={med.id} value={med.id}>
                                        {med.name}
                                    </option>
                                ))}
                                <option value={"Other"}>Other Medication</option>
                            </select>
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <label
                                    className="block text-sm font-medium text-gray-700 mb-2">Dosage</label>
                                <input
                                    required
                                    type="text"
                                    value={prescription.dosage}
                                    onChange={(e) => updatePrescription(prescription.id, "dosage", e.target.value)}
                                    className={applyInputStyle()}
                                    placeholder="Eg: 1000mg"
                                />
                            </div>

                            <div>
                                <label
                                    className="block text-sm font-medium text-gray-700 mb-2">Quantity</label>
                                <input
                                    required
                                    type="text"
                                    value={prescription.quantity}
                                    onChange={(e) => updatePrescription(prescription.id, "quantity", e.target.value)}
                                    className={applyInputStyle()}
                                    placeholder="Eg: 2 bottles"
                                />
                            </div>


                        </div>
                        <div>
                            <label
                                className="block text-sm font-medium text-gray-700 mb-2">Frequency</label>
                            <input
                                required
                                type="text"
                                value={prescription.frequency}
                                onChange={(e) => updatePrescription(prescription.id, "frequency", e.target.value)}
                                className={applyInputStyle()}
                                placeholder="Eg: 3 times per day"
                            />
                        </div>
                        <div>
                            <label
                                className="block text-sm font-medium text-gray-700 mb-2">Duration</label>
                            <input
                                required
                                type="text"
                                value={prescription.duration}
                                onChange={(e) => updatePrescription(prescription.id, "duration", e.target.value)}
                                className={applyInputStyle()}
                                placeholder="Eg: 5 days"
                            />
                        </div>
                        <div className="md:col-span-2">
                            <label
                                className="block text-sm font-medium text-gray-700 mb-2">Instructions</label>
                            <textarea
                                required
                                value={prescription.instructions}
                                onChange={(e) => updatePrescription(prescription.id, "instructions", e.target.value)}
                                className={applyInputStyle()}
                                placeholder="Special Instructions"
                                rows={2}
                            />
                        </div>
                    </div>
                </div>
            ))}
            <button
                type="button"
                onClick={addPrescription}
                className="flex items-center font-semibold text-md  text-primary-end hover:text-xl transition-all duration-500"
            >
                <PlusCircle className="h-7 w-7 mr-2"/>
                Add a medication
            </button>

            <div className="flex justify-end gap-4">
                <button disabled={isPrescribing} type="submit"
                        className="bg-primary-end hover:bg-primary-start text-white py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed">
                    {isPrescribing ? "Updating..." : "Submit"}
                </button>

                <button type={"button"}
                        onClick={endConsultation}
                        className="px-4 py-2 bg-primary-end hover:bg-primary-start transition-all duration-300 text-white font-bold rounded-lg"
                >
                    End consultation
                </button>
            </div>
        </form>
    )
}// END OF FILE: src/Pages/Doctor/DoctorComponents/MedicationPrescriptionCard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/Modal.jsx

import PropTypes from "prop-types";
import {FaEdit} from "react-icons/fa";
import {X} from "lucide-react";

const Modal = ({ isOpen, onClose, children }) => {


    Modal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        children: PropTypes.node.isRequired
    }
    if (!isOpen) return null

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-5xl h-[600px] overflow-y-auto">
                <div className="flex justify-between gap-2 mb-5 mt-2">
                    <div className="flex gap-2">
                        <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
                            <FaEdit className="w-10 h-10 text-primary-start"/>
                        </button>
                        <p className="text-3xl font-bold mt-0.5 text-primary-start">Edit Consultation</p>
                    </div>

                    <button onClick={onClose}  className="transition-all duration-300 w-10 h-10 rounded-full bg-red-100 flex items-center justify-center hover:bg-red-200 hover:text-red-700 text-red-500">
                        <X className="w-8 h-8 "/>

                    </button>
                </div>
                {children}
            </div>
        </div>
    )
}

export default Modal

// END OF FILE: src/Pages/Doctor/DoctorComponents/Modal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorComponents/SpecialistPrescriptionCard.jsx

import PropTypes from "prop-types";

export default function SpecialistPrescriptionCard({availableSpecialists, applyInputStyle})
{
    SpecialistPrescriptionCard.propTypes = {
        availableSpecialists: PropTypes.array.isRequired,
        applyInputStyle: PropTypes.func.isRequired
    }


    return (
        <div className="space-y-6 bg-gray-100 p-4 rounded-lg">
            <div>
                <label
                    className="block text-sm font-medium text-gray-700 mb-2">Specialist</label>
                <select className={applyInputStyle()}>
                    <option value="">Select a specialist</option>
                    {availableSpecialists.map((specialist) => (
                        <option key={specialist.id} value={specialist.id}>
                            {specialist.name}
                        </option>
                    ))}
                </select>
            </div>
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Reason for
                    prescription</label>
                <textarea
                    className={applyInputStyle()}
                    rows={2}
                    placeholder="Raison du transfert vers le spécialiste"
                />
            </div>
        </div>
    )
}// END OF FILE: src/Pages/Doctor/DoctorComponents/SpecialistPrescriptionCard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorConsultationDetail.jsx

import {
    Stethoscope,
    Weight,
    Thermometer,
    Activity,
    Heart,
    FileText,
    Ruler,
    AlertTriangle,
    PillIcon as Pills,
    Hospital,
    CalendarCheck,
    User, Calendar, MapPin, Phone, Printer, ArrowLeft
} from 'lucide-react';
import {useLocation, useNavigate} from "react-router-dom";
import {doctorNavLink} from "./lib/doctorNavLink.js";
import { DoctorNavBar } from './DoctorComponents/DoctorNavBar.jsx';
import {useEffect, useState} from "react";
import {useCalculateAge} from "../../Utils/compute.js";
import {combineToISOString, formatDateOnly, formatDateOnlyWithoutWeekDay} from "../../Utils/formatDateMethods.js";
import MedicalParametersCard from "./DoctorComponents/MedicalParametersCard.jsx";
import MedicationPrescriptionCard from "./DoctorComponents/MedicationPrescriptionCard.jsx";
import ExamPrescriptionCard from "./DoctorComponents/ExamPrescriptionCard.jsx";
import AppointmentPrescriptionCard from "./DoctorComponents/AppointmentPrescriptionCard.jsx";
import DiagnosticCard from "./DoctorComponents/DiagnosticCard.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import Wait from "../Modals/wait.jsx";
import {SuccessModal} from "../Modals/SuccessModal.jsx";
import {ErrorModal} from "../Modals/ErrorModal.jsx";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";
import {useAuthentication} from "../../Utils/Provider.jsx";





const consultationSteps = [
    {
        id:0,
        name: 'diagnostic',
        label: 'Diagnostic',
        icon: Stethoscope
    },
    {
        id:1,
        name: 'prescriptions',
        label: 'Prescriptions',
        icon: Pills
    },
    {
        id:2,
        name: 'exams',
        label: 'Exams',
        icon: Hospital
    },
    {
        id:4,
        name: 'appointment',
        label: 'Schedule an appointment',
        icon: CalendarCheck
    }
];


export function DoctorConsultationDetails() {



    const {state} = useLocation();
    const consultation = state?.consultation || {};
    const patientInfo = consultation?.idPatient;
    const medicalPageInfo = consultation?.idMedicalFolderPage;
    const [availableMedications, setAvailableMedication] = useState([]);
    const [availableExams, setAvailableExams]  = useState([]);
   // const [isLoading, setIsLoading] = useState(false);
    const [isUpdatingConsultation, setIsUpdatingConsultation] = useState(false);
    const [isPrescribing, setIsPrescribing] = useState(false);
    const [isPrescribingExam, setIsPrescribingExams] = useState(false);
    const [isEndingConsultation, setIsEndingConsultation] = useState(false);
    const [canOpenSuccessModal, setCanOpenSuccessModal] = useState(false);
    const [successMessage, setSuccessMessage] = useState("");
    const [canOpenErrorMessageModal, setCanOpenErrorMessageModal] = useState(false);
    const [errorMessage, setErrorMessage] = useState("");
    const [transactionErrorMessage, setTransactionErrorMessage] = useState("");
    const [isPrescribingAppointment, setIsPrescribingAppointment] = useState(false);






    const [activeTab, setActiveTab] = useState("diagnostic");
    const [prescriptions, setPrescriptions] = useState([
        {
            id: Date.now(),
            medicament: "",
            dosage: "",
            frequency: "",
            duration: "",
            instructions: "",
            quantity:"",
        },
    ]);
    const [exams, setExams] = useState([
        {
            id: Date.now(),
            examName: "",
            idExam:"",
            notes: "",
            isCustom: false,
            idConsultation: consultation?.id,
            idPatient: patientInfo?.id,
            idMedicalStaff: consultation?.idMedicalStaffGiver?.id
        },
    ]);
    const [diagnostic, setDiagnostic] = useState("");
    const [doctorNote, setDoctorNote] = useState("");
    const [appointmentDate, setAppointmentDate] = useState(new Date());
    const [appointmentTime, setAppointmentTime] = useState(new Date());
    const [requirements, setRequirements] = useState("");
    const [appointmentReason, setAppointmentReason] = useState("");




    const {calculateAge} = useCalculateAge();
    const { value: ageValue, unit: ageUnit } = calculateAge(patientInfo?.birthDate);
    const MedicalParametersInfos = [
        {
            icon: Weight,
            label: 'Weight',
            value: medicalPageInfo?.parameters?.weight || '-',
            unit:  medicalPageInfo?.parameters?.weight && ' Kg'
        },
        {
            icon: Ruler,
            label: 'Height',
            value: medicalPageInfo?.parameters?.height || '-',
            unit: medicalPageInfo?.parameters?.height && ' m²'
        },
        {
            icon: Thermometer,
            label: 'Temperature',
            value: medicalPageInfo?.parameters?.temperature || '-',
            unit:  medicalPageInfo?.parameters?.temperature && '°C'
        },
        {
            icon: Activity,
            label: 'Blood Pressure',
            value: medicalPageInfo?.parameters?.bloodPressure || '-',
            unit: medicalPageInfo?.parameters?.bloodPressure && ' mmHg'
        },
        {
            icon: Heart,
            label: 'Heart Rate',
            value: medicalPageInfo?.parameters?.heartRate || '-',
            unit: medicalPageInfo?.parameters?.heartRate && ' bpm'
        },
        {
            icon: AlertTriangle,
            label: 'Allergies',
            value: medicalPageInfo?.parameters?.allergies || '-'
        },
        {
            icon: Pills,
            label: 'Family Medical History',
            value: medicalPageInfo?.parameters?.familyMedicalHistory || '-'
        },
        {
            icon: FileText,
            label: 'Current Medication',
            value: medicalPageInfo?.parameters?.currentMedication || '-'
        }
    ];



    function addPrescription (){
        setPrescriptions([
            ...prescriptions,
            {
                id: Date.now(),
                medicament: "",
                dosage: "",
                frequency: "",
                duration: "",
                instructions: "",
                quantity:"",
            },
        ])
    }


    function getConsultationStepsStyles (isActive)  {
        return isActive
            ? 'border-b-4 border-primary-end text-primary-end font-bold'
            : 'text-gray-500 hover:text-gray-700';
    }


    function removePrescription (id)
    {
        setPrescriptions(prescriptions.filter((prescription) => prescription.id !== id))
    }



    function updatePrescription (id, field, value)
    {
        setPrescriptions(prescriptions.map((prescription) =>
            (
                prescription.id === id ?
                    {
                        ...prescription,
                        [field]: value
                    } :
                    prescription
            )
        ))
    }


    function addExam ()
    {
        setExams([
            ...exams,
            {
                id: Date.now(),
                examName: "",
                notes: "",
                isCustom: false,
                idConsultation: consultation?.id,
                idPatient: patientInfo?.id,
                idMedicalStaff: consultation?.idMedicalStaffGiver?.id
            },
        ])
    }


    async function loadMedication()
    {
        try {
            const response = await axiosInstance.get("/product/?page_size=100");
            if (response.status === 200)
            {
                console.log("medimentations ", response.data);
                setAvailableMedication(response.data.results);
            }

        }
        catch (error)
        {
            console.log(error);
        }

    }


    async function loadExams()
    {
        try
        {
            const response = await axiosInstance.get("/exam/?page_size=100");
            if (response.status === 200)
            {
                console.log("exams ", response.data);
                setAvailableExams(response.data.results);
            }

        }
        catch (error) {
            console.log(error);
        }
    }



    useEffect(() => {
        loadMedication();
        loadExams();
    }, []);


    function removeExam (id)  {
        setExams(exams.filter((e) => e.id !== id))
    }


    function applyInputStyle ()
    {
        return "w-full p-3 border-2 border-gray-300 bg-white rounded-lg focus:outline-none  focus:border-primary-end focus:border-2 transition-all duration-500";
    }







    async function updateConsultation(e)
    {
        e.preventDefault();
        setIsUpdatingConsultation(true);
        let medicalFolderPageData =
            {
                diagnostic: diagnostic,
                doctorNote: doctorNote,
            }
        try
        {
            const consultationUpdateResponse = await axiosInstance.put(`/medical-folder/${medicalPageInfo?.idMedicalFolder}/update-page/${medicalPageInfo?.id}/`, medicalFolderPageData);
            setIsUpdatingConsultation(false);
            if (consultationUpdateResponse.status === 200)
            {
                console.log("updated consultation with diagnostic and notes: ", consultationUpdateResponse?.data);
                setTransactionErrorMessage("");
                setDiagnostic("");
                setDoctorNote("");
            }
        }
        catch (error)
        {
            setIsUpdatingConsultation(false);
            setTransactionErrorMessage("Something went wrong when updating the consultation with your diagnostic and notes, please try again!");
            console.log(error);
        }

    }




    async function handlePrescribeMedicament(e)
    {
        e.preventDefault();
        setIsPrescribing(true);
        let prescriptionData = {

            prescription_drugs: prescriptions.map((prescription) => Object.fromEntries(Object.entries(prescription).filter(([key]) => key !== "id"))),
            note:'',
            idConsultation: consultation?.id,
            idPatient: patientInfo?.id,
            idMedicalStaff: consultation?.idMedicalStaffGiver?.id
        }

        try
        {
            const prescriptionResponse = await axiosInstance.post("/prescription/", prescriptionData);
            setIsPrescribing(false);
            if (prescriptionResponse.status === 201)
            {
                console.log("created prescription ",prescriptionResponse?.data);
                setTransactionErrorMessage("");
                setPrescriptions([
                    {
                        id: Date.now(),
                        medicament: "",
                        dosage: "",
                        frequency: "",
                        duration: "",
                        instructions: "",
                        quantity:"",
                    },
                ])
            }
        }
        catch (error)
        {
            setIsPrescribing(false);
            setTransactionErrorMessage("something when wrong when prescribing medications, please retry")
            console.log(error);
            
        }

        console.log(prescriptionData);
    }




    async function endConsultation()
    {
        setIsEndingConsultation(true);
        let updatedData =
            {
                state: 'InProgress'
            }
        try
        {
            const response = await axiosInstance.patch(`/consultation/${consultation?.id}/`, updatedData);
            setIsEndingConsultation(false);
            if (response.status === 200)
            {
                setSuccessMessage("Successfully Ending consultation !")
                setErrorMessage("");
                setCanOpenErrorMessageModal(false);
                setCanOpenSuccessModal(true);
                console.log(response?.data);
            }
        }
        catch (error)
        {
            setIsEndingConsultation(false);
            setSuccessMessage("");
            setErrorMessage(`Something went wrong, when ending consultation with ${patientInfo?.firstName + patientInfo?.lastName}, please try again!`);
            setCanOpenSuccessModal(false);
            setCanOpenErrorMessageModal(true);
            console.log(error);
        }
    }




    async function handlePrescribeExams(e)
    {
        e.preventDefault();
        setIsPrescribingExams(true);
        let examsData = exams.map((exam) => Object.fromEntries(Object.entries(exam).filter(([key]) => (key !== "id" && key !== "isCustom" && exam.idExam !== "another"))));


        try
        {
            const examRequestResponse = await axiosInstance.post("/exam-request/", examsData);
            setIsPrescribingExams(false);
            if (examRequestResponse.status === 201)
            {
                setTransactionErrorMessage("");
                console.log(examRequestResponse?.data);
            }
        }
        catch (error)
        {
            setIsPrescribingExams(false);
            setTransactionErrorMessage("Something when wrong  with the sever when prescribing exams, please retry !!");
            console.log(error);
        }
        console.log(examsData)
    }



    async function handlePrescribeAppointment(e)
    {
        e.preventDefault();
        setIsPrescribingAppointment(true);
        let appointmentData = {
            atDate: combineToISOString(appointmentDate, appointmentTime),
            reason: appointmentReason,
            requirements: requirements,
            idConsultation: consultation?.id,
            idPatient: patientInfo?.id,
            idMedicalStaff: consultation?.idMedicalStaffGiver?.id,
        }
        try
        {
            const appointmentRequestResponse = await axiosInstance.post("/appointment/", appointmentData);
            setIsPrescribingAppointment(false);
            if (appointmentRequestResponse.status === 201)
            {
                console.log(appointmentRequestResponse?.data);
            }
        }
        catch (error)
        {
            setIsPrescribingAppointment(false);
            setTransactionErrorMessage("Something when wrong  with the sever when creating your appointment, please retry !!");
            console.log(error);
        }
    }




    function closeConsultation()
    {
        navigate(-1);
    }




    const navigate = useNavigate();




    return (

        <CustomDashboard linkList={doctorNavLink} requiredRole={"Doctor"}>
            < DoctorNavBar/>
            <div className="flex flex-col min-h-screen p-8 ">

                {/* Patient Infos */}
                <div className="bg-gradient-to-br from-primary-end to-primary-start rounded-lg shadow-lg p-6 mb-6">
                    <div className="flex items-center gap-6">
                        <div className="w-24 h-24 bg-white rounded-full flex items-center justify-center">
                            <User className="w-12 h-12 text-black"/>
                        </div>
                        <div className="flex-1 flex flex-col gap-3">
                            <div className="flex justify-between">
                                <h1 className="text-3xl font-bold text-white">CONSULTATION
                                    OF {patientInfo?.firstName || 'Not Specified'} {patientInfo?.lastName || 'Not Specified'}</h1>

                                <p className="text-white font-bold text-xl">
                                    {formatDateOnly(new Date())}
                                </p>
                            </div>
                            <div className="mt-3.5 grid grid-cols-3 gap-4 font-semibold">
                                <div className="flex items-center gap-2 text-white">
                                    <Calendar className="w-6 h-6"/>
                                    <div className="flex flex-col">
                                        <span>Born on {patientInfo?.birthDate && formatDateOnlyWithoutWeekDay(patientInfo?.birthDate) || 'Not Specified'}</span>
                                        <div className="flex gap-1 mt-0.5 ">
                                            <span className="text-white text-sm">{ageValue}</span>
                                            <span className="text-white text-sm">{ageUnit}</span>
                                        </div>
                                    </div>
                                    </div>
                                    <div className="flex items-center gap-2 text-white">
                                        <MapPin className="w-6 h-6"/>
                                        <span>{patientInfo?.address || 'Not specified'}</span>
                                    </div>
                                    <div className="flex items-center gap-2 text-white">
                                        <Phone className="w-6 h-6"/>
                                        <span>{patientInfo?.phoneNumber || 'Not Specified'}</span>
                                    </div>
                                </div>
                        </div>
                    </div>
                </div>


                {/* Go back */}
                <div className="bg-gray-100 shadow-md rounded-lg mb-5 p-4 ">
                    <div className="flex justify-between items-center ">
                        <div className="flex justify-start">
                            <button onClick={() => navigate(-1)}
                                    className="text-secondary text-xl transition-all duration-300 font-bold flex gap-2 items-center">
                                <div className="w-8 h-8 border-2 rounded-full flex justify-center items-center border-secondary">
                                    <ArrowLeft/>
                                </div>
                                <p className="text-[17px] mt-0.5">Back To Consultation List</p>
                            </button>
                        </div>
                         <div className="flex items-center">
                            <button
                                onClick={() => {
                                    window.print()
                                }}
                                className="bg-secondary font-bold duration-300  text-white px-4 py-2 rounded-md hover:bg-primary-end hover:text-white transition-all mr-2">
                                <Printer size={20} className="inline mr-2"/>
                                Print Medical Folder Page
                            </button>
                        </div>
                    </div>
                </div>



                {/* Patient Parameters */}
                <div className="w-full mx-auto">
                    <div className="bg-gray-100 flex flex-col w-full rounded-lg  p-6">
                        <p className="font-bold text-xl ml-5 text-secondary">Patient Parameters</p>
                        <div className="grid grid-cols-4 gap-4 mt-6">
                            {MedicalParametersInfos.map((info, index) => (
                                <MedicalParametersCard
                                    key={index}
                                    icon={info.icon}
                                    label={info.label}
                                    value={info.value}
                                    unit={info.unit}
                                />
                            ))}
                        </div>
                    </div>


                    {/* Nurse Notes */}
                    <div className="mt-5 bg-gray-100 flex flex-col w-full rounded-lg  p-6 hover:shadow-lg hover:-translate-y-1.5 duration-500 transition-all">
                        <h3 className="mb-2 flex items-center font-bold text-xl ml-5 text-secondary">
                            Nurse Notes
                        </h3>
                        <p className="text-md text-gray-600">
                            {consultation?.consultationNotes || 'No note from the nurse'}
                        </p>
                    </div>


                    {/* Consultation Steps */}
                    <div className="mt-14">
                        <div className="flex space-x-14 mb-6 border-b">
                            {consultationSteps.map(tab => (
                                <button
                                    key={tab.id}
                                    onClick={() => setActiveTab(tab.name)}
                                    className={`pb-2 px-2 text-md transition-all duration-500 ease-in-out ${getConsultationStepsStyles(activeTab === tab.name)}`}
                                >
                                    <div className="flex items-center">
                                        <tab.icon className="h-5 w-5 mr-2"/>
                                        {tab.label}
                                    </div>
                                </button>
                            ))}
                        </div>
                        <div>
                            {transactionErrorMessage && <p className="text-red-500  font-semibold text-md ml-5 mt-2 mb-2">{transactionErrorMessage}</p>}
                            {activeTab === "diagnostic" && <DiagnosticCard applyInputStyle={applyInputStyle} setDiagnostic={setDiagnostic} setDoctorNotes={setDoctorNote} diagnostic={diagnostic} doctorNotes={doctorNote}  handleConsult={updateConsultation}  endConsultation={endConsultation}  isUpdatingConsultation={isUpdatingConsultation}   />}
                            {activeTab === "prescriptions" && <MedicationPrescriptionCard prescriptions={prescriptions} availableMedications={availableMedications} updatePrescription={updatePrescription} removePrescription={removePrescription} addPrescription={addPrescription} applyInputStyle={applyInputStyle} handlePrescribe={handlePrescribeMedicament} endConsultation={endConsultation} isPrescribing = {isPrescribing}/>}
                            {activeTab === "exams" && <ExamPrescriptionCard exams={exams} availableExams={availableExams} setExams={setExams} removeExam={removeExam} addExam={addExam} applyInputStyle={applyInputStyle} handlePrescribeExam={handlePrescribeExams} endConsultation={endConsultation} isPrescribingExam={isPrescribingExam}/>}
                            {activeTab === "appointment" && <AppointmentPrescriptionCard applyInputStyle={applyInputStyle} setAppointmentReason={setAppointmentReason} appointmentReason={appointmentReason} setRequirements={setRequirements} setAppointmentDate={setAppointmentDate} setAppointmentTime={setAppointmentTime} requirements={requirements} appointmentDate={appointmentDate} appointmentTime={appointmentTime} endConsultation={endConsultation} onSubmit={handlePrescribeAppointment} isPrescribingAppointment={isPrescribingAppointment}/>}
                        </div>
                    </div>
                </div>
            </div>

            {isEndingConsultation && <Wait/>}
            <SuccessModal isOpen={canOpenSuccessModal} canOpenSuccessModal={setSuccessMessage} message={successMessage} makeAction={closeConsultation}/>
            <ErrorModal isOpen={canOpenErrorMessageModal} onCloseErrorModal={setCanOpenErrorMessageModal} message={errorMessage}/>
        </CustomDashboard>
    );
}

// END OF FILE: src/Pages/Doctor/DoctorConsultationDetail.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorConsultationList.jsx

import {useEffect, useState} from "react"
import { Search, Calendar} from "lucide-react"
import {doctorNavLink} from "./lib/doctorNavLink.js";
import {DoctorNavBar} from "./DoctorComponents/DoctorNavBar.jsx";
import ConsultationCard from "./DoctorComponents/ConsultationCard.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import {useAuthentication} from "../../Utils/Provider.jsx";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";



export  function DoctorConsultationList() {
    const [searchTerm, setSearchTerm] = useState("");
    const currentDate = new Date().toLocaleDateString("en-EN", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
    });

    const [consultations, setConsultations] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");
    const filteredConsultations = consultations
        .filter((consultation) =>
            {
                const patientFullName = consultation?.idPatient?.firstName + consultation?.idPatient?.lastName
                return(
                    patientFullName.toLowerCase().includes(searchTerm.toLowerCase()) || consultation?.consultationReason.toLowerCase().includes(searchTerm.toLowerCase())
                )
            }

        )
       // .sort((a, b) => a.arrivalTime.localeCompare(b.arrivalTime))



    const {userData} = useAuthentication();



    useEffect(() => {
        async function loadDoctorConsultations() {
            setIsLoading(true);
            if (userData.id)
            {
                try
                {
                    const response = await axiosInstance.get(`/consultation/doctor/${userData?.id}/`);
                    setIsLoading(false);
                    if (response.status === 200)
                    {
                        setErrorMessage("");
                        setErrorStatus(null);
                        console.log(response);
                        setConsultations(response?.data);
                    }
                }
                catch (error)
                {
                    setIsLoading(false);
                    setErrorMessage("Something went wrong when retrieving your consultations, please retry later !!!");
                    setErrorStatus(error.status);
                    console.log(error);
                }
            }

        }
        loadDoctorConsultations();
    }, [userData.id]);


    return (
        <CustomDashboard linkList={doctorNavLink} requiredRole={"Doctor"}>
            <DoctorNavBar/>
            <div className="mx-auto p-6">
                <div className="mb-8">
                    <div className="flex justify-between items-start mb-4">
                        <div>
                            <h1 className="text-3xl font-bold text-gray-800 mb-2">Consultations of the day</h1>
                            <div className="flex items-center text-gray-600">
                                <Calendar className="h-5 w-5 mr-2" />
                                <span className="capitalize">{currentDate}</span>
                            </div>
                        </div>
                    </div>
                    <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                        <input
                            type="text"
                            placeholder="Search for a patient or reason for consultation..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-full pl-10 pr-4 py-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-2 focus:border-primary-end"
                        />
                    </div>
                </div>


                {isLoading ? (
                    <div className="h-[500px] w-full flex justify-center items-center">
                        <Loader size={"medium"} color={"primary-end"}/>
                    </div>
                ) : (
                    errorStatus ? <ServerErrorPage errorStatus={errorStatus} message={errorMessage}/> :
                        (filteredConsultations.length > 0 ? (
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                {filteredConsultations.map((consultation) => (
                                    <ConsultationCard key={consultation.id} consultation={consultation} />
                                ))}
                            </div>
                            ) :
                            (
                                <div className="p-8 mt-24 flex items-center justify-center">
                                    <div className="flex flex-col">
                                        <Calendar className="h-16 w-16 text-primary-end mx-auto mb-4" />
                                        <h2 className="text-2xl font-bold text-gray-800 mb-2 mx-auto">No Consultations Today</h2>
                                        <p className="text-gray-600 mb-4 mx-auto">There are currently no consultations scheduled for today.</p>
                                        <button
                                            className="px-4 hover:bg-primary-start  duration-300 mx-auto py-2 bg-primary-end text-white rounded-lg transition-all "
                                            onClick={() => {window.location.reload()}}
                                        >
                                            Refresh
                                        </button>
                                    </div>
                                </div>
                            )
                        )
                    )
                }
            </div>
        </CustomDashboard>
    )
}

// END OF FILE: src/Pages/Doctor/DoctorConsultationList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorExamsList.jsx

export function DoctorExamsList() {
    return (
        <div>
            DoctorExamsList
        </div>
    )
}// END OF FILE: src/Pages/Doctor/DoctorExamsList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/Doctor.jsx

import { Users, Calendar, ClipboardList,  FileSpreadsheet, UserPlus, FileText } from 'lucide-react';

import {useNavigate} from "react-router-dom";
import {AppRoutesPaths as AppRouterPaths} from "../../Router/appRouterPaths.js";
import {DoctorNavBar} from "./DoctorComponents/DoctorNavBar.jsx"
import {doctorNavLink} from "./lib/doctorNavLink.js"
import QuickActionButton from "../../GlobalComponents/QuickActionButton.jsx";
import StatCard from "../../GlobalComponents/StatCard.jsx";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";


export function Doctor() {


    const navigate = useNavigate();
    const stats = {
        patients: 5,
        medicalStaff: 6,
        consultations: 0,
        appointments: 0,
        scheduledExams: 0,
        totalRooms: 12
    };


    return (
        <CustomDashboard linkList={doctorNavLink} requiredRole={"Doctor"}>
            <DoctorNavBar/>
            <div className="p-6 space-y-6">
                <div className="bg-gradient-to-r from-primary-end to-primary-start rounded-lg p-6 text-white">
                    <h1 className="text-3xl font-bold mb-2">Welcome to the Doctor dashboard</h1>
                    <p className="opacity-90 font-semibold text-xl">
                        Manage your clinic efficiently and monitor all activities from this interface
                        centralized.
                    </p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <StatCard
                        icon={Users}
                        title="Patients"
                        value={stats?.patients}
                        description="Registered patients"
                        color="bg-blue-500"
                    />
                    <StatCard
                        icon={ClipboardList}
                        title="Consultations"
                        value={stats?.consultations}
                        description="Consultations today"
                        color="bg-purple-500"
                    />
                    <StatCard
                        icon={Calendar}
                        title="Appointements"
                        value={stats.appointments}
                        description="Scheduled appointments"
                        color="bg-orange-500"
                    />
                    <StatCard
                        icon={FileText}
                        title="Exams"
                        value={stats?.scheduledExams}
                        description="Prescribed exams"
                        color="bg-red-500"
                    />

                </div>

                <div className="bg-white rounded-lg shadow-lg p-6">

                    <h2 className="text-xl font-bold text-gray-800 mb-4">Quick Access</h2>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <QuickActionButton
                            icon={UserPlus}
                            label="Manage Patient"
                            onClick={() => navigate(AppRouterPaths.doctorPatientList)}
                        />

                        <QuickActionButton
                            icon={Calendar}
                            label="View Appointments List"
                            onClick={() => navigate(AppRouterPaths.doctorAppointment)}
                        />

                        <QuickActionButton
                            icon={FileSpreadsheet}
                            label="View Consultations List"
                            onClick={() => navigate(AppRouterPaths.doctorConsultationList)}
                        />
                    </div>
                </div>
            </div>
        </CustomDashboard>
    );
}




// END OF FILE: src/Pages/Doctor/Doctor.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/DoctorPatientList.jsx

import {FaArrowLeft, FaArrowRight, FaEdit, FaEye, FaSearch} from "react-icons/fa";
import {Tooltip} from "antd";
import {useEffect, useState} from "react";
import {ViewPatientDetailsModal} from "../Receptionist/ViewPatientDetailsModal.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import {DoctorNavBar} from "./DoctorComponents/DoctorNavBar.jsx";
import {doctorNavLink} from "./lib/doctorNavLink.js";
import {useNavigate} from "react-router-dom";
import {useAuthentication} from "../../Utils/Provider.jsx";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";
import {CustomDashboard} from "../../GlobalComponents/CustomDashboard.jsx";


export function DoctorPatientList()
{





    const [selectedPatientDetails, setSelectedPatientDetails] = useState({});
    const [canOpenViewPatientDetailModal, setCanOpenViewPatientDetailModal] = useState(false);
    const [patients, setPatients] = useState([]);
    const [numberOfPatients, setNumberOfPatients] = useState(0);
    const [nexUrlForRenderPatientList, setNexUrlForRenderPatientList] = useState("");
    const [previousUrlForRenderPatientList, setPreviousUrlForRenderPatientList] = useState("");
    const [actualPageNumber, setActualPageNumber] = useState(1);
    const {userData} = useAuthentication();
    const [isLoading, setIsLoading] = useState(false);
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");



    function calculateNumberOfSlide() {
        return numberOfPatients % 5 === 0 ? numberOfPatients / 5 : Math.floor(numberOfPatients / 5) + 1;
    }


    function updateActualPageNumber(action) {
        if (action === "next")
        {
            if(actualPageNumber < calculateNumberOfSlide())
            {
                setActualPageNumber(actualPageNumber + 1);
            }
        }
        else
        {
            if(actualPageNumber > 1)
            {
                setActualPageNumber(actualPageNumber - 1);
            }
        }
    }


    async function fetchPatients () {
        setIsLoading(true);
        try
        {
            const response = await axiosInstance.get(`/patient/doctor/${userData?.id}/`);
            setIsLoading(false);
            if (response.status === 200)
            {
                setErrorMessage("");
                setErrorStatus(null);
                console.log(response);
                setPatients(response.data);
                setNumberOfPatients(response.data.length);
                setNexUrlForRenderPatientList(response.data.next);
                setPreviousUrlForRenderPatientList(response.data.previous);
            }
        }
        catch (error)
        {
            setIsLoading(false);
            setPatients([]);
            setNumberOfPatients(0);
            setNexUrlForRenderPatientList("");
            setPreviousUrlForRenderPatientList("");
            setErrorMessage("Something went wrong when retrieving patient list");
            setErrorStatus(error.status);
            console.log(error);
        }

    }

    useEffect(() => {
        fetchPatients();
    }, []);





    async function fetchNextOrPreviousPatientList(url)
    {
        if(url)
        {
            setIsLoading(true);
            try
            {
                const response = await axiosInstance.get(url);
                setIsLoading(false);
                if (response.status === 200)
                {
                    setErrorMessage("");
                    setErrorStatus(null);
                    setPatients(response.data.results);
                    setNumberOfPatients(response.data.count);
                    setNexUrlForRenderPatientList(response.data.next);
                    setPreviousUrlForRenderPatientList(response.data.previous);
                }
            } catch (error) {
                setIsLoading(false);
                setPatients([]);
                setNumberOfPatients(0);
                setPreviousUrlForRenderPatientList("");
                setNexUrlForRenderPatientList("");
                setErrorStatus("Something went wrong when retrieving patient list");
                setErrorStatus(error.status);
                console.log(error);
            }
        }
    }






    const navigate = useNavigate();


    return (
        <CustomDashboard linkList={doctorNavLink} requiredRole={"Doctor"}>
            <DoctorNavBar/>
            <div className="mt-5 flex flex-col relative">

                {/*Header content with search bar*/}
                <div className="flex justify-between mb-5 mt-2">
                    <p className="font-bold text-3xl  ml-5"> List Of Patient </p>
                    <div className="flex mr-5">
                        <div className="flex w-[300px] h-10 border-2 border-secondary rounded-lg">
                            <FaSearch className="text-xl text-secondary m-2"/>
                            <input
                                type="text"
                                placeholder={"search for a specific patient"}
                                className="border-none focus:outline-none focus:ring-0"
                            />
                        </div>
                        <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
                            Search
                        </button>
                    </div>
                </div>

                {/*List of registered patients*/}

                {isLoading ? (
                    <div className="h-[500px] w-full flex justify-center items-center">
                        <Loader size={"medium"} color={"primary-end"}/>
                    </div>
                ) :( errorStatus ? (<ServerErrorPage errorStatus={errorStatus} message={errorMessage}/>) :
                        (
                            <div className="ml-5 mr-5 ">
                                <table className="w-full border-separate border-spacing-y-2">
                                    <thead>
                                    <tr className="">
                                        <th className="text-center text-white p-4 text-xl font-bold  bg-primary-end border-gray-200 rounded-l-2xl ">No</th>
                                        <th className="text-center text-white p-4 text-xl font-bold bg-primary-end border-gray-200">First
                                            Name
                                        </th>
                                        <th className="text-center text-white p-4 text-xl font-bold  bg-primary-end  border-gray-200 ">Last
                                            Name
                                        </th>
                                        <th className="text-center text-white p-4 text-xl font-bold bg-primary-end  border-gray-200 ">Gender</th>
                                        <th className="text-center text-white p-4 text-xl font-bold  bg-primary-end border-gray-200 ">Address</th>
                                        <th className="text-center text-white p-4 text-xl font-bold bg-primary-end flex-col rounded-r-2xl">
                                            <p>Operations</p>
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    {patients.map((patient, index) => (
                                        <tr key={patient.id || index} className="bg-gray-100">
                                            <td className="p-4 text-md text-blue-900 rounded-l-lg text-center">{index + 1}</td>
                                            <td className="p-4 text-md text-center font-bold">{patient.firstName}</td>
                                            <td className="p-4 text-md text-center">{patient.lastName}</td>
                                            <td className="p-4 text-md text-center">{patient.gender}</td>
                                            <td className="p-4 text-center text-md">{patient.address}</td>
                                            <td className="p-4 relative rounded-r-lg">
                                                <div className="w-full items-center justify-center flex gap-6">
                                                    <Tooltip placement={"left"} title={"view patient information"}>
                                                        <button
                                                            onClick={() => {
                                                                setSelectedPatientDetails(patient), setCanOpenViewPatientDetailModal(true)
                                                            }}
                                                            className="flex items-center justify-center w-9 h-9 text-primary-end text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                            <FaEye/>
                                                        </button>
                                                    </Tooltip>
                                                    <Tooltip placement={"right"} title={"View Medical Folder"}>
                                                        <button
                                                            onClick={() => {
                                                                navigate(`/doctor/patients/medical-folder/${patient?.id}`, {state: {patient}})
                                                            }}
                                                            className="flex items-center justify-center w-9 h-9 text-green-500 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                            <FaEdit/>
                                                        </button>
                                                    </Tooltip>
                                                </div>
                                            </td>
                                        </tr>
                                    ))}
                                    </tbody>
                                </table>


                                {/*Pagination content */}
                                <div className="fixed w-full justify-center -right-16 bottom-0 flex mt-6 mb-4">
                                    <div className="flex gap-4">
                                        <Tooltip placement={"left"} title={"previous slide"}>
                                            <button
                                                onClick={async () => {
                                                    await fetchNextOrPreviousPatientList(previousUrlForRenderPatientList), updateActualPageNumber("prev")
                                                }}
                                                className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                <FaArrowLeft/>
                                            </button>
                                        </Tooltip>
                                        <p className="text-secondary text-2xl font-bold mt-4">{actualPageNumber}/{calculateNumberOfSlide()}</p>
                                        <Tooltip placement={"right"} title={"next slide"}>
                                            <button
                                                onClick={async () => {
                                                    await fetchNextOrPreviousPatientList(nexUrlForRenderPatientList), updateActualPageNumber("next")
                                                }}
                                                className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                <FaArrowRight/>
                                            </button>
                                        </Tooltip>
                                    </div>
                                </div>


                                {/* Modals content */}
                                <ViewPatientDetailsModal isOpen={canOpenViewPatientDetailModal}
                                                         patient={selectedPatientDetails} onClose={() => {
                                    setCanOpenViewPatientDetailModal(false)
                                }}/>
                            </div>
                        )
                )}


            </div>
        </CustomDashboard>
    )
}// END OF FILE: src/Pages/Doctor/DoctorPatientList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/lib/applyStyleFunction.js

export function getStateStyles  (state)  {
    const styles = {
        Critical: {
            container: "border-l-red-500",
            badge: "bg-red-100 border-red-500 text-red-500"
        },
        Serious: {
            container: "border-l-orange-500",
            badge: "bg-orange-100 border-orange-500  text-orange-500"
        },
        "Not Critical": {
            container: "border-l-yellow-500",
            badge: "bg-yellow-100 border-yellow-500 text-yellow-500"
        },
        Stable: {
            container: "border-l-green-500",
            badge: "bg-green-100 border-green-500 text-green-500"
        },
        Improving: {
            container: "border-l-blue-500",
            badge: "bg-blue-100 border-blue-500 text-blue-500"
        }
    };

    return styles[state] || { container: "border-l-gray-300", badge: "bg-gray-100 border-gray-600 text-gray-600" };
}// END OF FILE: src/Pages/Doctor/lib/applyStyleFunction.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/lib/doctorNavLink.js

import {FaHistory, FaHome, FaNotesMedical, FaPlus, FaQuestionCircle, FaUsers} from "react-icons/fa";
import {AppRoutesPaths as appRoutes} from "../../../Router/appRouterPaths.js";
import { Calendar} from "lucide-react";
import {FiList} from "react-icons/fi";



export const doctorNavLink = [
    {
        name: "Dashboard",
        link: appRoutes.doctorPage,
        icon: FaHome,
    },
    {
        name: 'Patient List',
        icon: FaUsers,
        link: appRoutes.doctorPatientList,
    },

    {
        name: 'Consultation',
        icon: FiList,
        subLinks: [
            {
                icon: FiList,
                name: "Consultation List",
                link: appRoutes.doctorConsultationList
            },
            {
                icon: FaHistory,
                name: "Consultation History",
                link: appRoutes.doctorConsultationHistory
            },
          /*  {
                icon: FaPlus,
                name: "Add A Consultation",
                link: appRoutes.doctorAddConsultation
            }*/
        ]
    },
    {
        name: 'Appointments',
        icon: Calendar,
        link: appRoutes.doctorAppointment,
    },
   /* {
        name: 'Exams',
        icon: FaNotesMedical,
        link: appRoutes.doctorExamList,
    },*/
    {
        name: 'Help Center',
        icon: FaQuestionCircle,
        link: appRoutes.helpCenterPage,
    }
    
];// END OF FILE: src/Pages/Doctor/lib/doctorNavLink.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/New/DoctorAddConsultation.jsx

"use client"

import  { useState } from "react"
import { ArrowLeft, User, Calendar, CreditCard, Printer, FileText } from "lucide-react"

import { FaSearch, FaUser, FaChevronRight, FaHistory, FaPills } from "react-icons/fa"
import { BsExclamationTriangle } from "react-icons/bs"
import { IoMedkit } from "react-icons/io5"
import { GiStethoscope } from "react-icons/gi"
import { doctorNavLink } from "../lib/doctorNavLink.js"
import {DoctorNavBar} from "../DoctorComponents/DoctorNavBar.jsx"
import {CustomDashboard} from "../../../GlobalComponents/CustomDashboard.jsx";


const patients = [
  { id: 1, name: "Jean Dupont", age: 45, email: "jean@email.com", phone: "0123456789" },
  { id: 2, name: "Marie Martin", age: 32, email: "marie@email.com", phone: "0123456788" },
  { id: 3, name: "Pierre Durant", age: 28, email: "pierre@email.com", phone: "0123456787" },
]

const mockMedicalRecords = {
  1: [
    { date: "2023-05-15", symptoms: "Maux de tête", diagnosis: "Migraine", treatment: "Ibuprofène" },
    { date: "2023-03-02", symptoms: "Toux persistante", diagnosis: "Bronchite", treatment: "Antibiotiques" },
  ],
  2: [{ date: "2023-06-01", symptoms: "Douleurs abdominales", diagnosis: "Gastrite", treatment: "Antiacides" }],
  3: [],
  4: [
    {
      date: "2023-06-10",
      symptoms: "Fatigue chronique",
      diagnosis: "Anémie suspectée",
      treatment: "Examens complémentaires prescrits",
    },
  ],
}

const consultationTypes = ["Consultation générale", "Suivi", "Urgence", "Spécialiste", "Téléconsultation"]

export const MedicalRecord2 = () => {
  const [selectedPatient, setSelectedPatient] = useState(null)
  const [searchPatient, setSearchPatient] = useState("")
  const [formData, setFormData] = useState({
    date: new Date().toISOString().split("T")[0],
    cost: "",
    reason: "",
    notes: "",
    allergies: "",
    medicalHistory: "",
    consultationType: consultationTypes[0],
    temperature: "",
    bloodPressure: "",
    heartRate: "",
    weight: "",
    height: "",
    currentMedications: "",
    familyHistory: "",
    prescriptions: [],
    exams: [],
  })

  const filteredPatients = patients.filter((patient) =>
    patient.name.toLowerCase().includes(searchPatient.toLowerCase()),
  )

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData((prevState) => ({
      ...prevState,
      [name]: value,
    }))
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    console.log("Formulaire soumis:", formData)
    // Ici, vous ajouteriez la logique pour envoyer les données au serveur
  }

  const addPrescription = () => {
    setFormData((prevState) => ({
      ...prevState,
      prescriptions: [...prevState.prescriptions, { medication: "", dosage: "", frequency: "", duration: "" }],
    }))
  }

  const updatePrescription = (index, field, value) => {
    const newPrescriptions = [...formData.prescriptions]
    newPrescriptions[index][field] = value
    setFormData((prevState) => ({
      ...prevState,
      prescriptions: newPrescriptions,
    }))
  }

  const addExam = () => {
    setFormData((prevState) => ({
      ...prevState,
      exams: [...prevState.exams, { name: "", details: "" }],
    }))
  }

  const updateExam = (index, field, value) => {
    const newExams = [...formData.exams]
    newExams[index][field] = value
    setFormData((prevState) => ({
      ...prevState,
      exams: newExams,
    }))
  }

  if (!selectedPatient) {

        return (
            <div className="min-h-screen bg-gray-100">
              <div className="bg-gradient-to-r from-primary-end to-primary-start p-6 text-white">
                <h1 className="text-3xl font-bold mb-2">Carnet Médical</h1>
                <p className="opacity-90 font-semibold text-md">Sélectionnez un patient pour commencer la consultation</p>
              </div>
              <div className="container mx-auto px-4 py-8">
                <div className="bg-white rounded-lg shadow-lg overflow-hidden">
                  <div className="p-6">
                    <div className="relative mb-6">
                      <input
                        type="text"
                        placeholder="Rechercher un patient..."
                        value={searchPatient}
                        onChange={(e) => setSearchPatient(e.target.value)}
                        className="w-full px-4 py-3 pl-12 rounded-lg border border-gray-300 focus:border-primary-end focus:ring-2 focus:ring-primary-start outline-none transition-all"
                      />
                      <FaSearch className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                    </div>
      
                    <div className="space-y-4">
                      {filteredPatients.map((patient) => (
                        <button
                          key={patient.id}
                          onClick={() => setSelectedPatient(patient)}
                          className="w-full p-4 flex items-center space-x-4 hover:bg-gray-50 rounded-lg transition-all border border-gray-200"
                        >
                          <div className="w-12 h-12 bg-primary-start rounded-full flex items-center justify-center">
                            <FaUser className="w-6 h-6 text-white" />
                          </div>
                          <div className="flex-1 text-left">
                            <h3 className="font-medium text-gray-800">{patient.name}</h3>
                            <div className="text-sm text-gray-500 space-x-4">
                              <span>{patient.age} ans</span>
                              <span>•</span>
                              <span>{patient.phone}</span>
                            </div>
                          </div>
                          <FaChevronRight className="text-gray-400" />
                        </button>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )
        }

 
      

  return (
    <div className="flex flex-col min-h-screen p-4">
      <div className="bg-gradient-to-r from-primary-end to-primary-start rounded-lg p-6 text-white mb-5">
        <h1 className="text-3xl font-bold mb-2">
          Consultation de {selectedPatient.name} 
        </h1>
        <p className="opacity-90 font-semibold text-md">
          Enregistrez les détails de la consultation de {selectedPatient.name}, incluant le diagnostic établi, les examens
          effectués et le traitement prescrit.
        </p>
      </div>
      <div className="bg-gray-100 shadow-md rounded-lg mb-5 p-4">
        <div className="flex justify-between items-center">
          <div className="flex justify-start">
            <button
              onClick={() => setSelectedPatient(null)}
              className="text-secondary text-xl hover:text-primary-end transition-all duration-300 font-bold flex items-center"
            >
              <ArrowLeft />
              Retour à la liste des patients
            </button>
          </div>
          <div className="flex items-center">
            <button
              onClick={() => {
                alert("Implémentation de la fonction d'impression")
              }}
              className="bg-secondary font-bold duration-300 text-white px-4 py-2 rounded-md hover:bg-primary-end hover:text-white transition-all mr-2"
            >
              <Printer size={20} className="inline mr-2" />
              Imprimer
            </button>
          </div>
        </div>
      </div>
      <div className="flex-1 bg-gray-100 rounded-lg">
        <div className="bg-white shadow overflow-hidden sm:rounded-lg">
          <div className="border-t border-gray-200 px-4 py-5 sm:px-6">
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div className="col-span-1">
                  <p className="text-xl font-bold">Patient</p>
                  <div className="mt-1 text-md text-gray-900 flex items-center">
                    <User className="mr-2 h-8 w-8 text-gray-600" />
                    {selectedPatient.name}
                  </div>
                </div>
                <div className="col-span-1">
                  <p className="text-md font-bold">Date et Heure</p>
                  <div className="mt-1 text-md text-gray-900 flex items-center">
                    <Calendar className="mr-2 h-8 w-8 text-gray-600" />
                    <input
                      type="datetime-local"
                      id="date"
                      name="date"
                      value={formData.date}
                      onChange={handleInputChange}
                      className="border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                <div className="col-span-1">
                  <p className="text-md font-bold">Type de consultation</p>
                  <select
                    id="consultationType"
                    name="consultationType"
                    value={formData.consultationType}
                    onChange={handleInputChange}
                    className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  >
                    {consultationTypes.map((type, index) => (
                      <option key={index} value={type}>
                        {type}
                      </option>
                    ))}
                  </select>
                </div>
                <div className="col-span-1">
                  <p className="text-md font-bold">Coût</p>
                  <div className="mt-1 text-md text-blue-500 font-bold flex items-center">
                    <CreditCard className="mr-2 h-8 w-8 text-gray-400" />
                    <input
                      type="number"
                      id="cost"
                      name="cost"
                      value={formData.cost}
                      onChange={handleInputChange}
                      className="border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                      placeholder="0"
                    />
                    <span className="ml-2">FCFA</span>
                  </div>
                </div>
              </div>

              <div className="col-span-2">
                <div className="flex gap-2 mb-2 mt-4">
                  <IoMedkit className="w-7 h-7" />
                  <p className="text-md font-bold mt-1">Paramètres du patient</p>
                </div>
                <div className="mt-1 text-sm text-gray-900">
                  <div className="grid gap-4 grid-cols-4">
                    <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                      <FaPills className="w-7 h-7 text-primary-end mr-2" />
                      <div>
                        <p className="text-sm text-gray-600 font-semibold">Poids</p>
                        <input
                          type="number"
                          id="weight"
                          name="weight"
                          value={formData.weight}
                          onChange={handleInputChange}
                          className="text-xl font-semibold bg-transparent w-full"
                          placeholder="70"
                        />
                      </div>
                    </div>
                    <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                      <FaPills className="w-7 h-7 text-primary-end mr-2" />
                      <div>
                        <p className="text-sm text-gray-600 font-semibold">Taille</p>
                        <input
                          type="number"
                          id="height"
                          name="height"
                          value={formData.height}
                          onChange={handleInputChange}
                          className="text-xl font-semibold bg-transparent w-full"
                          placeholder="1.75"
                        />
                      </div>
                    </div>
                    <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                      <FaPills className="w-7 h-7 text-primary-end mr-2" />
                      <div>
                        <p className="text-sm text-gray-600 font-semibold">Température</p>
                        <input
                          type="number"
                          id="temperature"
                          name="temperature"
                          value={formData.temperature}
                          onChange={handleInputChange}
                          className="text-xl font-semibold bg-transparent w-full"
                          placeholder="37.0"
                        />
                      </div>
                    </div>
                    <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                      <FaPills className="w-7 h-7 text-primary-end mr-2" />
                      <div>
                        <p className="text-sm text-gray-600 font-semibold">Pression artérielle</p>
                        <input
                          type="text"
                          id="bloodPressure"
                          name="bloodPressure"
                          value={formData.bloodPressure}
                          onChange={handleInputChange}
                          className="text-xl font-semibold bg-transparent w-full"
                          placeholder="120/80"
                        />
                      </div>
                    </div>
                    <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                      <FaPills className="w-7 h-7 text-primary-end mr-2" />
                      <div>
                        <p className="text-sm text-gray-600 font-semibold">Fréquence cardiaque</p>
                        <input
                          type="number"
                          id="heartRate"
                          name="heartRate"
                          value={formData.heartRate}
                          onChange={handleInputChange}
                          className="text-xl font-semibold bg-transparent w-full"
                          placeholder="72"
                        />
                      </div>
                    </div>
                    <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                      <BsExclamationTriangle className="w-7 h-7 text-primary-end mr-2" />
                      <div>
                        <p className="text-sm text-gray-600 font-semibold">Allergies</p>
                        <input
                          type="text"
                          id="allergies"
                          name="allergies"
                          value={formData.allergies}
                          onChange={handleInputChange}
                          className="text-xl font-semibold bg-transparent w-full"
                          placeholder="Aucune"
                        />
                      </div>
                    </div>
                    <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                      <FaPills className="w-7 h-7 text-primary-end mr-2" />
                      <div>
                        <p className="text-sm text-gray-600 font-semibold">Médicaments actuels</p>
                        <input
                          type="text"
                          id="currentMedications"
                          name="currentMedications"
                          value={formData.currentMedications}
                          onChange={handleInputChange}
                          className="text-xl font-semibold bg-transparent w-full"
                          placeholder="Aucun"
                        />
                      </div>
                    </div>
                    <div className="bg-gray-200 p-3 rounded-lg flex items-center">
                      <FaHistory className="w-7 h-7 text-primary-end mr-2" />
                      <div>
                        <p className="text-sm text-gray-600 font-semibold">Antécédents familiaux</p>
                        <input
                          type="text"
                          id="familyHistory"
                          name="familyHistory"
                          value={formData.familyHistory}
                          onChange={handleInputChange}
                          className="text-xl font-semibold bg-transparent w-full"
                          placeholder="Aucun"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="col-span-2 mt-3">
                <div className="flex gap-2">
                  <GiStethoscope className="w-7 h-7 mb-1" />
                  <p className="text-md font-bold mt-1">Diagnostic</p>
                </div>
                <textarea
                  id="notes"
                  name="notes"
                  rows={4}
                  value={formData.notes}
                  onChange={handleInputChange}
                  className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="Entrez le diagnostic ici..."
                ></textarea>
              </div>

              <div className="col-span-2 mt-3">
                <div className="flex gap-2">
                  <FileText className="w-7 h-7 mb-1" />
                  <p className="text-md font-bold">Notes du médecin</p>
                </div>
                <textarea
                  id="reason"
                  name="reason"
                  rows={4}
                  value={formData.reason}
                  onChange={handleInputChange}
                  className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="Ajoutez vos notes ici..."
                ></textarea>
              </div>

              <div className="col-span-2">
                <div className="flex gap-2">
                  <FaPills className="w-7 h-7 mb-1" />
                  <p className="text-md font-bold">Prescriptions</p>
                </div>
                {formData.prescriptions.map((prescription, index) => (
                  <div key={index} className="mt-2 grid grid-cols-4 gap-2">
                    <input
                      type="text"
                      value={prescription.medication}
                      onChange={(e) => updatePrescription(index, "medication", e.target.value)}
                      placeholder="Médicament"
                      className="col-span-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    />
                    <input
                      type="text"
                      value={prescription.dosage}
                      onChange={(e) => updatePrescription(index, "dosage", e.target.value)}
                      placeholder="Dosage"
                      className="col-span-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    />
                    <input
                      type="text"
                      value={prescription.frequency}
                      onChange={(e) => updatePrescription(index, "frequency", e.target.value)}
                      placeholder="Fréquence"
                      className="col-span-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    />
                    <input
                      type="text"
                      value={prescription.duration}
                      onChange={(e) => updatePrescription(index, "duration", e.target.value)}
                      placeholder="Durée"
                      className="col-span-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    />
                  </div>
                ))}
                <button
                  type="button"
                  onClick={addPrescription}
                  className="mt-2 px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Ajouter une prescription
                </button>
              </div>

              <div className="col-span-2">
                <div className="flex gap-2">
                  <GiStethoscope className="w-7 h-7 mb-1" />
                  <p className="text-md font-bold mt-1">Examens</p>
                </div>
                {formData.exams.map((exam, index) => (
                  <div key={index} className="mt-2 grid grid-cols-2 gap-2">
                    <input
                      type="text"
                      value={exam.name}
                      onChange={(e) => updateExam(index, "name", e.target.value)}
                      placeholder="Nom de l'examen"
                      className="col-span-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    />
                    <input
                      type="text"
                      value={exam.details}
                      onChange={(e) => updateExam(index, "details", e.target.value)}
                      placeholder="Détails"
                      className="col-span-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    />
                  </div>
                ))}
                <button
                  type="button"
                  onClick={addExam}
                  className="mt-2 px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Ajouter un examen
                </button>
              </div>

              <button
                type="submit"
                className="w-full px-6 py-3 bg-gradient-to-r from-primary-end to-primary-start text-white rounded-lg hover:from-primary-start hover:to-primary-end transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary-start focus:ring-offset-2 flex items-center justify-center"
              >
                <FileText className="mr-2" />
                Enregistrer la consultation
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}


export  function DoctorAddConsultation() {
  return (
    <CustomDashboard linkList={doctorNavLink} requiredRole="Doctor">
        <DoctorNavBar/>
      <MedicalRecord2></MedicalRecord2>
    </>
  )
}

// END OF FILE: src/Pages/Doctor/New/DoctorAddConsultation.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/New/DoctorAppointementPage.jsx

import  { useState } from "react"
import {
  Calendar,
  Clock,
  AlertCircle,
  FileText,
  Pill,
  Stethoscope,
  ClipboardList,
  Users,
  Search,
  UserPlus,
  User,
  X,
  CheckCircle2,
  ArrowLeft,
} from "lucide-react"
import { FaSearch, FaUser, FaChevronRight } from "react-icons/fa"
import { DoctorNavBar } from "../DoctorComponents/DoctorNavBar.jsx"
import { doctorNavLink } from "../lib/doctorNavLink.js"
import {CustomDashboard} from "../../../GlobalComponents/CustomDashboard.jsx";

const patients = [
  { id: 1, name: "Jean Dupont", age: 45, email: "jean@email.com", phone: "0123456789" },
  { id: 2, name: "Marie Martin", age: 32, email: "marie@email.com", phone: "0123456788" },
  { id: 3, name: "Pierre Durant", age: 28, email: "pierre@email.com", phone: "0123456787" },
]

const doctors = [
  { id: 1, name: "Dr. Sophie Bernard", speciality: "Généraliste" },
  { id: 2, name: "Dr. Thomas Robert", speciality: "Cardiologue" },
  { id: 3, name: "Dr. Claire Dubois", speciality: "Pédiatre" },
]

export const AppointmentForm2 = () => {
  const [selectedPatient, setSelectedPatient] = useState(null)
  const [selectedDoctor, setSelectedDoctor] = useState(null)
  const [appointmentData, setAppointmentData] = useState({
    date: "",
    time: "",
    reason: "",
    requirements: "",
    status: "pending",
  })

  const [searchPatient, setSearchPatient] = useState("")
  const [searchDoctor, setSearchDoctor] = useState("")
  const [notification, setNotification] = useState(null)

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!selectedPatient || !selectedDoctor) {
      setNotification({
        message: "Veuillez sélectionner un patient et un médecin.",
        type: "error",
      })
      return
    }

    const appointmentPayload = {
      ...appointmentData,
      patientId: selectedPatient.id,
      doctorId: selectedDoctor.id,
    }

    try {
      // await createAppointment(appointmentPayload);
      setNotification({
        message: "Rendez-vous enregistré avec succès",
        type: "success",
      })
    } catch (error) {
      setNotification({
        message: "Erreur lors de l'enregistrement du rendez-vous",
        type: "error",
      })
    }
  }

  const filteredPatients = patients.filter((patient) =>
    patient.name.toLowerCase().includes(searchPatient.toLowerCase()),
  )

  const filteredDoctors = doctors.filter((doctor) => doctor.name.toLowerCase().includes(searchDoctor.toLowerCase()))

  if (!selectedPatient) {
    return (
      <div className="min-h-screen bg-gray-100">
        <div className="bg-gradient-to-r from-primary-end to-primary-start p-6 text-white">
          <h1 className="text-3xl font-bold mb-2">Nouveau Rendez-vous</h1>
          <p className="opacity-90 font-semibold text-md">
            Commencez par sélectionner un patient pour programmer le rendez-vous
          </p>
        </div>
        <div className="container mx-auto px-4 py-8">
          <div className="bg-white rounded-lg shadow-lg overflow-hidden">
            <div className="p-6">
              <div className="relative mb-6">
                <input
                  type="text"
                  placeholder="Rechercher un patient..."
                  value={searchPatient}
                  onChange={(e) => setSearchPatient(e.target.value)}
                  className="w-full px-4 py-3 pl-12 rounded-lg border border-gray-300 focus:border-primary-end focus:ring-2 focus:ring-primary-start outline-none transition-all"
                />
                <FaSearch className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
              </div>

              <div className="space-y-4">
                {filteredPatients.map((patient) => (
                  <button
                    key={patient.id}
                    onClick={() => setSelectedPatient(patient)}
                    className="w-full p-4 flex items-center space-x-4 hover:bg-gray-50 rounded-lg transition-all border border-gray-200"
                  >
                    <div className="w-12 h-12 bg-primary-start rounded-full flex items-center justify-center">
                      <FaUser className="w-6 h-6 text-white" />
                    </div>
                    <div className="flex-1 text-left">
                      <h3 className="font-medium text-gray-800">{patient.name}</h3>
                      <div className="text-sm text-gray-500 space-x-4">
                        <span>{patient.age} ans</span>
                        <span>•</span>
                        <span>{patient.phone}</span>
                      </div>
                    </div>
                    <FaChevronRight className="text-gray-400" />
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col min-h-screen p-4">
      <div className="bg-gradient-to-r from-primary-end to-primary-start rounded-lg p-6 text-white mb-5">
        <h1 className="text-3xl font-bold mb-2">Nouveau Rendez-vous pour {selectedPatient.name}</h1>
        <p className="opacity-90 font-semibold text-md">
          Remplissez les détails du rendez-vous pour {selectedPatient.name}
        </p>
      </div>
      <div className="bg-gray-100 shadow-md rounded-lg mb-5 p-4">
        <div className="flex justify-between items-center">
          <div className="flex justify-start">
            <button
              onClick={() => setSelectedPatient(null)}
              className="text-secondary text-xl hover:text-primary-end transition-all duration-300 font-bold flex items-center"
            >
              <ArrowLeft />
              Retour à la liste des patients
            </button>
          </div>
        </div>
      </div>
      <div className="flex-1 bg-gray-100 rounded-lg">
        <div className="bg-white shadow overflow-hidden sm:rounded-lg">
          <div className="border-t border-gray-200 px-4 py-5 sm:px-6">
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div className="col-span-1">
                  <p className="text-xl font-bold">Patient</p>
                  <div className="mt-1 text-md text-gray-900 flex items-center">
                    <User className="mr-2 h-8 w-8 text-gray-600" />
                    {selectedPatient.name}
                  </div>
                </div>
                <div className="col-span-1">
                  <p className="text-md font-bold">Médecin</p>
                  <div className="relative">
                    <input
                      type="text"
                      placeholder="Rechercher un médecin..."
                      value={searchDoctor}
                      onChange={(e) => setSearchDoctor(e.target.value)}
                      className="w-full px-4 py-3 pl-12 rounded-lg border border-gray-300 focus:border-primary-end focus:ring-2 focus:ring-primary-start outline-none transition-all"
                    />
                    <FaSearch className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                  </div>
                  <div className="mt-2 space-y-2">
                    {filteredDoctors.map((doctor) => (
                      <button
                        key={doctor.id}
                        type="button"
                        onClick={() => setSelectedDoctor(doctor)}
                        className={`w-full p-2 rounded-lg border transition-all ${
                          selectedDoctor?.id === doctor.id
                            ? "border-primary-end bg-primary-start text-white"
                            : "border-gray-200 hover:border-primary-start hover:bg-gray-50"
                        }`}
                      >
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center">
                            <User className="w-5 h-5 text-primary-end" />
                          </div>
                          <div className="text-left">
                            <h4 className="font-medium">{doctor.name}</h4>
                            <p className="text-sm opacity-75">{doctor.speciality}</p>
                          </div>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Date</label>
                  <div className="relative">
                    <input
                      type="date"
                      value={appointmentData.date}
                      onChange={(e) =>
                        setAppointmentData({
                          ...appointmentData,
                          date: e.target.value,
                        })
                      }
                      className="w-full px-4 py-3 pl-12 rounded-lg border border-gray-300 focus:border-primary-end focus:ring-2 focus:ring-primary-start outline-none"
                      required
                    />
                    <Calendar className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Heure</label>
                  <div className="relative">
                    <input
                      type="time"
                      value={appointmentData.time}
                      onChange={(e) =>
                        setAppointmentData({
                          ...appointmentData,
                          time: e.target.value,
                        })
                      }
                      className="w-full px-4 py-3 pl-12 rounded-lg border border-gray-300 focus:border-primary-end focus:ring-2 focus:ring-primary-start outline-none"
                      required
                    />
                    <Clock className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                  </div>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Raison du rendez-vous</label>
                <textarea
                  value={appointmentData.reason}
                  onChange={(e) =>
                    setAppointmentData({
                      ...appointmentData,
                      reason: e.target.value,
                    })
                  }
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-primary-end focus:ring-2 focus:ring-primary-start outline-none resize-none"
                  rows={3}
                  required
                  placeholder="Décrivez la raison de la consultation..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Exigences particulières</label>
                <textarea
                  value={appointmentData.requirements}
                  onChange={(e) =>
                    setAppointmentData({
                      ...appointmentData,
                      requirements: e.target.value,
                    })
                  }
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-primary-end focus:ring-2 focus:ring-primary-start outline-none resize-none"
                  rows={2}
                  placeholder="Ex: Être à jeun, apporter les résultats d'analyses..."
                />
              </div>

              <button
                type="submit"
                className="w-full px-6 py-3 bg-gradient-to-r from-primary-end to-primary-start text-white rounded-lg hover:from-primary-start hover:to-primary-end transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary-start focus:ring-offset-2 flex items-center justify-center"
              >
                <FileText className="mr-2" />
                Confirmer le rendez-vous
              </button>
            </form>

            {notification && (
              <div
                className={`mt-6 p-4 rounded-lg flex items-center space-x-3 ${
                  notification.type === "success"
                    ? "bg-green-50 border border-green-200"
                    : "bg-red-50 border border-red-200"
                }`}
              >
                {notification.type === "success" ? (
                  <CheckCircle2 className="w-5 h-5 text-green-700" />
                ) : (
                  <AlertCircle className="w-5 h-5 text-red-700" />
                )}
                <p className={`text-sm ${notification.type === "success" ? "text-green-700" : "text-red-700"}`}>
                  {notification.message}
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

export function DoctorAppointementPage() {
  return (
    <CustomDashboard linkList={doctorNavLink} requiredRole="Doctor">
      <DoctorNavBar />
      <AppointmentForm2 />
    </CustomDashboard>
  )
}



// END OF FILE: src/Pages/Doctor/New/DoctorAppointementPage.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/PatientMedicalFolder.jsx

export function PatientMedicalFolder()
{
    return (
        <div>
            Medical Folder
        </div>)
}// END OF FILE: src/Pages/Doctor/PatientMedicalFolder.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Doctor/Specialist.jsx

export function Specialist()
{
    return (
        <div>
            Specialist
        </div>
    )
}// END OF FILE: src/Pages/Doctor/Specialist.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/HelpCenter/HelpCenter.jsx

import { useNavigate } from "react-router-dom";
import ChatWindow from "../../GlobalComponents/ChatWindow.jsx";

export function HelpCenter () {


    const navigate = useNavigate(); 



  return (
    <div className="min-h-screen bg-gray-100">
      {/* En-tête */}
      <div className="border-b-2 m-3  border-b-gray-300">
                <div className="w-full h-[70px] flex justify-between">
                    <h1 className="ml-3 text-4xl text-secondary mt-3.5 font-bold">
                        Help Center
                    </h1>
                </div>
            </div>
            <div className="min-h-screen bg-gray-100">

      {/* Flèche de retour */}
      <button
        onClick={() => navigate(-1)}
        className="flex items-center text-blue-800 hover:text-blue-900 mt-4 ml-6"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-6 w-6 mr-2"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M10 19l-7-7m0 0l7-7m-7 7h18"
          />
        </svg>
        Back
      </button>


      {/* Barre de recherche */}
      <div className="container mx-auto mt-8 px-6">
        <input
          type="text"
          placeholder="Rechercher dans l'aide..."
          className="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-800"
        />
      </div>

      {/* Help Categories */}
        <div className="container mx-auto mt-8 px-6">
            <h2 className="text-xl font-semibold mb-4">Help Categories</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-lg font-medium mb-2">Consultation & Appointments</h3>
                <p className="text-gray-600">Guide to scheduling or canceling an appointment.</p>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-lg font-medium mb-2">Payments & Billing</h3>
                <p className="text-gray-600">Information on payments and refunds.</p>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-lg font-medium mb-2">Technical Issues</h3>
                <p className="text-gray-600">Troubleshooting technical issues.</p>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-lg font-medium mb-2">FAQ</h3>
                <p className="text-gray-600">Answers to frequently asked questions.</p>
                </div>
            </div>
        </div>


      
      {/* Popular Articles */}
            <div className="container mx-auto mt-8 px-6">
                <h2 className="text-xl font-semibold mb-4">Popular Articles</h2>
                <div className="space-y-4">
                    <div className="bg-white p-4 rounded-lg shadow-md">
                        <h3 className="text-lg font-medium">How to book an appointment?</h3>
                    </div>
                    <div className="bg-white p-4 rounded-lg shadow-md">
                        <h3 className="text-lg font-medium">How to check payment history?</h3>
                    </div>
                    <div className="bg-white p-4 rounded-lg shadow-md">
                        <h3 className="text-lg font-medium">What to do in case of a technical issue?</h3>
                    </div>
                </div>
            </div>

            {/* Customer Support */}
            <div className="container mx-auto mt-8 px-6">
                <h2 className="text-xl font-semibold mb-4">Customer Support</h2>
                <div className="bg-white p-6 rounded-lg shadow-md">
                    <h3 className="text-lg font-medium mb-4">Contact Us</h3>
                    <form className="space-y-4">
                    <select className="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option>Select a topic</option>
                        <option>Technical issue</option>
                        <option>Billing</option>
                        <option>Other</option>
                    </select>
                    <textarea
                        placeholder="Describe your issue..."
                        className="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        rows="4"
                    ></textarea>
                    <button
                        type="submit"
                        className="bg-blue-900 text-white px-6 py-2 rounded-lg hover:bg-blue-800"
                    >
                        Send
                    </button>
                    </form>
                </div>
            </div>

            {/* Footer */}
            <footer className="bg-primary-end text-white mt-8 py-6">
                <div className="container mx-auto px-6">
                    <div className="flex justify-between items-center">
                    <p>© 2025 Fultang Clinic. All rights reserved.</p>
                    </div>
                </div>
            </footer>

    </div>
    <ChatWindow />
    </div>
)
}// END OF FILE: src/Pages/HelpCenter/HelpCenter.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/ExamenCard.jsx

// ExamCard.jsx


export function ExamCard({ exam, onViewDetails }) {
    const { examName, patientName, doctorName, status } = exam;
    const statusColor =
        status === 'Completed'
            ? 'text-green-600'
            : status === 'Pending'
                ? 'text-yellow-600'
                : 'text-red-600';

    return (
        <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 hover:shadow-2xl transition-shadow duration-300">
            <h3 className="text-xl font-bold text-teal-700 mb-4">{examName}</h3>
            <div className="space-y-3">
                <p className="text-gray-700">
                    <span className="font-semibold">Patient :</span> {patientName}
                </p>
                <p className="text-gray-700">
                    <span className="font-semibold">Prescrit par :</span> {doctorName}
                </p>
                <p className="text-gray-700">
                    <span className="font-semibold">Status :</span>{' '}
                    <span className={statusColor}>{status}</span>
                </p>
            </div>
            <div className="mt-4 flex justify-end">
                <button
                    onClick={() => onViewDetails(exam)}
                    className="bg-teal-600 text-white px-4 py-2 rounded-md hover:bg-teal-700 transition-colors duration-300"
                >
                    View Details
                </button>
            </div>
        </div>
    );
}
// END OF FILE: src/Pages/Laboratory/ExamenCard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/ExamenDetails.jsx

"use client"

import { useState, useEffect } from "react"
import { useParams, useNavigate } from "react-router-dom"
import axiosInstance from "../../Utils/axiosInstance.js"
import { LaboratoryNavBar } from "./LaboratoryNavBar.jsx"
import { LaboratoryDashBoard } from "./LaboratoryDashBoard.jsx"
import { ArrowLeft, Printer, Calendar, User, Stethoscope, FileText, Upload, CheckCircle, XCircle } from "lucide-react"
import { laboratoryNavLink } from "./LaboratoryNavLink.js"

export function ExamDetails() {
    const { id } = useParams()
    const navigate = useNavigate()
    const [examData, setExamData] = useState(null)
    const [isLoading, setIsLoading] = useState(true)
    const [error, setError] = useState(null)

    const [labNotes, setLabNotes] = useState("")
    const [newExamStatus, setNewExamStatus] = useState("Not Completed")
    const [uploadedFile, setUploadedFile] = useState(null)
    const [dragActive, setDragActive] = useState(false)
    const [saveLoading, setSaveLoading] = useState(false)
    const [saveError, setSaveError] = useState(null)
    const [saveSuccess, setSaveSuccess] = useState(false)

    useEffect(() => {
        async function fetchExamDetails() {
            try {
                const response = await axiosInstance.get(`/exam-request/${id}/`)
                if (response.status === 200) {
                    setExamData(response.data)
                    setLabNotes(response.data.notes || "")
                    setNewExamStatus(response.data.examStatus || "Not Completed")
                }
            } catch (err) {
                setError("Error loading exam details")
            } finally {
                setIsLoading(false)
            }
        }
        fetchExamDetails()
    }, [id])

    const handleDragOver = (e) => {
        e.preventDefault()
        setDragActive(true)
    }

    const handleDragLeave = (e) => {
        e.preventDefault()
        setDragActive(false)
    }

    const handleDrop = (e) => {
        e.preventDefault()
        setDragActive(false)
        if (e.dataTransfer.files && e.dataTransfer.files[0]) {
            setUploadedFile(e.dataTransfer.files[0])
        }
    }

    const handleFileChange = (e) => {
        if (e.target.files && e.target.files[0]) {
            setUploadedFile(e.target.files[0])
        }
    }

    const handleSave = async () => {
        setSaveLoading(true)
        setSaveError(null)
        setSaveSuccess(false)

        try {
            if (newExamStatus === "Completed") {
                await axiosInstance.put(`/exam-request/${id}/`, { examStatus: "Completed" })
            }

            const formData = new FormData()
            formData.append("notes", labNotes)
            if (uploadedFile) {
                formData.append("examFile", uploadedFile)
            }
            formData.append("idExamRequest", examData.id)
            formData.append("idMedicalFolderPage", examData.idMedicalFolder || 1)
            formData.append("idPatient", examData.idPatient?.id)
            formData.append("idMedicalStaff", examData.idMedicalStaff?.id)

            const response = await axiosInstance.post(`/exam-result/`, formData, {
                headers: { "Content-Type": "multipart/form-data" },
            })
            if (response.status === 201 || response.status === 200) {
                setSaveSuccess(true)
            }
        } catch (err) {
            setSaveError("Error saving changes")
        } finally {
            setSaveLoading(false)
        }
    }

    if (isLoading) {
        return (
            <LaboratoryDashBoard linkList={laboratoryNavLink} requiredRole={"Labtech"}>
                <LaboratoryNavBar />
                <div className="min-h-screen flex items-center justify-center">
                    <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-primary-end"></div>
                </div>
            </LaboratoryDashBoard>
        )
    }

    if (error || !examData) {
        return (
            <LaboratoryDashBoard linkList={laboratoryNavLink} requiredRole={"Labtech"}>
                <LaboratoryNavBar />
                <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100">
                    <div className="bg-white p-8 rounded-lg shadow-md text-center">
                        <XCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />
                        <h2 className="text-2xl font-bold text-gray-800 mb-2">{error || "No exam data found."}</h2>
                        <button
                            onClick={() => navigate(-1)}
                            className="mt-4 px-6 py-2 bg-primary-end text-white rounded-md hover:bg-primary-start transition-colors duration-300"
                        >
                            Back
                        </button>
                    </div>
                </div>
            </LaboratoryDashBoard>
        )
    }

    const examName = examData.idExam?.examName || examData.examName || "Unnamed Exam"
    const patientName = examData.idPatient
        ? `${examData.idPatient.firstName} ${examData.idPatient.lastName}`
        : "Unknown Patient"
    const doctorName = examData.idMedicalStaff
        ? `${examData.idMedicalStaff.first_name} ${examData.idMedicalStaff.last_name}`
        : "Unknown Doctor"
    const addDate = examData.addDate
    const examDescription = examData.idExam?.examDescription || "No description available"

    return (
        <LaboratoryDashBoard linkList={laboratoryNavLink} requiredRole={"Labtech"}>
            <LaboratoryNavBar />
            <div className="min-h-screen bg-gray-100 p-8">
                <div className="max-w-7xl mx-auto">
                    {/* Header */}
                    <div className="bg-gradient-to-r from-primary-end to-primary-start rounded-xl text-white p-8 mb-8 shadow-lg">
                        <h1 className="text-3xl font-bold mb-2">{examName}</h1>
                        <p className="opacity-90">
                            Exam details for {patientName} prescribed by {doctorName}.
                        </p>
                    </div>

                    {/* Navigation */}
                    <div className="bg-white rounded-xl shadow-sm p-6 mb-8">
                        <div className="flex justify-between items-center">
                            <button
                                onClick={() => navigate(-1)}
                                className="text-primary-end hover:text-primary-start transition-colors duration-300 font-bold flex items-center"
                            >
                                <ArrowLeft className="mr-2" />
                                Back to Exam List
                            </button>
                            <button
                                onClick={() => window.print()}
                                className="bg-secondary hover:bg-primary-end transition-colors duration-300 text-white px-4 py-2 rounded-md flex items-center"
                            >
                                <Printer className="mr-2" />
                                Print
                            </button>
                        </div>
                    </div>

                    {/* Main Content */}
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        {/* Exam Details */}
                        <div className="lg:col-span-2 bg-white rounded-xl shadow-sm p-6">
                            <h2 className="text-2xl font-bold text-gray-800 mb-6">Exam Details</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <DetailItem icon={Calendar} label="Date Added" value={new Date(addDate).toLocaleString()} />
                                <DetailItem icon={User} label="Patient" value={patientName} />
                                <DetailItem icon={Stethoscope} label="Doctor" value={doctorName} />
                                <DetailItem icon={FileText} label="Description" value={examDescription} />
                            </div>
                        </div>

                        {/* Doctor's Notes */}
                        <div className="bg-white rounded-xl shadow-sm p-6">
                            <h2 className="text-2xl font-bold text-gray-800 mb-6">Doctor's Notes</h2>
                            <p className="text-gray-600 leading-relaxed">{examData.notes || "No notes available."}</p>
                        </div>
                    </div>

                    {/* Lab Technician Actions */}
                    <div className="mt-8 bg-white rounded-xl shadow-sm p-6">
                        <h2 className="text-2xl font-bold text-gray-800 mb-6">Lab Technician Actions</h2>

                        {/* File Upload */}
                        <div className="mb-6">
                            <label className="block text-sm font-medium text-gray-700 mb-2">Upload Results</label>
                            <div
                                onDragOver={handleDragOver}
                                onDragLeave={handleDragLeave}
                                onDrop={handleDrop}
                                className={`flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-6 cursor-pointer transition-colors ${dragActive ? "border-primary-end bg-primary-50" : "border-gray-300 hover:border-primary-end hover:bg-gray-50"}`}
                                onClick={() => document.querySelector('input[type="file"]').click()}
                            >
                                <Upload className="w-12 h-12 text-gray-400 mb-4" />
                                {uploadedFile ? (
                                    <p className="text-primary-end font-medium">{uploadedFile.name}</p>
                                ) : (
                                    <p className="text-gray-500">Drag and drop your file here or click to select</p>
                                )}
                                <input type="file" className="hidden" onChange={handleFileChange} />
                            </div>
                        </div>

                        {/* Lab Notes */}
                        <div className="mb-6">
                            <label className="block text-sm font-medium text-gray-700 mb-2">Lab Technician Notes</label>
                            <textarea
                                value={labNotes}
                                onChange={(e) => setLabNotes(e.target.value)}
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-end focus:border-primary-end transition-all duration-300"
                                rows="6"
                                placeholder="Enter your observations..."
                            ></textarea>
                        </div>

                        {/* Exam Status */}
                        <div className="mb-6">
                            <label className="block text-sm font-medium text-gray-700 mb-2">Change Exam Status</label>
                            <select
                                value={newExamStatus}
                                onChange={(e) => setNewExamStatus(e.target.value)}
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-end focus:border-primary-end transition-all duration-300"
                            >
                                <option value="Not Completed">Not Completed</option>
                                <option value="Completed">Completed</option>
                            </select>
                        </div>

                        {/* Save Messages */}
                        {saveError && <p className="mt-4 text-red-600 font-medium">{saveError}</p>}
                        {saveSuccess && (
                            <div
                                className="mt-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative"
                                role="alert"
                            >
                                <CheckCircle className="inline-block mr-2" />
                                <span className="font-medium">Results sent successfully!</span>
                            </div>
                        )}

                        {/* Action Buttons */}
                        <div className="mt-6 flex justify-end space-x-4">
                            <button
                                onClick={() => navigate(-1)}
                                className="px-6 py-3 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors duration-300"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={handleSave}
                                className="px-6 py-3 bg-primary-end text-white rounded-md hover:bg-primary-start transition-colors duration-300 flex items-center"
                                disabled={saveLoading}
                            >
                                {saveLoading ? (
                                    <>
                                        <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white mr-3"></div>
                                        Sending...
                                    </>
                                ) : (
                                    <>
                                        <Upload className="mr-2" />
                                        Send Exam Results
                                    </>
                                )}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </LaboratoryDashBoard>
    )
}

const DetailItem = ({ icon: Icon, label, value }) => (
    <div className="flex items-center space-x-3">
        <Icon className="w-5 h-5 text-primary-end" />
        <div>
            <p className="text-sm text-gray-500">{label}</p>
            <p className="font-medium text-gray-800">{value}</p>
        </div>
    </div>
)

// END OF FILE: src/Pages/Laboratory/ExamenDetails.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/ExamResultDetail.jsx

"use client";

import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { FileText, Calendar, User, Stethoscope, ArrowLeft, Printer, Download } from "lucide-react";
import { laboratoryNavLink } from "./LaboratoryNavLink.js";
import { LaboratoryNavBar } from "./LaboratoryNavBar.jsx";
import { LaboratoryDashBoard } from "./LaboratoryDashBoard.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";
import { formatDateOnly, formatDateToTime } from "../../Utils/formatDateMethods.js";

export function ExamResultDetails() {
    const { id } = useParams();
    const navigate = useNavigate();
    const [examResult, setExamResult] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    // Fonction de rafraîchissement de l'exam result
    const refreshExamResult = async () => {
        try {
            const response = await axiosInstance.get(`/exam-result/${id}/`);
            setExamResult(response.data);
        } catch (err) {
            console.error("Erreur lors du refresh:", err);
        }
    };

    useEffect(() => {
        const fetchExamResult = async () => {
            try {
                const response = await axiosInstance.get(`/exam-result/${id}/`);
                setExamResult(response.data);
            } catch (err) {
                setError(err);
            } finally {
                setIsLoading(false);
            }
        };
        fetchExamResult();
    }, [id]);

    if (isLoading) {
        return (
            <LaboratoryDashBoard linkList={laboratoryNavLink} requiredRole={"Labtech"}>
                <LaboratoryNavBar />
                <div className="h-[500px] w-full flex justify-center items-center">
                    <Loader size={"medium"} color={"primary-end"} />
                </div>
            </LaboratoryDashBoard>
        );
    }

    if (error) {
        return <ServerErrorPage errorStatus={error.status} message={error.message} />;
    }

    return (
        <LaboratoryDashBoard linkList={laboratoryNavLink} requiredRole={"Labtech"}>
            <LaboratoryNavBar />
            <div className="flex flex-col min-h-screen p-8">
                {/* Header */}
                <div className="bg-gradient-to-br from-primary-end to-primary-start rounded-lg shadow-lg p-6 mb-6">
                    <div className="flex items-center gap-6">
                        <div className="w-24 h-24 bg-white rounded-full flex items-center justify-center">
                            <FileText className="w-12 h-12 text-primary-start" />
                        </div>
                        <div className="flex-1">
                            <h1 className="text-3xl font-bold text-white mb-2">Exam Result Details</h1>
                            {/* On a retiré l'affichage de l'ID */}
                        </div>
                        <div className="text-white text-right">
                            <p className="font-bold">{formatDateOnly(examResult.addDate)}</p>
                            <p>{formatDateToTime(examResult.addDate)}</p>
                        </div>
                    </div>
                </div>

                {/* Navigation */}
                <div className="bg-gray-100 shadow-md rounded-lg mb-6 p-4">
                    <div className="flex justify-between items-center">
                        <button
                            onClick={() => navigate(-1)}
                            className="text-secondary text-xl transition-all duration-300 font-bold flex gap-2 items-center"
                        >
                            <div className="w-8 h-8 border-2 rounded-full flex justify-center items-center border-secondary">
                                <ArrowLeft />
                            </div>
                            <p className="text-[17px] mt-0.5">Back to Exam Results</p>
                        </button>
                        <div className="flex gap-2">
                            <button
                                onClick={() => window.print()}
                                className="bg-secondary font-bold duration-300 text-white px-4 py-2 rounded-md hover:bg-primary-end transition-all"
                            >
                                <Printer size={20} className="inline mr-2" />
                                Print Result
                            </button>
                            {examResult.examFile && (
                                <a
                                    href={examResult.examFile}
                                    download
                                    className="bg-primary-start font-bold duration-300 text-white px-4 py-2 rounded-md hover:bg-primary-end transition-all"
                                >
                                    <Download size={20} className="inline mr-2" />
                                    Download File
                                </a>
                            )}
                        </div>
                    </div>
                </div>

                {/* Exam Details */}
                <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                    <h2 className="text-2xl font-bold text-gray-800 mb-4">Exam Information</h2>
                    <div className="grid grid-cols-2 gap-4">
                        <div className="flex items-center">
                            <Calendar className="w-5 h-5 mr-2 text-primary-start" />
                            <span className="font-semibold mr-2">Date:</span>
                            <span>{formatDateOnly(examResult.addDate)}</span>
                        </div>
                        <div className="flex items-center">
                            <User className="w-5 h-5 mr-2 text-primary-start" />
                            <span className="font-semibold mr-2">Patient:</span>
                            <span>
                {examResult.idPatient
                    ? `${examResult.idPatient.firstName} ${examResult.idPatient.lastName}`
                    : "N/A"}
              </span>
                        </div>
                        <div className="flex items-center">
                            <Stethoscope className="w-5 h-5 mr-2 text-primary-start" />
                            <span className="font-semibold mr-2">Medical Staff:</span>
                            <span>
                {examResult.idMedicalStaff
                    ? `${examResult.idMedicalStaff.first_name} ${examResult.idMedicalStaff.last_name}`
                    : "N/A"}
              </span>
                        </div>
                        {/* On a retiré l'affichage de l'Exam Request ID */}
                    </div>
                </div>

                {/* Exam Notes */}
                <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                    <h2 className="text-2xl font-bold text-gray-800 mb-4">Exam Notes</h2>
                    <p className="text-gray-600 whitespace-pre-wrap">
                        {examResult.notes || "No notes provided."}
                    </p>
                </div>

                {/* Exam File */}
                {examResult.examFile && (
                    <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                        <h2 className="text-2xl font-bold text-gray-800 mb-4">Exam File</h2>
                        <a
                            href={examResult.examFile}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-primary-start hover:text-primary-end transition-colors"
                        >
                            View Exam File
                        </a>
                    </div>
                )}

                {/* Edit Section */}
                <EditExamResult examResult={examResult} refreshExamResult={refreshExamResult} />
            </div>
        </LaboratoryDashBoard>
    );
}

function EditExamResult({ examResult, refreshExamResult }) {
    const [newNotes, setNewNotes] = useState(examResult.notes || "");
    const [newFile, setNewFile] = useState(null);
    const [isUpdating, setIsUpdating] = useState(false);
    const [updateError, setUpdateError] = useState(null);
    const [updateSuccess, setUpdateSuccess] = useState(false);

    const handleFileChange = (e) => {
        if (e.target.files && e.target.files[0]) {
            setNewFile(e.target.files[0]);
        }
    };

    const handleUpdate = async () => {
        setIsUpdating(true);
        setUpdateError(null);
        setUpdateSuccess(false);
        try {
            const formData = new FormData();
            formData.append("notes", newNotes);
            if (newFile) {
                formData.append("examFile", newFile);
            }
            const response = await axiosInstance.put(`/exam-result/${examResult.id}/`, formData, {
                headers: { "Content-Type": "multipart/form-data" },
            });
            if (response.status === 200) {
                setUpdateSuccess(true);
                refreshExamResult();
            }
        } catch (err) {
            setUpdateError("Failed to update exam result.");
        } finally {
            setIsUpdating(false);
        }
    };

    return (
        <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Edit Exam Result</h2>
            <div className="mb-4">
                <label className="block text-gray-700 font-semibold mb-2">Download Current File</label>
                {examResult.examFile ? (
                    <a
                        href={examResult.examFile}
                        download
                        className="text-primary-start hover:text-primary-end transition-colors inline-flex items-center gap-2"
                    >
                        <Download size={20} /> Download File
                    </a>
                ) : (
                    <p className="text-gray-500">No file available.</p>
                )}
            </div>
            <div className="mb-4">
                <label className="block text-gray-700 font-semibold mb-2">Replace File</label>
                <input type="file" onChange={handleFileChange} className="w-full" />
            </div>
            <div className="mb-4">
                <label className="block text-gray-700 font-semibold mb-2">Update Notes</label>
                <textarea
                    value={newNotes}
                    onChange={(e) => setNewNotes(e.target.value)}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-end focus:outline-none"
                    rows="4"
                ></textarea>
            </div>
            {updateError && <p className="text-red-600 mb-4">{updateError}</p>}
            {updateSuccess && <p className="text-green-600 mb-4">Exam result updated successfully.</p>}
            <div className="flex justify-end gap-4">
                <button
                    onClick={handleUpdate}
                    disabled={isUpdating}
                    className="px-6 py-2 bg-teal-600 text-white rounded-md hover:bg-teal-700 transition-all"
                >
                    {isUpdating ? "Updating..." : "Update"}
                </button>
            </div>
        </div>
    );
}
// END OF FILE: src/Pages/Laboratory/ExamResultDetail.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/HelpCenter.jsx

// END OF FILE: src/Pages/Laboratory/HelpCenter.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/LaboratoryDashBoard.jsx

import  { useState } from 'react';
import {Link, Navigate, useLocation} from "react-router-dom";
import PropTypes from "prop-types";
import { AccessDenied } from "../../GlobalComponents/AccessDenied.jsx";
import { useAuthentication } from "../../Utils/Provider.jsx";
import { ChevronDown, ChevronUp } from 'lucide-react';

export function LaboratoryDashBoard({ children, linkList, requiredRole}) {


   LaboratoryDashBoard.propTypes = {
        children: PropTypes.node.isRequired,
        linkList: PropTypes.array.isRequired,
        requiredRole: PropTypes.string.isRequired,
    }


    const location = useLocation();
    const activeLink = location.pathname;
    const { isAuthenticated, hasRole } = useAuthentication();
    const [expandedLinks, setExpandedLinks] = useState({});



    function toggleSubMenu  (linkName)
    {
        setExpandedLinks(prev => ({
            ...prev,
            [linkName]: !prev[linkName]
        }));
    }


    function renderLink(item, index, isSubLink = false)
    {
        const IconComponent = item.icon;
        const isActive = activeLink.startsWith(item.link);
        const hasSubLinks = item.subLinks && item.subLinks.length > 0;



        return (
            <div key={index}>
                {!hasSubLinks ? (
                        <Link className={`transition-all duration-400 flex p-3 items-center cursor-pointer ${isActive ? "bg-white rounded-l-full mb-2 mt-2" : "hover:bg-white/20 hover:rounded-l-full"} ${isSubLink ? "ml-4" : "ml-5"}`}
                             to={item.link}
                        >
                            {IconComponent && (
                                <IconComponent
                                    className={isActive ? "text-black text-xl mr-3" : "text-xl mr-3 text-white"}
                                />
                            )}
                            <p className={isActive ? "text-black font-bold text-md" : "text-md font-bold text-white"}>
                                {item.name}
                            </p>
                        </Link>
                ) : (
                    <div
                        className="transition-all duration-400 flex p-3.5 items-center cursor-pointer ml-5 hover:bg-white/20 hover:rounded-l-full"
                        onClick={() => toggleSubMenu(item.name)}
                    >
                        {IconComponent && (
                            <IconComponent
                                className={isActive ? "text-black text-xl mr-3" : "text-xl mr-3 text-white"}
                            />
                        )}
                        <p className={isActive ? "text-black font-bold text-md" : "text-md font-bold text-white"}>
                            {item.name}
                        </p>
                        {hasSubLinks && (expandedLinks[item.name] ? (
                                <ChevronUp className={`ml-auto ${isActive ? "text-black" : "text-white"}`}/>
                            ) : (
                                <ChevronDown className={`ml-auto ${isActive ? "text-black" : "text-white"}`}/>
                            )
                        )}
                    </div>
                )
                }
                {hasSubLinks && !expandedLinks[item.name] && (
                    <div className="ml-8 mt-2">
                        {item.subLinks.map((subItem, subIndex) => renderLink(subItem, subIndex, true))}
                    </div>
                )}
            </div>
        );
    }


    if (!isAuthenticated()) {
        return <Navigate to="/login" />;
    }

    if (!hasRole(requiredRole)) {
        return <AccessDenied Role={requiredRole} />;
    }

    return (
        <div className="flex h-screen">
            <div
                className="w-[17.5%] fixed h-screen bg-gradient-to-t from-primary-start to-primary-end flex flex-col overflow-y-auto scrollbar">
                <h1 className="text-3xl font-bold ml-6 mb-10 mt-7 text-white">
                    Fultang Clinic
                </h1>
                <nav className="flex flex-col space-y-1.5 mb-2 ">
                    {linkList.map((item, index) => renderLink(item, index))}
                </nav>
            </div>
            <div className="flex-1 min-h-screen overflow-x-hidden ml-[17.5%]">
                {children}
            </div>
        </div>
    )
}

// END OF FILE: src/Pages/Laboratory/LaboratoryDashBoard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/LaboratoryExamHistory.jsx

"use client"

import { useState, useEffect, useCallback } from "react";
import { Search, Calendar, Eye, User, Stethoscope, Clock } from "lucide-react";
import { laboratoryNavLink } from "./LaboratoryNavLink.js";
import { LaboratoryNavBar } from "./LaboratoryNavBar.jsx";
import { LaboratoryDashBoard } from "./LaboratoryDashBoard.jsx";
import { useAuthentication } from "../../Utils/Provider.jsx";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";
import { formatDateOnly, formatDateToTime } from "../../Utils/formatDateMethods.js";
import { AppRoutesPaths } from "../../Router/appRouterPaths.js";
import { useNavigate } from "react-router-dom";
import axiosInstance from "../../Utils/axiosInstance.js";

export function ExamHistory() {
    const navigate = useNavigate();
    const [searchTerm, setSearchTerm] = useState("");
    const [dateFilter, setDateFilter] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const { userData } = useAuthentication();
    const [examHistoryList, setExamHistoryList] = useState([]);
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");

    // Chargement des données depuis /exam-result/
    const loadExamHistory = useCallback(async () => {
        setIsLoading(true);
        try {
            const response = await axiosInstance.get("/exam-result/");
            if (response.status === 200) {
                // On adapte les données pour la table en ajoutant quelques champs calculés
                const data = response.data.results || response.data; // selon la structure renvoyée par l'API
                const transformed = data.map((exam) => ({
                    ...exam,
                    // Extraction du nom du patient
                    patientName: exam.idPatient
                        ? `${exam.idPatient.firstName} ${exam.idPatient.lastName}`
                        : "Patient inconnu",
                    // Pour le nom de l'examen, on affiche le numéro de la demande
                    examName: exam.idExamRequest ? `Exam Request #${exam.idExamRequest}` : "N/A",
                    // Statut déduit : s'il y a un fichier, on considère que l'examen est terminé
                    status: exam.examFile ? "Terminé" : "En attente",
                    // Extraction du médecin
                    doctorName: exam.idMedicalStaff
                        ? `${exam.idMedicalStaff.first_name} ${exam.idMedicalStaff.last_name}`
                        : "Médecin inconnu",
                    date: exam.addDate, // date d'ajout
                }));
                setExamHistoryList(transformed);
                setErrorStatus(null);
                setErrorMessage("");
            } else {
                setErrorStatus(response.status);
                setErrorMessage("Erreur lors du chargement des données.");
            }
        } catch (error) {
            console.error(error);
            setErrorStatus(500);
            setErrorMessage("Une erreur est survenue lors du chargement des données.");
        } finally {
            setIsLoading(false);
        }
    }, []);

    useEffect(() => {
        loadExamHistory();
    }, [loadExamHistory]);

    const filteredExams = examHistoryList.filter((exam) => {
        const fullName = exam.patientName || "";
        const matchesSearch =
            fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            exam.examName.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesDate =
            !dateFilter ||
            new Date(exam.date || "").toISOString().split("T")[0] === dateFilter;
        return matchesSearch && matchesDate;
    });

    function getStatusStyle(status) {
        switch (status) {
            case "Terminé":
                return "bg-green-100 text-green-800 border-green-300";
            case "En attente":
                return "bg-yellow-100 text-yellow-800 border-yellow-300";
            case "Annulé":
                return "bg-red-100 text-red-800 border-red-300";
            default:
                return "bg-gray-100 text-gray-800 border-gray-300";
        }
    }

    return (
        <LaboratoryDashBoard linkList={laboratoryNavLink} requiredRole={"Labtech"}>
            <LaboratoryNavBar />
            <div className="mx-auto p-6">
                <h1 className="text-2xl font-bold text-gray-800 mb-6">Historique des Examens</h1>

                {/* Filtres */}
                <div className="flex flex-col md:flex-row gap-4 mb-6">
                    <div className="relative flex-1">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                        <input
                            type="text"
                            placeholder="Rechercher par nom de patient ou demande..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-end focus:outline-none transition-all duration-300"
                        />
                    </div>
                    <div className="flex items-center gap-4">
                        <Calendar className="text-gray-400 h-5 w-5" />
                        <input
                            type="date"
                            value={dateFilter}
                            onChange={(e) => setDateFilter(e.target.value)}
                            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-end focus:outline-none transition-all duration-300"
                        />
                    </div>
                </div>

                {/* Liste de l'historique */}
                {isLoading ? (
                    <div className="h-[500px] w-full flex justify-center items-center">
                        <Loader size={"medium"} color={"primary-end"} />
                    </div>
                ) : errorStatus ? (
                    <ServerErrorPage errorStatus={errorStatus} message={errorMessage} />
                ) : filteredExams && filteredExams.length > 0 ? (
                    <div className="overflow-x-auto">
                        <table className="w-full border-separate border-spacing-y-2">
                            <thead>
                            <tr>
                                <th className="px-6 py-3 bg-primary-end rounded-l-xl text-center text-md text-white font-bold uppercase">
                                    Patient
                                </th>
                                <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                    Date & Heure
                                </th>
                                <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                    Nom de la Demande
                                </th>
                                <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                    Statut
                                </th>
                                <th className="px-6 py-3 bg-primary-end text-center text-md text-white font-bold uppercase">
                                    Médecin
                                </th>
                                <th className="px-6 py-3 text-center text-md text-white font-bold bg-primary-end rounded-r-xl uppercase">
                                    Action
                                </th>
                            </tr>
                            </thead>
                            <tbody className="bg-white border-separate">
                            {filteredExams.map((exam) => (
                                <tr key={exam.id}>
                                    <td className="px-6 py-5 rounded-l-xl bg-gray-100 border-l-4 border-primary-start">
                                        <div className="w-full flex items-center justify-center">
                                            <User className="h-6 w-6 text-gray-400 mr-2" />
                                            <div className="text-md font-medium text-gray-900">{exam.patientName}</div>
                                        </div>
                                    </td>
                                    <td className="px-6 py-5 bg-gray-100">
                                        <div className="w-full flex justify-center items-center">
                                            <Clock className="h-5 w-5 text-gray-400 mr-2 mt-2" />
                                            <div>
                                                <div className="text-sm text-center text-gray-900">
                                                    {formatDateOnly(exam.date)}
                                                </div>
                                                <div className="text-sm text-center text-gray-500">
                                                    {formatDateToTime(exam.date)}
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    <td className="px-6 py-5 bg-gray-100">
                                        <div className="text-sm text-center text-gray-900">{exam.examName}</div>
                                    </td>
                                    <td className="px-6 py-4 bg-gray-100">
                                        <div className="flex items-center justify-center">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusStyle(exam.status)}`}>
                          {exam.status}
                        </span>
                                        </div>
                                    </td>
                                    <td className="px-6 py-5 bg-gray-100">
                                        <div className="flex items-center justify-center text-sm text-gray-900">
                                            <Stethoscope className="h-5 w-5 text-gray-400 mr-2" />
                                            {exam.doctorName}
                                        </div>
                                    </td>
                                    <td className="px-6 py-5 bg-gray-100 rounded-r-xl">
                                        <button
                                            onClick={() => {
                                                navigate(`${AppRoutesPaths.laboratoryExamResultDetails.replace(":id", exam.id)}`);
                                                console.log("Navigating to exam result details for ID:", exam.id);
                                            }}
                                            className="flex items-center text-primary-end hover:text-primary-start font-semibold transition-all duration-500"
                                        >
                                            <Eye className="h-5 w-5" />
                                            <span className="ml-2">Détails</span>
                                        </button>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                ) : (
                    <div className="p-8 mt-24 flex items-center justify-center">
                        <div className="flex flex-col">
                            <Calendar className="h-16 w-16 text-primary-end mx-auto mb-4" />
                            <h2 className="text-2xl font-bold text-gray-800 mb-2 mx-auto">Aucun Historique d'Examen</h2>
                            <p className="text-gray-600 mb-4 mx-auto text-center">
                                Il n'y a pas encore d'examens enregistrés. Une fois les examens effectués, ils apparaîtront ici pour un
                                meilleur suivi.
                            </p>
                            <button
                                className="px-4 hover:bg-primary-start duration-300 mx-auto py-2 bg-primary-end text-white rounded-lg transition-all"
                                onClick={() => {
                                    window.location.reload();
                                }}
                            >
                                Rafraîchir
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </LaboratoryDashBoard>
    );
}
// END OF FILE: src/Pages/Laboratory/LaboratoryExamHistory.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/LaboratoryExamList.jsx

"use client"

import { useState, useEffect, useCallback } from "react";
import { Search, Plus, Edit2, Trash2, Calculator, Building, Package, Users, Banknote, TrendingDown, TrendingUp, Eye, ChevronDown, ChevronUp } from "lucide-react"; // Ajout ChevronDown/Up pour la cohérence si besoin futur
import {AccountantNavBar} from "../../Accountant/Components/AccountantNavBar.jsx";
import {AccountantDashBoard} from "../../Accountant/Components/AccountantDashboard.jsx";
import {FinancialAccountantNavLink} from "../NavLink.js";

// Simulez vos couleurs de thème si elles ne sont pas dans Tailwind par défaut
// Exemple : primary-end -> blue-700, primary-start -> blue-500
// Vous pouvez les définir dans votre tailwind.config.js ou les remplacer directement ici.
const themeColors = {
    primaryEnd: 'blue-700',
    primaryStart: 'blue-500',
    secondary: 'teal-500', // Exemple, ajustez si nécessaire
    focusRing: 'focus:ring-blue-500', // ou la couleur de votre primary-end
    textPrimaryEnd: 'text-blue-700',
    textPrimaryStart: 'text-blue-500',
};

export function ChartOfAccounts() {
    const [searchTerm, setSearchTerm] = useState("");
    const [classFilter, setClassFilter] = useState("");
    const [typeFilter, setTypeFilter] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [accountsList, setAccountsList] = useState([]);
    const [showCreateModal, setShowCreateModal] = useState(false);
    const [editingAccount, setEditingAccount] = useState(null);
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");

    const ohadaClasses = {
        "1": { name: "Capitaux", icon: Building, color: "blue" },
        "2": { name: "Immobilisations", icon: Calculator, color: "green" },
        "3": { name: "Stocks", icon: Package, color: "yellow" },
        "4": { name: "Tiers", icon: Users, color: "purple" },
        "5": { name: "Trésorerie", icon: Banknote, color: "indigo" },
        "6": { name: "Charges", icon: TrendingDown, color: "red" },
        "7": { name: "Produits", icon: TrendingUp, color: "emerald" }
    };

    const sampleAccounts = [
        { id: 1, code: "2154", label: "Équipements de radiologie", class: "2", type: "Actif", balance: 125000, isActive: true, createdDate: "2024-01-15T10:30:00Z", lastUsed: "2024-06-10T14:20:00Z" },
        { id: 2, code: "7011", label: "Consultations médicales", class: "7", type: "Produit", balance: 45000, isActive: true, createdDate: "2024-01-10T08:15:00Z", lastUsed: "2024-06-14T09:30:00Z" },
        { id: 3, code: "4111", label: "Patients débiteurs", class: "4", type: "Actif", balance: 15000, isActive: true, createdDate: "2024-02-01T11:45:00Z", lastUsed: "2024-06-13T16:10:00Z" },
        { id: 4, code: "6011", label: "Achats de médicaments", class: "6", type: "Charge", balance: 28000, isActive: true, createdDate: "2024-01-20T14:00:00Z", lastUsed: "2024-06-12T11:25:00Z" },
        { id: 5, code: "5121", label: "Banque BICEC", class: "5", type: "Actif", balance: 85000, isActive: true, createdDate: "2024-01-05T09:20:00Z", lastUsed: "2024-06-14T08:45:00Z" }
    ];

    const loadChartOfAccounts = useCallback(async () => {
        setIsLoading(true);
        try {
            await new Promise(resolve => setTimeout(resolve, 1000));
            setAccountsList(sampleAccounts);
            setErrorStatus(null);
            setErrorMessage("");
        } catch (error) {
            console.error(error);
            setErrorStatus(500);
            setErrorMessage("Une erreur est survenue lors du chargement du plan comptable.");
        } finally {
            setIsLoading(false);
        }
    }, []);

    useEffect(() => {
        loadChartOfAccounts();
    }, [loadChartOfAccounts]);

    const filteredAccounts = accountsList.filter((account) => {
        const matchesSearch =
            account.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
            account.label.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesClass = !classFilter || account.class === classFilter;
        const matchesType = !typeFilter || account.type === typeFilter;
        return matchesSearch && matchesClass && matchesType;
    });

    function getClassIcon(classNumber) {
        const IconComponent = ohadaClasses[classNumber]?.icon || Calculator;
        return <IconComponent className="h-5 w-5" />;
    }

    function getClassColor(classNumber) {
        // Ces couleurs sémantiques sont importantes et conservées
        const colorMap = {
            "blue": "text-blue-600",
            "green": "text-green-600",
            "yellow": "text-yellow-600",
            "purple": "text-purple-600",
            "indigo": "text-indigo-600",
            "red": "text-red-600",
            "emerald": "text-emerald-600"
        };
        return colorMap[ohadaClasses[classNumber]?.color] || "text-gray-600";
    }

    function formatAmount(amount) {
        return new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'XAF', minimumFractionDigits: 0 }).format(amount);
    }

    function formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('fr-FR', { day: '2-digit', month: '2-digit', year: 'numeric' });
    }

    function AccountModal({ account, onClose, onSave }) {
        const [formData, setFormData] = useState({
            code: account?.code || "",
            label: account?.label || "",
            class: account?.class || "",
            type: account?.type || "",
            isActive: account?.isActive ?? true
        });

        const handleSubmit = () => {
            if (!formData.code.startsWith(formData.class)) {
                alert("Le code compte doit commencer par le numéro de classe sélectionné");
                return;
            }
            onSave(formData);
            onClose();
        };

        return (
            <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
                <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-md transform transition-all">
                    <h2 className={`text-2xl font-bold mb-6 text-${themeColors.primaryEnd}`}>
                        {account ? "Modifier le compte" : "Nouveau compte"}
                    </h2>
                    <div className="space-y-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Classe</label>
                            <select
                                value={formData.class}
                                onChange={(e) => setFormData({...formData, class: e.target.value})}
                                className={`w-full px-3 py-2 border border-gray-300 rounded-lg ${themeColors.focusRing} focus:border-${themeColors.primaryEnd} transition-colors duration-300`}
                            >
                                <option value="">Sélectionner une classe</option>
                                {Object.entries(ohadaClasses).map(([num, info]) => (
                                    <option key={num} value={num}>
                                        Classe {num} - {info.name}
                                    </option>
                                ))}
                            </select>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Code compte</label>
                            <input
                                type="text"
                                value={formData.code}
                                onChange={(e) => setFormData({...formData, code: e.target.value})}
                                className={`w-full px-3 py-2 border border-gray-300 rounded-lg ${themeColors.focusRing} focus:border-${themeColors.primaryEnd} transition-colors duration-300`}
                                placeholder="Ex: 2154"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Libellé</label>
                            <input
                                type="text"
                                value={formData.label}
                                onChange={(e) => setFormData({...formData, label: e.target.value})}
                                className={`w-full px-3 py-2 border border-gray-300 rounded-lg ${themeColors.focusRing} focus:border-${themeColors.primaryEnd} transition-colors duration-300`}
                                placeholder="Ex: Équipements de radiologie"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Type</label>
                            <select
                                value={formData.type}
                                onChange={(e) => setFormData({...formData, type: e.target.value})}
                                className={`w-full px-3 py-2 border border-gray-300 rounded-lg ${themeColors.focusRing} focus:border-${themeColors.primaryEnd} transition-colors duration-300`}
                            >
                                <option value="">Sélectionner un type</option>
                                <option value="Actif">Actif</option>
                                <option value="Passif">Passif</option>
                                <option value="Charge">Charge</option>
                                <option value="Produit">Produit</option>
                            </select>
                        </div>
                        <div className="pt-2">
                            <label className="flex items-center text-gray-700">
                                <input
                                    type="checkbox"
                                    checked={formData.isActive}
                                    onChange={(e) => setFormData({...formData, isActive: e.target.checked})}
                                    className={`mr-2 h-4 w-4 text-${themeColors.primaryEnd} border-gray-300 rounded ${themeColors.focusRing}`}
                                />
                                Compte actif
                            </label>
                        </div>
                        <div className="flex justify-end gap-3 pt-4">
                            <button
                                type="button"
                                onClick={onClose}
                                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors duration-300"
                            >
                                Annuler
                            </button>
                            <button
                                onClick={handleSubmit}
                                className={`px-4 py-2 text-white rounded-lg bg-gradient-to-r from-${themeColors.primaryStart} to-${themeColors.primaryEnd} font-semibold hover:from-${themeColors.primaryEnd} hover:to-${themeColors.primaryStart} transition-all duration-300`}
                            >
                                {account ? "Modifier" : "Créer"}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    if (isLoading) {
        return (
            <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4">
                <div className={`animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-${themeColors.primaryEnd}`}></div>
            </div>
        );
    }

    if (errorStatus) {
        return (
            <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4">
                <div className="bg-white p-8 rounded-xl shadow-xl text-center">
                    <h2 className="text-2xl font-bold text-red-600 mb-3">Erreur {errorStatus}</h2>
                    <p className="text-gray-700">{errorMessage}</p>
                </div>
            </div>
        );
    }

    return (
        <AccountantDashBoard linkList={FinancialAccountantNavLink} requiredRole={"Accountant"}>
            <AccountantNavBar />
            <div className="min-h-screen bg-gray-100 p-4 md:p-8">
                <div className="max-w-full mx-auto">
                    <div className={`bg-gradient-to-r from-${themeColors.primaryStart} to-${themeColors.primaryEnd} rounded-xl text-white p-6 md:p-8 mb-8 shadow-xl`}>
                        <div className="flex flex-col md:flex-row justify-between items-center">
                            <div>
                                <h1 className="text-3xl font-bold mb-1">Plan Comptable OHADA</h1>
                                <p className="opacity-90 text-sm">Gérez et consultez les comptes de votre organisation.</p>
                            </div>
                            <button
                                onClick={() => setShowCreateModal(true)}
                                className={`mt-4 md:mt-0 flex items-center px-4 py-2 bg-white text-${themeColors.primaryEnd} rounded-lg font-semibold shadow-md hover:bg-gray-50 hover:shadow-lg transition-all duration-300`}
                            >
                                <Plus className="h-5 w-5 mr-2" />
                                Nouveau compte
                            </button>
                        </div>
                    </div>

                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-7 gap-4 mb-8">
                        {Object.entries(ohadaClasses).map(([classNum, classInfo]) => {
                            const IconComponent = classInfo.icon;
                            const count = accountsList.filter(acc => acc.class === classNum).length;
                            return (
                                <div key={classNum} className={`bg-white p-4 rounded-xl shadow-lg border-l-4 border-${themeColors.primaryStart} hover:shadow-xl transition-shadow duration-300`}>
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <p className={`text-xs ${themeColors.textPrimaryStart} font-semibold`}>CLASSE {classNum}</p>
                                            <p className="text-2xl font-bold text-gray-800">{count}</p>
                                            <p className="text-xs text-gray-500 truncate" title={classInfo.name}>{classInfo.name}</p>
                                        </div>
                                        <IconComponent className={`h-7 w-7 ${getClassColor(classNum)} opacity-75`} />
                                    </div>
                                </div>
                            );
                        })}
                    </div>

                    <div className="bg-white rounded-xl shadow-lg p-4 sm:p-6 mb-8">
                        <div className="flex flex-col md:flex-row gap-4">
                            <div className="relative flex-grow">
                                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                                <input
                                    type="text"
                                    placeholder="Rechercher par code ou libellé..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className={`w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-lg ${themeColors.focusRing} focus:border-${themeColors.primaryEnd} transition-all duration-300`}
                                />
                            </div>
                            <select
                                value={classFilter}
                                onChange={(e) => setClassFilter(e.target.value)}
                                className={`px-4 py-2.5 border border-gray-300 rounded-lg ${themeColors.focusRing} focus:border-${themeColors.primaryEnd} md:min-w-[200px] transition-all duration-300`}
                            >
                                <option value="">Toutes les classes</option>
                                {Object.entries(ohadaClasses).map(([num, info]) => (
                                    <option key={num} value={num}>Classe {num} - {info.name}</option>
                                ))}
                            </select>
                            <select
                                value={typeFilter}
                                onChange={(e) => setTypeFilter(e.target.value)}
                                className={`px-4 py-2.5 border border-gray-300 rounded-lg ${themeColors.focusRing} focus:border-${themeColors.primaryEnd} md:min-w-[180px] transition-all duration-300`}
                            >
                                <option value="">Tous les types</option>
                                <option value="Actif">Actif</option>
                                <option value="Passif">Passif</option>
                                <option value="Charge">Charge</option>
                                <option value="Produit">Produit</option>
                            </select>
                        </div>
                    </div>

                    {filteredAccounts && filteredAccounts.length > 0 ? (
                        <div className="overflow-x-auto bg-white rounded-xl shadow-xl">
                            <table className="w-full">
                                <thead className={`bg-${themeColors.primaryEnd}`}>
                                <tr>
                                    <th className="px-5 py-4 text-left text-xs font-semibold text-white uppercase tracking-wider rounded-tl-xl">Code / Statut</th>
                                    <th className="px-5 py-4 text-left text-xs font-semibold text-white uppercase tracking-wider">Libellé</th>
                                    <th className="px-5 py-4 text-left text-xs font-semibold text-white uppercase tracking-wider">Classe</th>
                                    <th className="px-5 py-4 text-center text-xs font-semibold text-white uppercase tracking-wider">Type</th>
                                    <th className="px-5 py-4 text-right text-xs font-semibold text-white uppercase tracking-wider">Solde</th>
                                    <th className="px-5 py-4 text-center text-xs font-semibold text-white uppercase tracking-wider">Dernière Util.</th>
                                    <th className="px-5 py-4 text-center text-xs font-semibold text-white uppercase tracking-wider rounded-tr-xl">Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                {filteredAccounts.map((account, index) => (
                                    <tr key={account.id} className={`border-b border-gray-200 hover:bg-gray-50 transition-colors duration-200 ${index === filteredAccounts.length - 1 ? 'border-b-0' : ''}`}>
                                        <td className={`px-5 py-4 whitespace-nowrap border-l-4 border-${themeColors.primaryStart}`}>
                                            <div className="text-sm font-semibold text-gray-900">{account.code}</div>
                                            <div className={`text-xs font-medium ${account.isActive ? 'text-green-600' : 'text-red-600'}`}>
                                                {account.isActive ? 'Actif' : 'Inactif'}
                                            </div>
                                        </td>
                                        <td className="px-5 py-4">
                                            <div className="text-sm text-gray-900 font-medium">{account.label}</div>
                                        </td>
                                        <td className="px-5 py-4 whitespace-nowrap">
                                            <div className="flex items-center">
                                                <div className={`${getClassColor(account.class)} mr-2`}>
                                                    {getClassIcon(account.class)}
                                                </div>
                                                <div>
                                                    <div className="text-sm text-gray-900">Cl. {account.class}</div>
                                                    <div className="text-xs text-gray-500">{ohadaClasses[account.class]?.name}</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td className="px-5 py-4 whitespace-nowrap text-center">
                                                <span className={`px-2.5 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                                    account.type === 'Actif' ? 'bg-green-100 text-green-800' :
                                                        account.type === 'Passif' ? `bg-${themeColors.primaryStart} bg-opacity-10 text-${themeColors.primaryEnd}` : // Example for Passif
                                                            account.type === 'Charge' ? 'bg-red-100 text-red-800' :
                                                                'bg-emerald-100 text-emerald-800' // Produit
                                                }`}>
                                                    {account.type}
                                                </span>
                                        </td>
                                        <td className="px-5 py-4 whitespace-nowrap text-right">
                                            <div className="text-sm text-gray-900 font-semibold">{formatAmount(account.balance)}</div>
                                        </td>
                                        <td className="px-5 py-4 whitespace-nowrap text-center">
                                            <div className="text-sm text-gray-600">{formatDate(account.lastUsed)}</div>
                                        </td>
                                        <td className="px-5 py-4 whitespace-nowrap text-center">
                                            <div className="flex items-center justify-center gap-2">
                                                <button
                                                    onClick={() => console.log("Voir détails:", account.id)}
                                                    className={`text-${themeColors.primaryStart} hover:text-${themeColors.primaryEnd} transition-colors duration-200`}
                                                    title="Voir détails"
                                                >
                                                    <Eye className="h-5 w-5" />
                                                </button>
                                                <button
                                                    onClick={() => setEditingAccount(account)}
                                                    className="text-yellow-500 hover:text-yellow-600 transition-colors duration-200"
                                                    title="Modifier"
                                                >
                                                    <Edit2 className="h-5 w-5" />
                                                </button>
                                                <button
                                                    onClick={() => {
                                                        if (confirm("Êtes-vous sûr de vouloir supprimer ce compte ?")) {
                                                            console.log("Supprimer:", account.id);
                                                        }
                                                    }}
                                                    className="text-red-500 hover:text-red-600 transition-colors duration-200"
                                                    title="Supprimer"
                                                >
                                                    <Trash2 className="h-5 w-5" />
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>
                    ) : (
                        <div className="text-center bg-white p-12 rounded-xl shadow-lg">
                            <Calculator className={`h-16 w-16 ${themeColors.textPrimaryEnd} mx-auto mb-4 opacity-70`} />
                            <h2 className="text-2xl font-semibold text-gray-700 mb-2">Aucun compte trouvé</h2>
                            <p className="text-gray-500 mb-6">
                                Vos filtres actuels n'ont retourné aucun résultat. Essayez de les ajuster ou ajoutez un nouveau compte.
                            </p>
                            <button
                                className={`px-5 py-2.5 text-white rounded-lg bg-gradient-to-r from-${themeColors.primaryStart} to-${themeColors.primaryEnd} font-semibold hover:from-${themeColors.primaryEnd} hover:to-${themeColors.primaryStart} transition-all duration-300`}
                                onClick={() => setShowCreateModal(true)}
                            >
                                Créer un nouveau compte
                            </button>
                        </div>
                    )}

                    {(showCreateModal || editingAccount) && (
                        <AccountModal
                            account={editingAccount}
                            onClose={() => {
                                setShowCreateModal(false);
                                setEditingAccount(null);
                            }}
                            onSave={(formData) => {
                                console.log("Sauvegarder:", formData);
                                // Ici on ferait l'appel API pour sauvegarder
                                loadChartOfAccounts();
                            }}
                        />
                    )}
                </div>
            </div>
        </AccountantDashBoard>
    );
}// END OF FILE: src/Pages/Laboratory/LaboratoryExamList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/LaboratoryHomePage.jsx

import { Users, ClipboardList, Calendar, UserPlus, FileSpreadsheet } from 'lucide-react';
import { LaboratoryDashBoard } from "./LaboratoryDashBoard.jsx";
import { laboratoryNavLink } from "./LaboratoryNavLink.js";
import { LaboratoryNavBar } from "./LaboratoryNavBar.jsx";
import { useNavigate } from "react-router-dom";
import { AppRoutesPaths as AppRouterPaths } from "../../Router/appRouterPaths.js";
import { CustomDashboard } from "../../GlobalComponents/CustomDashboard.jsx";
import StatCard from "../../GlobalComponents/StatCard.jsx";
import QuickActionButton from "../../GlobalComponents/QuickActionButton.jsx";
import { useState, useEffect } from 'react';
import axiosInstance from "../../Utils/axiosInstance.js";

export function LaboratoryHomePage() {
    const navigate = useNavigate();
    const [stats, setStats] = useState({ patients: 0, examRequests: 0 });

    useEffect(() => {
        async function fetchStats() {
            try {
                const response = await axiosInstance.get('/exam-request/');
                if (response.status === 200) {
                    // Check if response.data is an array or if it contains a "results" property.
                    const examRequestsArray = Array.isArray(response.data)
                        ? response.data
                        : response.data.results || [];
                    // Calculate unique patient IDs from exam requests.
                    const uniquePatientIds = new Set(
                        examRequestsArray.map(exam => exam.idPatient?.id)
                    );
                    setStats({
                        patients: uniquePatientIds.size,
                        examRequests: examRequestsArray.length
                    });
                }
            } catch (error) {
                console.error("Error fetching exam request stats:", error);
            }
        }
        fetchStats();
    }, []);

    return (
        <CustomDashboard linkList={laboratoryNavLink} requiredRole={"Labtech"}>
            <LaboratoryNavBar />
            <div className="p-6 space-y-6">
                <div className="bg-gradient-to-r from-primary-end to-primary-start rounded-lg p-6 text-white">
                    <h1 className="text-3xl font-bold mb-2">Welcome to the Laboratory Dashboard</h1>
                    <p className="opacity-90 font-semibold text-xl">
                        Manage your clinic efficiently and monitor all activities from this centralized interface.
                    </p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <StatCard
                        icon={Users}
                        title="Patients"
                        value={stats.patients}
                        description="Patients with exam requests"
                        color="bg-blue-500"
                    />
                    <StatCard
                        icon={ClipboardList}
                        title="Exam Requests"
                        value={stats.examRequests}
                        description="Total exam requests"
                        color="bg-purple-500"
                    />
                </div>

                <div className="bg-white rounded-lg shadow-lg p-6">
                    <h2 className="text-xl font-bold text-gray-800 mb-4">Quick Access</h2>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <QuickActionButton
                            icon={UserPlus}
                            label="View Patients for Consultation"
                            onClick={() => navigate(AppRouterPaths.laboratoryPatientList)}
                        />
                        <QuickActionButton
                            icon={Calendar}
                            label="View Exam Requests"
                            onClick={() => navigate(AppRouterPaths.laboratoryExamenList)}
                        />
                        <QuickActionButton
                            icon={FileSpreadsheet}
                            label="View Examination History"
                            onClick={() => navigate(AppRouterPaths.laboratoryExamenHistories)}
                        />
                    </div>
                </div>
            </div>
        </CustomDashboard>
    );
}
// END OF FILE: src/Pages/Laboratory/LaboratoryHomePage.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/LaboratoryNavBar.jsx

import {FaCog, FaEnvelope, FaSignOutAlt, FaBell} from "react-icons/fa";
import {Tooltip} from "antd";
import {useAuthentication} from "../../Utils/Provider.jsx";
import userIcon from "../../assets/userIcon.png";
import { AppRoutesPaths } from "../../Router/appRouterPaths.js";
import { useNavigate } from "react-router-dom";

export function LaboratoryNavBar()
{

    const {logout , userData} = useAuthentication();
    const navigate = useNavigate();
    const applyNavLinkBtnStyle = () => {
        return " w-12 h-10 mt-1 border-2 bg-gray-100 flex justify-center items-center rounded-xl shadow-xl hover:bg-secondary text-secondary text-xl hover:text-white transition-all duration-300";
    }


    return (
        <>
            <div className="border-b-2 m-3  border-b-gray-300">
                <div className="w-full h-[70px] flex justify-between">
                    <h1 className="ml-3 text-4xl text-secondary mt-3.5 font-bold">
                        Laborantin
                    </h1>
                    <div className="flex gap-3 mt-3.5 mb-4 mr-5">
                        <Tooltip placement={"top"} title={"settings"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaCog/>
                            </button>

                        </Tooltip>

                        <Tooltip placement={"top"} title={"Messages"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaEnvelope/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"Notification"}>
                            <button
                                onClick={
                                    () => {navigate(AppRoutesPaths.laboratoryNotification)}
                                }
                                className={applyNavLinkBtnStyle()}>
                                <FaBell/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"LogOut"}>
                            <button
                                onClick={() => {logout()}}
                                className={" w-12 h-10 mt-1 border-2 bg-red-400 flex justify-center items-center rounded-xl shadow-xl hover:bg-white text-white text-xl hover:text-red-500 transition-all duration-300"}>
                                <FaSignOutAlt/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"Profile"}>
                            <button className="ml-3 flex">
                                <p className="font-bold text-secondary text-xl mt-2">{"Hello " +userData?.username + "!"}</p>
                                <img src={userIcon} alt={"user-icon"} className="w-12 h-12 ml-2 mr-3"/>

                            </button>
                        </Tooltip>
                    </div>
                </div>
            </div>
        </>
    )
}// END OF FILE: src/Pages/Laboratory/LaboratoryNavBar.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/LaboratoryNavLink.js

import {FaClipboardList, FaBell, FaHistory, FaHome, FaQuestionCircle} from "react-icons/fa";
import {AppRoutesPaths as appRoutes} from "../../Router/appRouterPaths.js";
import {FiList} from "react-icons/fi";
import {UserPlus} from "lucide-react";

export const laboratoryNavLink = [

    {
        name: "Dashboard",
        link: appRoutes.laboratoryAssistantPage,
        icon: FaHome,
    },
    {
        name: "Patient list",
        link: appRoutes.laboratoryPatientList,
        icon: UserPlus,
    },
    {
        icon: FiList,
        name: "Exams List",
        link: appRoutes.laboratoryExamenList
    },
    {
        icon: FaHistory,
        name: "Exams History",
        link: appRoutes.laboratoryExamenHistories
    },
    {
        icon: FaBell,
        name: "Notifications",
        link: appRoutes.laboratoryNotification
    },
    {
        name: 'Help Center',
        icon: FaQuestionCircle,
        link: appRoutes.helpCenterPage,
    },
    /*{
        name: 'Exams',
        icon: FiList,
        subLinks: [
            {
                icon: FiList,
                name: "Exams List",
                link: appRoutes.laboratoryExamenList
            },
            {
                icon: FaHistory,
                name: "Exams History",
                link: appRoutes.laboratoryExamenHistories
            },
            /!*  {
                  icon: FaPlus,
                  name: "Add A Consultation",
                  link: appRoutes.doctorAddConsultation
              }*!/
        ]
    },*/
    /*{
        name: 'Examens en cours',
        icon: FaClipboardList,
        link: appRoutes.laboratoryCurrent,
        description: 'Voir et gérer les examens en cours'
    },
    {
        name: 'Historique',
        icon: FaHistory,
        link: appRoutes.laboratoryHistory ,
        description: 'Consulter l\'historique des examens'
    },*/
    
    
];// END OF FILE: src/Pages/Laboratory/LaboratoryNavLink.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/LaboratoryPatientList.jsx

import { FaArrowLeft, FaArrowRight, FaEdit, FaEye, FaSearch } from "react-icons/fa";
import { Tooltip } from "antd";
import { useEffect, useState } from "react";
import { ViewPatientDetailsModal } from "../Receptionist/ViewPatientDetailsModal.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import { LaboratoryDashBoard } from "../Laboratory/LaboratoryDashBoard.jsx";
import { LaboratoryNavBar } from "../Laboratory/LaboratoryNavBar.jsx";
import { laboratoryNavLink } from "../Laboratory/LaboratoryNavLink.js";
import { useNavigate } from "react-router-dom";
import { useAuthentication } from "../../Utils/Provider.jsx";

export function LaboratoryPatientList() {
    const [selectedPatientDetails, setSelectedPatientDetails] = useState({});
    const [canOpenViewPatientDetailModal, setCanOpenViewPatientDetailModal] = useState(false);
    const [patients, setPatients] = useState([]);
    const [numberOfPatients, setNumberOfPatients] = useState(0);
    const [nexUrlForRenderPatientList, setNexUrlForRenderPatientList] = useState("");
    const [previousUrlForRenderPatientList, setPreviousUrlForRenderPatientList] = useState("");
    const [actualPageNumber, setActualPageNumber] = useState(1);
    const { userData } = useAuthentication();
    const navigate = useNavigate();

    // Cette fonction calcule le nombre de pages en se basant sur 5 patients par page
    function calculateNumberOfSlide() {
        return numberOfPatients % 5 === 0
            ? numberOfPatients / 5
            : Math.floor(numberOfPatients / 5) + 1;
    }

    function updateActualPageNumber(action) {
        if (action === "next") {
            if (actualPageNumber < calculateNumberOfSlide()) {
                setActualPageNumber(actualPageNumber + 1);
            }
        } else {
            if (actualPageNumber > 1) {
                setActualPageNumber(actualPageNumber - 1);
            }
        }
    }

    // On utilise ici l'endpoint des exam-request pour récupérer la liste des examens,
    // puis on en extrait les patients.
    async function fetchPatients() {
        try {
            const response = await axiosInstance.get("/exam-request/");
            if (response.status === 200) {
                console.log(response.data);
                // L'API peut renvoyer directement un tableau ou un objet contenant une propriété "results"
                const examRequests = Array.isArray(response.data)
                    ? response.data
                    : response.data.results || [];
                // Extraire le patient de chaque examen
                const patientsArr = examRequests.map((exam) => exam.idPatient);
                // Filtrer les doublons en utilisant une Map (clé = patient.id)
                const uniquePatients = Array.from(
                    new Map(patientsArr.map((p) => [p.id, p])).values()
                );
                setPatients(uniquePatients);
                setNumberOfPatients(uniquePatients.length);
                // Si votre API est paginée, vous pouvez récupérer next/previous s'ils existent
                setNexUrlForRenderPatientList(response.data.next || "");
                setPreviousUrlForRenderPatientList(response.data.previous || "");
            }
        } catch (error) {
            setPatients([]);
            setNumberOfPatients(0);
            setNexUrlForRenderPatientList("");
            setPreviousUrlForRenderPatientList("");
            console.log(error);
        }
    }

    useEffect(() => {
        fetchPatients();
    }, []);

    async function fetchNextOrPreviousPatientList(url) {
        if (url) {
            try {
                const response = await axiosInstance.get(url);
                if (response.status === 200) {
                    const examRequests = Array.isArray(response.data)
                        ? response.data
                        : response.data.results || [];
                    const patientsArr = examRequests.map((exam) => exam.idPatient);
                    const uniquePatients = Array.from(
                        new Map(patientsArr.map((p) => [p.id, p])).values()
                    );
                    setPatients(uniquePatients);
                    setNumberOfPatients(uniquePatients.length);
                    setNexUrlForRenderPatientList(response.data.next || "");
                    setPreviousUrlForRenderPatientList(response.data.previous || "");
                }
            } catch (error) {
                setPatients([]);
                setNumberOfPatients(0);
                setPreviousUrlForRenderPatientList("");
                setNexUrlForRenderPatientList("");
                console.log(error);
            }
        }
    }

    return (
        <LaboratoryDashBoard linkList={laboratoryNavLink} requiredRole={"Labtech"}>
            <LaboratoryNavBar />
            <div className="mt-5 flex flex-col relative">
                {/* Header content with search bar */}
                <div className="flex justify-between mb-5">
                    <p className="font-bold text-xl mt-2 ml-5"> List Of Patient </p>
                    <div className="flex mr-5">
                        <div className="flex w-[300px] h-10 border-2 border-secondary rounded-lg">
                            <FaSearch className="text-xl text-secondary m-2" />
                            <input
                                type="text"
                                placeholder={"search for a specific patient"}
                                className="border-none focus:outline-none focus:ring-0"
                            />
                        </div>
                        <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
                            Search
                        </button>
                    </div>
                </div>

                {/* List of registered patients */}
                <div className="ml-5 mr-5 ">
                    <table className="w-full border-separate border-spacing-y-2">
                        <thead>
                        <tr>
                            <th className="text-center text-white p-4 text-xl font-bold bg-primary-end border-gray-200 rounded-l-2xl ">
                                No
                            </th>
                            <th className="text-center text-white p-4 text-xl font-bold bg-primary-end border-gray-200">
                                First Name
                            </th>
                            <th className="text-center text-white p-4 text-xl font-bold bg-primary-end border-gray-200">
                                Last Name
                            </th>
                            <th className="text-center text-white p-4 text-xl font-bold bg-primary-end border-gray-200">
                                Gender
                            </th>
                            <th className="text-center text-white p-4 text-xl font-bold bg-primary-end border-gray-200">
                                Address
                            </th>
                            <th className="text-center text-white p-4 text-xl font-bold bg-primary-end flex-col rounded-r-2xl">
                                <p>Operations</p>
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        {patients.map((patient, index) => (
                            <tr key={patient.id || index} className="bg-gray-100">
                                <td className="p-4 text-md text-blue-900 rounded-l-lg text-center">
                                    {index + 1}
                                </td>
                                <td className="p-4 text-md text-center font-bold">
                                    {patient.firstName}
                                </td>
                                <td className="p-4 text-md text-center">{patient.lastName}</td>
                                <td className="p-4 text-md text-center">{patient.gender}</td>
                                <td className="p-4 text-center text-md">{patient.address}</td>
                                <td className="p-4 relative rounded-r-lg">
                                    <div className="w-full items-center justify-center flex gap-6">
                                        <Tooltip placement={"left"} title={"view patient information"}>
                                            <button
                                                onClick={() => {
                                                    setSelectedPatientDetails(patient);
                                                    setCanOpenViewPatientDetailModal(true);
                                                }}
                                                className="flex items-center justify-center w-9 h-9 text-primary-end text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300"
                                            >
                                                <FaEye />
                                            </button>
                                        </Tooltip>
                                        <Tooltip placement={"right"} title={"View Medical Folder"}>
                                            <button
                                                onClick={() => {
                                                    navigate(`/doctor/patients/medical-folder/${patient?.id}`, {
                                                        state: { patient },
                                                    });
                                                }}
                                                className="flex items-center justify-center w-9 h-9 text-green-500 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300"
                                            >
                                                <FaEdit />
                                            </button>
                                        </Tooltip>
                                    </div>
                                </td>
                            </tr>
                        ))}
                        </tbody>
                    </table>

                    {/* Pagination content */}
                    <div className="fixed w-full justify-center -right-16 bottom-0 flex mt-6 mb-4">
                        <div className="flex gap-4">
                            <Tooltip placement={"left"} title={"previous slide"}>
                                <button
                                    onClick={async () => {
                                        await fetchNextOrPreviousPatientList(previousUrlForRenderPatientList);
                                        updateActualPageNumber("prev");
                                    }}
                                    className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl text-secondary hover:text-2xl duration-300 transition-all hover:text-white shadow-xl flex justify-center items-center mt-2"
                                >
                                    <FaArrowLeft />
                                </button>
                            </Tooltip>
                            <p className="text-secondary text-2xl font-bold mt-4">
                                {actualPageNumber}/{calculateNumberOfSlide()}
                            </p>
                            <Tooltip placement={"right"} title={"next slide"}>
                                <button
                                    onClick={async () => {
                                        await fetchNextOrPreviousPatientList(nexUrlForRenderPatientList);
                                        updateActualPageNumber("next");
                                    }}
                                    className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl text-secondary hover:text-2xl duration-300 transition-all hover:text-white shadow-xl flex justify-center items-center mt-2"
                                >
                                    <FaArrowRight />
                                </button>
                            </Tooltip>
                        </div>
                    </div>

                    {/* Modal for viewing patient details */}
                    <ViewPatientDetailsModal
                        isOpen={canOpenViewPatientDetailModal}
                        patient={selectedPatientDetails}
                        onClose={() => {
                            setCanOpenViewPatientDetailModal(false);
                        }}
                    />
                </div>
            </div>
        </LaboratoryDashBoard>
    );
}
// END OF FILE: src/Pages/Laboratory/LaboratoryPatientList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Laboratory/Notification.jsx

import {laboratoryNavLink} from "./LaboratoryNavLink.js";
import {LaboratoryNavBar} from "./LaboratoryNavBar.jsx";
import {LaboratoryDashBoard} from "./LaboratoryDashBoard.jsx";
import NotificationsList from "../../GlobalComponents/Notification.jsx";


export function Notification (){

    return(
        <LaboratoryDashBoard linkList={laboratoryNavLink} requiredRole={"Labtech"}>
            <LaboratoryNavBar />
            <NotificationsList />
        </LaboratoryDashBoard>
    );
}// END OF FILE: src/Pages/Laboratory/Notification.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/LandingPage/LandingPage.jsx

import React from 'react';
import { useNavigate } from 'react-router-dom';

export function LandingPage() {
    const navigate = useNavigate();

    function StatCard({ number, label, variant = 'white' }) {
        return (
            <div className={`flex flex-col items-center justify-center p-6 ${
                variant === 'white' ? 'bg-white' : 'bg-primary-end'
            }`}>
                <span className={`text-4xl font-bold ${
                    variant === 'white' ? 'text-gray-800' : 'text-white'
                }`}>{number}</span>
                <span className={`mt-2 ${
                    variant === 'white' ? 'text-gray-600' : 'text-white'
                }`}>{label}</span>
            </div>
        );
    }

    function ServiceCard({ icon, title }) {
        return (
            <div className="flex flex-col items-center bg-primary-end p-8 rounded-lg">
                <img src={icon} alt={title} className="w-16 h-16" />
                <span className="mt-4 text-center text-black font-medium">{title}</span>
            </div>
        );
    }

    function DoctorCard({ photo, name, speciality }) {
        return (
            <div className="flex flex-col items-center">
                <div className="w-full aspect-square overflow-hidden bg-emerald-800">
                    <img src="/doctorimage.png" alt={name} className="w-full h-full object-cover" />
                </div>
                <h3 className="mt-3 font-medium text-gray-800">{name}</h3>
                <p className="text-sm text-gray-600">{speciality}</p>
            </div>
        );
    }

    const stats = [
        { number: "50+", label: "Doctor", variant: 'white' },
        { number: "50+", label: "Patients", variant: 'green' },
        { number: "20+", label: "Expert", variant: 'white' },
        { number: "5+", label: "Specializations", variant: 'green' }
    ];

    const services = [
        { icon: "/hospital.png", title: "Specialized Services" },
        { icon: "/injection.png", title: "Vaccination" },
        { icon: "/doctor.png", title: "Diagnostics" },
        { icon: "/heart.png", title: "Dental Care" },
        { icon: "/helpcenter.png", title: "Pharmacy" }
    ];

    return (
        <div className="min-h-screen">
            {/* Hero Section - Blue Gradient Background */}
            <div className="relative bg-gradient-to-br from-primary-start to-primary-end pb-16">
    {/* Image en background avec overlay */}
    <div className="absolute inset-0">
        <img 
            src="/welcomeImage.png"
            alt="Background"
            className="w-full h-full md-5 object-cover" 
        />
        {/* Overlay gradient */}
        <div className="absolute inset-0 bg-gradient-to-br from-primary-start/40 to-primary-end/40"></div>
    </div>

    {/* Contenu */}
    <div className="container mx-auto px-6 pt-12 relative z-10">
        <div className="flex flex-col items-center text-center">
            <div className="w-full max-w-2xl">
                <h1 className="text-4xl md:text-5xl font-bold text-white text-left mb-4">
                    Welcome to<br />
                    Fultang Polyclinic
                </h1>
                <p className="text-white/80 text-left text-lg mb-8">
                    The hospital to trust to care about those you love
                </p>
                <button
                    onClick={() => navigate("/login")}
                    className="px-8 py-3 bg-white text-gray-800 text-left rounded-full font-medium hover:bg-opacity-90 transition-all"
                >
                    Log In Now
                </button>
            </div>
        </div>
    </div>
</div>
            {/* Stats Section - Overlapping Cards */}
            <div className="container mx-auto px-6 mt-3 over">
                <div className="grid grid-cols-4 gap-0 -mt-8">
                    {stats.map((stat, index) => (
                        <StatCard key={index} {...stat} />
                    ))}
                </div>
            </div>

            {/* White Background Sections */}
            <div className="bg-white">
                {/* Services Section */}
                <div className="container mx-auto px-6">
                    <section className="py-16">
                        <div className="mb-8">
                            <h2 className="text-2xl font-bold text-gray-800">Our Services</h2>
                            <p className="text-gray-600 mt-2">
                                We bring a fresh and exciting service to the care we provide.
                                Best diagnosis and treatment.
                            </p>
                        </div>
                        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6">
                            {services.map((service, index) => (
                                <ServiceCard key={index} {...service} />
                            ))}
                        </div>
                    </section>

                    {/* Doctors Section */}
                    <section className="py-16">
                        <h2 className="text-2xl font-bold text-gray-800 mb-8 text-center">
                            Meet Some of Our Doctors
                        </h2>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                            {[1, 2, 3].map((i) => (
                                <DoctorCard
                                    key={i}
                                    photo="/images/doctor-profile.jpg"
                                    name="Dr. James.Lambert"
                                    speciality="Dentist"
                                />
                            ))}
                        </div>
                    </section>
                </div>
            </div>

            {/* About Section */}
            <div className="bg-emerald-800">
                <div className="container mx-auto px-6">
                    <section className="py-16 relative overflow-hidden">
                        <div className="relative z-10">
                            <h2 className="text-3xl font-bold text-white mb-4">About us</h2>
                            <p className="text-white/90 max-w-xl">
                                Fultang Polyclinic is committed to providing exceptional healthcare services 
                                through innovative medical solutions and compassionate care...
                            </p>
                        </div>
                        <img 
                            src="/endpicture.png" 
                            alt="About background" 
                            className="absolute inset-0 w-full h-full object-cover mix-blend-overlay"
                        />
                    </section>
                </div>
            </div>

            <footer className="bg-emerald-800 py-4 text-center text-white">
                <p>© {new Date().getFullYear()} Fultang Polyclinic</p>
            </footer>
        </div>
    );
}

export default LandingPage;// END OF FILE: src/Pages/LandingPage/LandingPage.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Modals/ConfirmAction.Modal.jsx

import { AlertCircle, X } from 'lucide-react';
import PropTypes from "prop-types";

export function ConfirmationModal ({ isOpen, onClose, onConfirm, title, message }) {


    ConfirmationModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        onConfirm: PropTypes.func.isRequired,
        title: PropTypes.string.isRequired,
        message: PropTypes.string.isRequired
    }

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
            <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm mx-4 animate-fade-in-up">
                <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center">
                        <AlertCircle className="w-12 h-12 text-yellow-500 mr-2" />
                        <h3 className="text-2xl font-bold mt-1 text-gray-900">{title}</h3>
                    </div>
                </div>
                <p className="text-gray-700 mb-6 font-semibold">{message}</p>
                <div className="flex justify-end space-x-3">
                    <button
                        onClick={() => {
                            onConfirm();
                            onClose();
                        }}
                        className="px-4 py-2 bg-primary-end text-white rounded-lg text-md hover:text-xl font-bold transition-all duration-300"
                    >
                        Confirm
                    </button>
                    <button
                        onClick={onClose}
                        className="px-4 py-2 bg-red-400 text-white  rounded-lg font-bold hover:bg-red-500 transition-all duration-300"
                    >
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    );
}

// END OF FILE: src/Pages/Modals/ConfirmAction.Modal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Modals/ErrorModal.jsx

import { XCircle } from 'lucide-react';
import PropTypes from "prop-types";

ErrorModal.propTypes = {
    isOpen: PropTypes.bool.isRequired,
    onCloseErrorModal: PropTypes.func.isRequired,
    message: PropTypes.string.isRequired
};


export function ErrorModal({ isOpen, onCloseErrorModal, message }) {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
            <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm">
                <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center">
                        <XCircle className="w-14 h-14 text-red-500 mr-2" />
                        <h3 className="text-3xl font-bold text-red-500">Error</h3>
                    </div>
                </div>
                <p className="mb-6 mt-3 text-md">{message}</p>
                <div className="flex justify-center">
                    <button
                        onClick={() => onCloseErrorModal(false)}
                        className="px-4 py-1 bg-red-400 hover:bg-red-500  font-bold text-md text-white rounded-md transition-colors duration-300"
                    >
                        Close
                    </button>
                </div>
            </div>
        </div>
    );
}


// END OF FILE: src/Pages/Modals/ErrorModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Modals/SuccessModal.jsx

import { CheckCircle } from 'lucide-react';
import PropTypes from "prop-types";


export function SuccessModal ({ isOpen, canOpenSuccessModal, message, makeAction }) {

    SuccessModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        canOpenSuccessModal: PropTypes.func.isRequired,
        message: PropTypes.string.isRequired,
        makeAction: PropTypes.func,
    }


    function onCloseModal()
    {
        canOpenSuccessModal(false);
        makeAction();
    }


    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
            <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm">
                <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center">
                        <CheckCircle className="w-12 h-12 text-primary-end mr-2 animate-success-check" />
                        <h3 className="text-2xl font-bold text-gray-900">Success</h3>
                    </div>
                </div>
                <p className="mb-6 mt-3 text-md">{message}</p>
                <div className="flex justify-center">
                    <button
                        onClick={() => onCloseModal()}
                        className="px-4 py-1 bg-primary-end font-bold text-md text-white  rounded-md  transition-colors duration-300"
                    >
                        Continue
                    </button>
                </div>
            </div>
        </div>
    );
}

// END OF FILE: src/Pages/Modals/SuccessModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Modals/wait.jsx

import {Spin} from "antd";
import { LoadingOutlined } from '@ant-design/icons'

export default function Wait ()
{
    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
            <div className="flex flex-col space-y-3 justify-center items-center border-2 rounded w-[300px] h-[200px] bg-gray-100 relative transition-all duration-300 ">
                <Spin
                    indicator={
                        <LoadingOutlined
                            style={{
                                fontSize: 70,
                                color: '#50C2B9'
                            }}
                            spin
                        />
                    }
                />
            </div>
        </div>
    )
}// END OF FILE: src/Pages/Modals/wait.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Nurse/ConfirmSaveParameters.jsx

import {
    Activity,
    AlertCircle,
    FileText,
    Heart,
    Pill,
    Ruler,
    Save,
    Scissors,
    Thermometer,
    UserPlus,
    Users,
    Weight,
    X
} from "lucide-react";
import PropTypes from "prop-types";



export function ConfirmSaveParameters({isOpen, onClose, parameters, bmi, action, patientInfos})
{


    ConfirmSaveParameters.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        parameters: PropTypes.object.isRequired,
        bmi: PropTypes.string.isRequired,
        action: PropTypes.func.isRequired,
        patientInfos: PropTypes.object.isRequired
    }

   if(!isOpen) return null;

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
            <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto p-6">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-2xl  text-primary-start font-bold">Saved Medical Parameters of {patientInfos.firstName + ' ' + patientInfos.lastName}</h2>
                    <button onClick={() => onClose()}>
                        <X className="text-secondary font-bold w-8 h-8 hover:w-10 hover:h-10 hover:text-primary-end transition-all duration-300"/>
                    </button>
                </div>

                <div className="grid grid-cols-2 gap-6">
                    {/* Biometric parameters */}
                    <div className="space-y-4">
                        <h3 className="text-lg font-semibold ">Biometric Parameters</h3>
                        <div className="grid grid-cols-2 gap-4">
                            <div className="bg-gray-200 p-4 rounded-lg flex items-center gap-3">
                                <Weight className="h-5 w-5 text-primary-start"/>
                                <div>
                                    <span className="text-sm text-gray-600">Weight</span>
                                    <p className="text-lg font-medium text-gray-900">{parameters.weight || '-'} Kg</p>
                                </div>
                            </div>
                            <div className="bg-gray-200 p-4 rounded-lg flex items-center gap-3">
                                <Ruler className="h-5 w-5 text-primary-start"/>
                                <div>
                                    <span className="text-sm text-gray-600">Height</span>
                                    <p className="text-lg font-medium text-gray-900">{parameters.height || '-'} m</p>
                                </div>
                            </div>
                            <div className="bg-gray-200 p-4 rounded-lg flex items-center gap-3">
                                <Activity className="h-5 w-5 text-primary-start"/>
                                <div>
                                    <div className="flex gap-1">
                                        <span className="text-sm text-gray-600">BMI</span>
                                        <span className="text-xs mt-0.5  text-gray-600">(Body Mass Index)</span>
                                    </div>
                                    <p className="text-lg font-medium text-gray-900">{bmi} kg/m²</p>
                                </div>
                            </div>
                            <div className="bg-gray-200 p-4 rounded-lg flex items-center gap-3">
                                <Thermometer className="h-5 w-5 text-primary-start"/>
                                <div>
                                    <span className="text-sm text-gray-600">Temperature</span>
                                    <p className="text-lg font-medium text-gray-900">{parameters.temperature || '-'} °C</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Cardiovascular parameters */}
                    <div className="space-y-4">
                        <h3 className="text-lg font-semibold ">Cardiovascular
                            Parameters</h3>
                        <div className="grid grid-cols-2 gap-4">
                            <div className="bg-gray-200 p-4 rounded-lg flex items-center gap-3">
                                <Heart className="h-5 w-5 text-primary-start"/>
                                <div>
                                    <span className="text-sm text-gray-600">Blood Pressure</span>
                                    <p className="text-lg font-medium text-gray-900">{parameters.bloodPressure || '-'} mmHg</p>
                                </div>
                            </div>
                            <div className="bg-gray-200 p-4 rounded-lg flex items-center gap-3">
                                <Activity className="h-5 w-5 text-primary-start"/>
                                <div>
                                    <span className="text-sm text-gray-600">Heart Rate</span>
                                    <p className="text-lg font-medium text-gray-900">{parameters.heartRate || '-'} bpm</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Medical history */}
                    <div className="space-y-4">
                        <h3 className="text-lg font-semibold text-gray-800">Medical History</h3>
                        <div className="space-y-4">
                            <div className="bg-gray-200 p-4 rounded-lg flex items-start gap-3">
                                <FileText className="h-5 w-5 text-primary-start mt-1"/>
                                <div>
                                    <span className="text-sm text-gray-600">Chronic Diseases</span>
                                    <p className="mt-1 text-gray-900 whitespace-pre-wrap">{parameters.chronicalDiseases || '-'}</p>
                                </div>
                            </div>
                            <div className="bg-gray-200 p-4 rounded-lg flex items-start gap-3">
                                <Scissors className="h-5 w-5 text-primary-start mt-1"/>
                                <div>
                                    <span className="text-sm text-gray-600">Surgeries</span>
                                    <p className="mt-1 text-gray-900 whitespace-pre-wrap">{parameters.surgeries || '-'}</p>
                                </div>
                            </div>
                            <div className="bg-gray-200 p-4 rounded-lg flex items-start gap-3">
                                <Pill className="h-5 w-5 text-primary-start mt-1"/>
                                <div>
                                    <span className="text-sm text-gray-600">Current Medications</span>
                                    <p className="mt-1 text-gray-900 whitespace-pre-wrap">{parameters.currentMedication || '-'}</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Family history */}
                    <div>
                        <h3 className="text-lg font-semibold text-gray-800">Family History</h3>
                        <div className="bg-gray-200 p-4 rounded-lg flex items-start gap-3 mt-4">
                            <Users className="h-5 w-5 text-primary-startmt-1"/>
                            <div>
                                <span className="text-sm text-gray-600">Family Medical History</span>
                                <p className="mt-1 text-gray-900 whitespace-pre-wrap">{parameters.familyMedicalHistory || '-'}</p>
                            </div>
                        </div>

                        <div className="bg-gray-200 p-4 rounded-lg flex items-start gap-3 mt-4 ">
                            <AlertCircle className="h-5 w-5 text-primary-start mt-1"/>
                            <div>
                                <span className="text-sm text-gray-600">Allergies</span>
                                <p className="mt-1 text-gray-900 whitespace-pre-wrap">{parameters.allergies || '-'}</p>
                            </div>
                        </div>

                        <div className="mt-10 flex gap-5  justify-center">
                            <button type="button"
                                    onClick={action}
                                    className="px-4 py-2 bg-gradient-to-r from-primary-end to-primary-start font-bold hover:text-xl text-md text-white rounded-md hover:opacity-70 transition-all duration-300 flex items-center justify-center gap-2"
                            >
                                <Save className="w-5 h-5"/>
                                Save Parameters
                            </button>
                            <button type="button"
                                    onClick={onClose}
                                    className={` py-2 px-4 rounded-md flex items-center justify-center gap-2 bg-red-400 text-white font-bold hover:bg-red-500 transition-all duration-300`}
                            >
                                <UserPlus className="w-5 h-5"/>
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}// END OF FILE: src/Pages/Nurse/ConfirmSaveParameters.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Nurse/ConsultationHistory.jsx

import {NurseNavBar} from "./NurseNavBar.jsx";
import PatientInformationBoard from "./PatientInformationBoard.jsx";
import {useLocation} from "react-router-dom";
import {FaSearch} from "react-icons/fa";
import flecheDeroulanteBas from "../../assets/flecheDeroulanteBas.png"
import flecheDeroulanteHaut from "../../assets/flecheDeroulanteHaut.png";
import {useState} from "react";
import {nurseNavLink} from "./nurseNavLink.js";
import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";

export function ConsultationHistory()
{

    const { state } = useLocation();
    const patient = state?.patient;
    const [isHospitalMenuOpen, setIsHospitalMenuOpen] = useState(false);
    const [isConsultationMenuOpen, setIsConsultationMenuOpen] = useState(false);
    const [isPrescriptionMenuOpen, setIsPrescriptionMenuOpen] = useState(true);
    const [isExamMenuOpen, setIsExamMenuOpen] = useState(false);

    const HospitalisationHistory =
        [
            {
                startDate: "Jan, 12 2023",
                startTime: "10:00 a.m",
                bed: "Bed 2 By RAS",
                endDate: "Jan, 15 2023",
                endTime: "10:00 a.m",
            },
            {
                startDate: "Jan, 12 2023",
                startTime: "10:00 a.m",
                bed: "Bed 2 By RAS",
                endDate: "Jan, 15 2023",
                endTime: "10:00 a.m",
            }
        ]


    const prescriptionHistory =
        [
            {
                date: "Jan, 12 2023",
                time: "10:45 a.m",
                dose: "RAS",
                doctor: "Mr BATCHAKUI, Doctor",
                medicine: "Paracetamol"
            },
            {
                date: "Jan, 12 2023",
                time: "10:45 a.m",
                dose: "2 times per day during 2 weeks",
                doctor: "Mr BATCHAKUI, Doctor",
                medicine: "Paracetamol"
            }
        ]

    return (
        <>
            <DashBoard linkList={nurseNavLink} requiredRole={"Nurse"}>
                <NurseNavBar>
                    <div className="mt-5 flex gap-4">
                        <PatientInformationBoard patient={patient}/>

                        {/* Historical content */}
                        <div className="flex-1 flex flex-col mr-2 gap-4 mb-5">
                            <div className="w-full h-[150px] border shadow-xl rounded-lg flex flex-col">
                                <h1 className="font-bold text-secondary text-2xl mt-3 ml-4">Appointments</h1>
                            </div>
                            <div className="flex-1 border shadow-xl rounded-lg flex flex-col">
                                <h1 className="font-bold text-secondary text-2xl mt-3 ml-4 mb-3"> Historical</h1>


                                {/*Search content*/}
                                <div className="ml-4 flex">
                                    <div className="w-2/5 border rounded-lg bg-gray-200 py-2">
                                        <input type="date" className="ml-3 w-5/6 border-none bg-gray-200 ring-0 focus:ring-0 focus:border-0 focus:outline-none"/>
                                    </div>
                                    <div className="ml-4 w-2/5 col-span-3 border rounded-lg bg-gray-200 py-2">
                                        <input type="date" className="ml-3 w-5/6 border-none bg-gray-200 ring-0 focus:ring-0 focus:border-0 focus:outline-none"/>
                                    </div>
                                    <div className="ml-6 flex-1 items-center justify-center">
                                        <button className="px-5 py-2 bg-secondary text-white rounded-lg font-bold">
                                            <FaSearch className="text-2xl text-center"/>
                                        </button>
                                    </div>
                                </div>


                                {/*Consultation content*/}
                                <div className="mt-2">
                                    <div className="justify-between flex">
                                        <h2 className="text-xl text-secondary font-bold mt-8 ml-10 mb-2">Consultation</h2>
                                        <button
                                            onClick={()=>setIsConsultationMenuOpen(!isConsultationMenuOpen)}
                                            className="mr-5 mt-8 hover:bg-gray-300 hover:rounded-full w-8 h-8 flex justify-center items-center duration-300 transition-all cursor-pointer">
                                            {isConsultationMenuOpen ? (<img src={flecheDeroulanteBas} alt={"menu"} className="w-4 h-3"/>): (<img src={flecheDeroulanteHaut} alt={"menu"} className="w-4 h-3"/>)}
                                        </button>
                                    </div>
                                    <div className="flex flex-col border-b-2 border-b-gray-300 ml-5 mr-2">
                                    </div>
                                </div>



                                {/*Hospitalisation content*/}
                                <div className="mt-4">
                                    <div className="justify-between flex">
                                        <h2 className="text-xl text-secondary font-bold mt-8 ml-10 mb-2">Hospitalisation</h2>
                                        <button
                                            onClick={()=>setIsHospitalMenuOpen(!isHospitalMenuOpen)}
                                            className="mr-5 mt-8 hover:bg-gray-300 hover:rounded-full w-8 h-8 flex justify-center items-center duration-300 transition-all cursor-pointer">
                                            {isHospitalMenuOpen ? (<img src={flecheDeroulanteBas} alt={"menu"} className="w-4 h-3"/>): (<img src={flecheDeroulanteHaut} alt={"menu"} className="w-4 h-3"/>)}
                                        </button>
                                    </div>
                                    <div className="flex flex-col border-t-2 border-t-gray-300 ml-5 mr-2">
                                        {isHospitalMenuOpen && (
                                            <>
                                                {HospitalisationHistory.map((item, index) => (
                                                    <div key={index} className="flex mt-2 bg-gray-200 rounded-lg p-2">
                                                        <div className="ml-2 w-1/2 py-1 border-r-2 border-r-gray-400">
                                                            <h3 className="text-xl font-bold">Registered On</h3>
                                                            <div className="mt-2 mb-1 flex justify-between">
                                                                <p className="w-1/4">{item.startDate}</p>
                                                                <p className="w-1/4 mr-10">{item.startTime}</p>
                                                            </div>
                                                            <p className="w-1/4">{item.bed}</p>
                                                        </div>
                                                        <div className="w-1/2 py-1 ml-10">
                                                            <h3 className="text-xl font-bold">Remved On</h3>
                                                            <div className="flex justify-between mt-3">
                                                                <p className="w-1/4">{item.endDate}</p>
                                                                <p className="w-1/4 mr-10">{item.endTime}</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </>
                                        )}
                                    </div>
                                </div>



                                {/*Prescription content*/}
                                <div className="mt-2 mb-2">
                                    <div className="justify-between flex">
                                        <h2 className="text-xl text-secondary font-bold mt-8 ml-10 mb-2">Prescription</h2>
                                        <button
                                            onClick={()=>setIsPrescriptionMenuOpen(!isPrescriptionMenuOpen)}
                                            className="mr-5 mt-8 hover:bg-gray-300 hover:rounded-full w-8 h-8 flex justify-center items-center duration-300 transition-all cursor-pointer">
                                            {isPrescriptionMenuOpen ? (<img src={flecheDeroulanteBas} alt={"menu"} className="w-4 h-3"/>): (<img src={flecheDeroulanteHaut} alt={"menu"} className="w-4 h-3"/>)}
                                        </button>
                                    </div>
                                    <div className="flex flex-col border-t-2 border-t-gray-300 ml-5 mr-2">
                                        {isPrescriptionMenuOpen && (
                                            <>
                                                { prescriptionHistory.map((item, index) => (
                                                    <div key={index} className="flex mt-2 bg-gray-200 rounded-lg p-2">
                                                        <div className="ml-2 w-1/3 py-1 border-r-2 border-r-gray-400">
                                                            <h3 className="text-xl font-bold">Registered On</h3>
                                                            <div className="mb-1 flex justify-between mt-5">
                                                                <p >{item.date}</p>
                                                                <p className="mr-2">{item.time}</p>
                                                            </div>
                                                        </div>

                                                        <div className="ml-5 w-1/3 py-1 border-r-2 border-r-gray-400">
                                                            <h3 className="text-xl font-bold mb-1">Medicine Prescribed</h3>
                                                            <p className="text-md">{item.medicine}</p>
                                                            <div className="flex">
                                                                <p className="font-bold mr-2 ">Usage:</p>
                                                                <p>{item.dose}</p>
                                                            </div>

                                                        </div>

                                                        <div className="w-1/3 py-1 ml-10">
                                                            <h3 className="text-xl font-bold">prescribed by</h3>
                                                            <div className="flex justify-between mt-3">
                                                                <p className="text-secondary font-bold">{item.doctor}</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </>
                                        )}
                                    </div>
                                </div>



                                {/*Exam content*/}
                                <div className="mt-2 mb-5">
                                    <div className="justify-between flex">
                                        <h2 className="text-xl text-secondary font-bold mt-8 ml-10 mb-2">Exams</h2>
                                        <button
                                            onClick={()=>setIsExamMenuOpen(!isExamMenuOpen)}
                                            className="mr-5 mt-8 hover:bg-gray-300 hover:rounded-full w-8 h-8 flex justify-center items-center duration-300 transition-all cursor-pointer">
                                            {isExamMenuOpen ? (<img src={flecheDeroulanteBas} alt={"menu"} className="w-4 h-3"/>): (<img src={flecheDeroulanteHaut} alt={"menu"} className="w-4 h-3"/>)}
                                        </button>
                                    </div>
                                    <div className="flex flex-col border-b-2 border-b-gray-300 ml-5 mr-2">
                                    </div>
                                </div>


                            </div>
                        </div>
                    </div>
                </NurseNavBar>
            </DashBoard>
        </>

    )
}
// END OF FILE: src/Pages/Nurse/ConsultationHistory.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Nurse/MedicalStaffs.jsx

import {NurseNavBar} from "./NurseNavBar.jsx";
import {MedicalStaffList} from "../../GlobalComponents/MedicalStaffList.jsx";
import {nurseNavLink} from "./nurseNavLink.js";
import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";


export function MedicalStaffs()
{
    return (
       <>
           <DashBoard linkList={nurseNavLink} requiredRole={"Nurse"} >
               <NurseNavBar>
                   <MedicalStaffList/>
               </NurseNavBar>
           </DashBoard>
       </>
    )
}// END OF FILE: src/Pages/Nurse/MedicalStaffs.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Nurse/Nurse.jsx

import {NurseNavBar} from "./NurseNavBar.jsx";
import userIcon from "../../assets/userIcon.png"
import {FaArrowLeft, FaArrowRight,FaSearch} from "react-icons/fa";
import {PatientList} from "./PatientList.jsx";
import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";
import {nurseNavLink} from "./nurseNavLink.js";
import {useAuthentication} from "../../Utils/Provider.jsx";
import {Tooltip} from "antd";
import {useEffect, useState} from "react";
import axiosInstance from "../../Utils/axiosInstance.js";
import {ViewPatientDetailsModal} from "../Receptionist/ViewPatientDetailsModal.jsx";
import Loader from "../../GlobalComponents/Loader.jsx";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";
import noPatientImage from "../../assets/noPatients.png";




export function Nurse()
{

    const {userData} = useAuthentication();


    const [patientList, setPatientList] = useState([]);
    const [numberOfPatients, setNumberOfPatients] = useState(0);
    const [nexUrlForRenderPatientList, setNexUrlForRenderPatientList] = useState("");
    const [previousUrlForRenderPatientList,setPreviousUrlForRenderPatientList] = useState("");
    const [actualPageNumber, setActualPageNumber] = useState(1);


    const [canOpenViewPatientDetailsModal, setCanOpenViewPatientDetailsModal] = useState(false);
    const [selectedPatient, setSelectedPatient] = useState({});
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");
    const [isLoading, setIsLoading] = useState(false);



    async function fetchPatientList()
    {
        setIsLoading(true);
        try
        {
            const response = await axiosInstance.get("/patient/");
            setIsLoading(false);
            if (response.status === 200)
            {
                console.log(response.data);
                setPatientList(response.data.results);
                setNumberOfPatients(response.data.count);
                setNexUrlForRenderPatientList(response.data.next);
                setPreviousUrlForRenderPatientList(response.data.previous);
                setErrorStatus(null);
                setErrorMessage("");
            }
        }
        catch (error)
        {
            setIsLoading(false);
            console.log(error);
            setErrorMessage("Something went wrong when retrieving the patient list, please try again later !");
            setErrorStatus(error.status)
        }
    }


    async function fetchNextOrPreviousPatientList (url) {
        if(url)
        {
            setIsLoading(true);
            try {
                const response = await axiosInstance.get(url);
                setIsLoading(false);
                if (response.status === 200)
                {
                    //console.log(response)
                    setPatientList(response.data.results);
                    setNumberOfPatients(response.data.count);
                    setNexUrlForRenderPatientList(response.data.next);
                    setPreviousUrlForRenderPatientList(response.data.previous);
                    setErrorMessage("");
                    setErrorStatus(null);
                }
            } catch (error) {
                setIsLoading(false);
                console.log(error);
                setErrorMessage("Something went wrong when retrieving the patient list, please try again later !");
                setErrorStatus(error.status);
            }
        }
    }

    function computeNumberOfSlideToRender() {
        return numberOfPatients % 5 === 0 ? numberOfPatients / 5 : Math.floor(numberOfPatients / 5) + 1;
    }


    function updateActualPageNumber(action) {
        if (action === "next")
        {
            if(actualPageNumber < computeNumberOfSlideToRender())
            {
                setActualPageNumber(actualPageNumber + 1);
            }
        }
        else
        {
            if(actualPageNumber > 1)
            {
                setActualPageNumber(actualPageNumber - 1);
            }
        }
    }


    useEffect(() => {
        fetchPatientList();
    }, []);





    return (
        <>
            <DashBoard requiredRole={"Nurse"} linkList={nurseNavLink}>
                <NurseNavBar>
                    <div className="flex flex-col">

                        {/*Header with welcome text content */}
                        <div className="ml-5 mr-5 h-[150px] bg-gradient-to-t from-primary-start to-primary-end flex rounded-lg justify-between">
                            <div className="flex gap-4">
                                <div className="mt-5 mb-5 ml-5 w-28 h-28 border-4 border-white rounded-full">
                                    <img src={userIcon} alt="user icon" className="h-[105px] w-[105px] mb-2"/>
                                </div>
                                <div className="flex flex-col">
                                    <p className="text-white text-4xl font-bold mt-6">Welcome Back!</p>
                                    <p className="text-2xl mt-2 text-white"> {userData.username}</p>
                                </div>
                            </div>
                            <div>
                                <p className="text-white mt-28 text-xl font-bold mr-4">12:30:25 AM</p>
                            </div>
                        </div>

                        {/*Search bar content */}
                        <div className="flex justify-between mt-3">
                            <div className="flex flex-col ml-5">
                                <p className="font-bold text-4xl mt-1">Reception</p>
                                <p className="font-medium text-xl mt-0.5">List of patients</p>
                            </div>
                            <div className="flex mr-5">
                                <div className="flex w-[300px] h-10 border-2 border-secondary rounded-lg">
                                    <FaSearch className="text-xl text-secondary m-2"/>
                                    <input
                                        type="text"
                                        className="border-none focus:outline-none focus:ring-0"
                                    />
                                </div>
                                <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
                                    Search
                                </button>
                            </div>
                        </div>

                        {/*List of patients content */}
                        {isLoading ? (
                            <div className="h-[500px] w-full flex justify-center items-center">
                                <Loader size={"medium"} color={"primary-end"}/>
                            </div>
                        )
                        : ( errorStatus ? <ServerErrorPage errorStatus={errorStatus} message={errorMessage}/> :
                            (patientList.length >0 ? (
                                    <>
                                        <div className="ml-5 mr-5 mt-2 border-2  rounded-lg shadow-lg  p-2">
                                            <PatientList patients={patientList}
                                                         setCanOpenViewPatientDetailModal={setCanOpenViewPatientDetailsModal}
                                                         setSelectedPatient={setSelectedPatient}/>
                                        </div>

                                        {/* Pagination content */}
                                        <div className="justify-center  flex mt-6 mb-4">
                                            <div className="flex gap-4">
                                                <Tooltip placement={"left"} title={"previous slide"}>
                                                    <button
                                                        onClick={async () => {
                                                            await fetchNextOrPreviousPatientList(previousUrlForRenderPatientList), updateActualPageNumber("prev")
                                                        }}
                                                        className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                        <FaArrowLeft/>
                                                    </button>
                                                </Tooltip>
                                                <p className="text-secondary text-xl font-bold mt-6">{`Page ${actualPageNumber} of ${computeNumberOfSlideToRender()}`}</p>
                                                <Tooltip placement={"right"} title={"next slide"}>
                                                    <button
                                                        onClick={async () => {
                                                            await fetchNextOrPreviousPatientList(nexUrlForRenderPatientList), updateActualPageNumber("next")
                                                        }}
                                                        className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                        <FaArrowRight/>
                                                    </button>
                                                </Tooltip>
                                            </div>
                                        </div>
                                    </>
                                ): (
                                    <div
                                        className="flex flex-col items-center justify-center py-12 px-4 text-center mt-7">
                                        <img src={noPatientImage} alt={"image"} className="w-36 h-36 rounded-lg"/>
                                        <h3 className="font-bold text-2xl mt-4 mb-2 text-gray-800">No patients recorded</h3>
                                        <p className="text-gray-600 mb-6 max-w-xl text-md font-medium">
                                            There are currently no patients registered in the system.
                                        </p>
                                    </div>
                                )
                            )
                            )}
                    </div>
                </NurseNavBar>


                {/*Modal Content*/}
                <ViewPatientDetailsModal
                    isOpen={canOpenViewPatientDetailsModal} patient={selectedPatient}
                    onClose={() => {
                        setCanOpenViewPatientDetailsModal(false)
                    }}
                />
            </DashBoard>
        </>
    )
}// END OF FILE: src/Pages/Nurse/Nurse.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Nurse/NurseNavBar.jsx

import { FaFlag, FaBell, FaEnvelope, FaUser, FaCog, FaSignOutAlt } from 'react-icons/fa';
import {useAuthentication} from "../../Utils/Provider.jsx";
import {Tooltip} from "antd";
import PropTypes from "prop-types";
import userIcon from "../../assets/userIcon.png";


export function NurseNavBar({children})
{


    NurseNavBar.propTypes = {
        children: PropTypes.node.isRequired,
    };



    const {logout} = useAuthentication();
    const applyNavLinkBtnStyle = () => {
        return " w-12 h-10 border-2 bg-gray-100 flex justify-center items-center rounded-xl shadow-xl hover:bg-secondary text-secondary text-xl hover:text-white transition-all duration-300";
    }


    const {userData} = useAuthentication();




    return (
        <div>
            <div className="border-b-2 m-3   border-b-gray-300">
                <div className="h-[70px] w-full  flex justify-between ">
                    <div className="text-5xl font-bold mt-3 ml-5">
                        <span>Nurse</span>
                    </div>
                    <div className="flex gap-2 mt-5 mb-4 mr-5">
                        {/*
                        <button className={applyNavLinkBtnStyle()}>
                            <FaFlag/>
                        </button>
                        <button className={applyNavLinkBtnStyle()}>
                            <FaCog/>
                        </button>
                        <Tooltip placement={"top"} title={"Notification"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaBell/>
                            </button>
                        </Tooltip>
                        <button className={applyNavLinkBtnStyle()}>
                            <FaEnvelope/>
                        </button>
                        <Tooltip placement={"top"} title={"Profile"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaUser/>
                            </button>
                        </Tooltip>*/}
                        <Tooltip placement={"top"} title={"LogOut"}>
                            <button
                                onClick={() => {
                                    logout()
                                }}
                                className={" w-12 h-10 border-2 bg-red-500 flex justify-center items-center rounded-xl shadow-xl hover:bg-white text-white text-xl hover:text-red-500 transition-all duration-300"}>
                                <FaSignOutAlt/>
                            </button>
                        </Tooltip>

                        <Tooltip placement={"top"} title={"Profile"}>
                            <div className="ml-3 flex">
                                <p className="font-bold text-secondary text-xl mt-2">{"Hello " +userData?.username + "!"}</p>
                                <img src={userIcon} alt={"user-icon"} className="w-12 h-12 ml-2 mr-3"/>

                            </div>
                        </Tooltip>
                    </div>
                </div>

            </div>
            <div className="flex-1  min-h-screen mt-5">
                {children}
            </div>
        </div>
    )
}// END OF FILE: src/Pages/Nurse/NurseNavBar.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Nurse/nurseNavLink.js

import {FaHome, FaQuestionCircle, FaUserMd} from "react-icons/fa";
import {AppRoutesPaths as appRoutes} from "../../Router/appRouterPaths.js";
import {Calendar} from "lucide-react";


export const nurseNavLink =
[
    {
        name: 'Patients',
        icon: FaHome,
        link: appRoutes.nursePage,
    },
    {
        name: 'Medical Staffs',
        icon: FaUserMd,
        link: appRoutes.nurseMedicalStaffsPage,
    },
   /* {
        name: 'Appointments',
        icon: Calendar,
        link: appRoutes.appointmentsPage,
    },
    /*
    {
        name: 'Consultation History',
        icon: FaUserNurse,
        link: appRoutes.consultationHistoryPage,
    },
    */
    {
        name: 'Help Center',
        icon: FaQuestionCircle,
        link: appRoutes.helpCenterPage,
    }
]// END OF FILE: src/Pages/Nurse/nurseNavLink.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Nurse/PatientInformationBoard.jsx

import userIcon from "../../assets/userIcon.png";
import PropTypes from "prop-types";

export default function PatientInformationBoard({patient}) {

    PatientInformationBoard.propTypes = {
        patient: PropTypes.object.isRequired,
    };
    return (
        <div className="w-2/6 flex flex-col ml-5 border-2 shadow-xl mb-5 rounded-lg">
            <div className="w-full flex justify-center items-center flex-col mb-10">
                <div className="mt-5 mb-5 ml-5 w-36 h-36 border-4 border-gray-300 rounded-full">
                    <img src={userIcon} alt="user icon" className="h-[136px] w-[136px] mb-2"/>
                </div>
                <p className="font-bold text-3xl mt-2 mb-1">{patient.firstName}</p>
                <p className="font-bold text-3xl mt-1 mb-4">{patient.lastName}</p>
            </div>

            <div className="flex border-t-2 border-t-gray-200 p-6 mr-2 ml-2">
                <p className="mr-10 w-1/4">Gender</p>
                <p className="w-3/4 text-center">{patient?.gender}</p>
            </div>

            <div className="flex border-t-2 border-t-gray-200   p-6 ml-2 mr-2">
                <p className="mr-10 w-1/4">CNI</p>
                <p className="w-3/4 text-center">{patient.cniNumber}</p>
            </div>

            <div className="flex border-t-2 border-t-gray-200   p-6 ml-2 mr-2">
                <p className="mr-10 w-1/4">Address</p>
                <p className="w-3/4 text-center">{patient?.address}</p>
            </div>
            <div className="flex border-t-2 border-t-gray-200   p-6 ml-2 mr-2">
                <p className="mr-10 w-1/4">Email</p>
                <p className="w-3/4 text-center">{patient?.email}</p>
            </div>

            <div className="flex border-t-2 border-t-gray-200   p-6 ml-2 mr-2">
                <p className="mr-10 w-1/4">Birth Date</p>
                <p className="w-3/4 text-center">{patient?.birthDate}</p>
            </div>

            <div className="flex border-t-2 border-t-gray-200   p-6 ml-2 mr-2">
                <p className="mr-10 w-1/4">Contact</p>
                <p className="w-3/4 text-center">{patient?.phoneNumber}</p>
            </div>

            <div className="flex border-t-2 border-t-gray-200   p-6 ml-2 mr-2">
                <p className="mr-10 w-1/4">Emergency contact</p>
                <p className="w-3/4 text-center">{patient?.phoneNumber}</p>
            </div>

            <div
                className="flex border-t-2 border-t-gray-200 border-b-2 border-b-gray-200 p-6 ml-2 mr-2">
                <p className="mr-10 w-1/4">Added At</p>
                <p className="w-3/4 text-center">{patient.addDate}</p>
            </div>
        </div>
    )
}// END OF FILE: src/Pages/Nurse/PatientInformationBoard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Nurse/PatientList.jsx

import {  Stethoscope, History, Eye } from 'lucide-react';
import PropTypes from "prop-types";
import {useNavigate} from "react-router-dom";
import {Tooltip} from "antd";





export function PatientList ({patients, setCanOpenViewPatientDetailModal, setSelectedPatient}){

    PatientList.propTypes = {
        patients: PropTypes.array.isRequired,
        setCanOpenViewPatientDetailModal: PropTypes.func.isRequired,
        setSelectedPatient: PropTypes.func.isRequired
    }

    const navigate = useNavigate();




    return (
        <table className="w-full border-separate border-spacing-y-2">
            <thead>
            <tr>
                <th className="text-center p-4 text-xl font-bold border-r-2 border-gray-200">No</th>
                <th className="text-center p-4 text-xl font-bold border-r-2 border-gray-200">Firstname
                </th>
                <th className="text-center p-4 text-xl font-bold border-r-2 border-gray-200 ">Lastname
                </th>
                <th className="text-center p-4 text-xl font-bold border-r-2 border-gray-200 ">Gender</th>
                 <th className="text-center p-4 text-xl font-bold border-r-2 border-gray-200 ">Birth Date</th>
                <th className="text-center p-4 text-xl font-bold  flex-col">
                    <p>Operations</p>
                </th>
            </tr>
            </thead>
            <tbody>
            {patients.map((patient, index) => (
                <tr key={patient.id || index} className="bg-gray-100">
                    <td className="p-4 text-md text-blue-900 rounded-l-lg text-center">{index + 1}</td>
                    <td className="p-4 text-md text-blue-900 font-bold text-center">{patient.firstName}</td>
                    <td className="p-4 text-md text-center font-semibold">{patient.lastName}</td>
                    <td className="p-4 text-md text-center">{patient.gender}</td>
                    <td className="p-4 text-md text-center">{patient.birthDate}</td>
                    <td className="p-4 relative rounded-r-lg">
                        <div className="flex items-center justify-center gap-3">


                            <Tooltip placement={"left"} title={"view patient information"}>
                                <button
                                    className="p-2 hover:bg-gray-300 rounded-full transition-all duration-300"
                                    onClick={() => {setSelectedPatient(patient), setCanOpenViewPatientDetailModal(true)}}
                                >
                                    <Eye className="h-6 w-6 text-primary-end"/>
                                </button>
                            </Tooltip>


                            <Tooltip placement={"top"} title={"Take medical parameters"}>
                                <button className="p-2 hover:bg-gray-300 rounded-full transition-all duration-300"
                                    onClick={() => navigate(`/nurse/patients/take-parameters/${patient.id}`, {state: {patient: patient}})}
                                >
                                    <Stethoscope className="h-6 w-6 text-primary-end"/>
                                </button>
                            </Tooltip>


                            <Tooltip placement={"right"} title={"View history"}>
                                <button className="p-2 hover:bg-gray-300 rounded-full transition-all duration-300"
                                        onClick={() => console.log('View history for:', patient.id)}
                                >
                                    <History className="h-6 w-6 text-primary-end"/>
                                </button>
                            </Tooltip>
                        </div>
                    </td>
                </tr>
                ))}
            </tbody>
        </table>

)
}// END OF FILE: src/Pages/Nurse/PatientList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Nurse/PatientParameters.jsx

import { useState, useEffect } from 'react'
import { User, Phone, MapPin, Calendar, Weight, Ruler, Thermometer, Heart, Activity, FileText, AlertCircle, Scissors, Save, UserPlus, Pill, Users } from 'lucide-react'
import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";
import {nurseNavLink} from "./nurseNavLink.js";
import {NurseNavBar} from "./NurseNavBar.jsx";
import {useLocation, useNavigate} from "react-router-dom";
import {ConfirmSaveParameters} from "./ConfirmSaveParameters.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import {useAuthentication} from "../../Utils/Provider.jsx";
import {ErrorModal} from "../Modals/ErrorModal.jsx";
import {SuccessModal} from "../Modals/SuccessModal.jsx";
import Wait from "../Modals/wait.jsx";
import {FaArrowLeft} from "react-icons/fa";
import {PrescribeDoctor} from "./PrescribeDoctor.jsx";






export  function PatientParameters() {

    const {state} = useLocation();
    const patientInfo = state?.patient;
    const {userData} = useAuthentication();
    const [parameters, setParameters] = useState({
        weight: '',
        height: '',
        temperature: '',
        bloodPressure: '',
        heartRate: '',
        chronicalDiseases: '',
        surgeries: '',
        allergies: '',
        currentMedication: '',
        familyMedicalHistory: '',
        idMedicalStaff: userData?.id,
    });
    const [errors, setErrors] = useState({});
    const [canOpenConfirmSaveParameters, setCanOpenConfirmSaveParameters] = useState(false);
    const [bmi, setBmi] = useState('-');
    const [isLoading, setIsLoading] = useState(false);
    const [canOpenSuccessModal, setCanOpenSuccessModal] = useState(false);
    const [canOpenErrorMessageModal, setCanOpenErrorMessageModal] = useState(false);
    const [successMessage, setSuccessMessage] = useState("");
    const [errorMessage, setErrorMessage] = useState("");
    const [canActivatePrescribeDoctorBtn, setCanActivatePrescribeDoctorBtn] = useState(false);
    const [canPrescribeDoctor, setCanPrescribeDoctor] = useState(false);





    useEffect(() => {
        if(parameters.weight && parameters.height) calculateBMI();
    }, [parameters.weight, parameters.height, userData, patientInfo.firstName])



    function calculateAge (birthDate) {
        const today = new Date()
        const birth = new Date(birthDate)
        let age = today.getFullYear() - birth.getFullYear()
        const monthDiff = today.getMonth() - birth.getMonth()
        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
            age--
        }
        return age
    }


    function handleChange (e)
    {
        const { name, value } = e.target
        setParameters(prev => ({ ...prev, [name]: value }))
        validateField(name, value)
    }


    function validateField (name, value) {
        let error = ''
        switch (name) {
            case 'weight':
                if (isNaN(Number(value)) || Number(value) <= 2.0 || Number(value) > 200.0) error = 'Invalid weight, weight must be between 2 and 200'
                break
            case 'height':
                if (isNaN(Number(value)) || Number(value) <= 0.50 || Number(value) > 2.50) error = 'Invalid height, height must be between 0.5 and 2.5'
                break
            case 'temperature':
                if (isNaN(Number(value)) || Number(value) < 35 || Number(value) > 42) error = 'Invalid temperature, temperature must be between 35 and 42'
                break
            case 'bloodPressure':
                if (!/^\d{2,3}\/\d{2,3}$/.test(value)) error = 'Invalid blood pressure format. Eg: 120/80'
                break
            case 'heartRate':
                if (isNaN(Number(value)) || Number(value) < 40 || Number(value) > 220) error = 'Invalid heart rate, heart rate must be between 40 and 220'
                break
        }
        setErrors(prev => ({ ...prev, [name]: error }))
    }



     function handleSubmit (e) {
         e.preventDefault()
         const formErrors = {}
         Object.entries(parameters).forEach(([key, value]) => {
             validateField(key, value)
             if (errors[key]) formErrors[key] = errors[key]
         })
         if (Object.keys(formErrors).length === 0)
         {
             setCanOpenConfirmSaveParameters(true)
         } else
         {
             setErrors(formErrors)
         }

    }



    function saveIdMedicalFolderPage (id) {
        localStorage.setItem('current_medical_folder_page', id);
    }



    async function saveParameters ()
    {
        setIsLoading(true);
        console.log(parameters);
        try {
            const response = await axiosInstance.post(`/medical-folder/${patientInfo.idMedicalFolder}/new-params/`, parameters);
            if (response.status === 201)
            {
                saveIdMedicalFolderPage(response.data.idMedicalFolderPage);
                setIsLoading(false);
                setCanActivatePrescribeDoctorBtn(true);
                setCanOpenConfirmSaveParameters(false);
                setSuccessMessage(`${patientInfo.firstName + patientInfo.lastName}'s medical parameters saved successfully!`);
                setErrorMessage("");
                setCanOpenSuccessModal(true);
                setCanOpenErrorMessageModal(false);
            }
        }
        catch (error)
        {
            setIsLoading(false);
            setSuccessMessage("");
            setErrorMessage(`Something went wrong when saving ${patientInfo.firstName +" " +patientInfo.lastName}'s medical parameters, please try again later!`);
            setCanOpenSuccessModal(false);
            setCanOpenErrorMessageModal(true);
            console.log(error);
        }
    }




    function calculateBMI ()  {
        const weight = parseFloat(parameters.weight)
        const height = parseFloat(parameters.height)
        if (!isNaN(weight) && !isNaN(height) && height > 0) {
            const bmiValue = (weight / (height * height)).toFixed(2)
            setBmi(bmiValue)
        } else {
            setBmi('-')
        }
    }


    function applyInputStyle()
    {
        return "w-full pl-10 pr-12 py-2 border-2 rounded-md focus:outline-none focus:border-2 focus:border-primary-end transition-all duration-300";
    }

    const navigate = useNavigate();


    return (

        <DashBoard linkList={nurseNavLink} requiredRole={"Nurse"}>
            <NurseNavBar>
                <div className="min-h-screen  p-6">

                    <button className="flex text-xl font-bold text-primary-start items-start hover:text-primary-end transition-all duration-300 gap-2 mb-3" onClick={()=>{navigate(-1)}}> <FaArrowLeft className="mt-1"/> <p>Go Back To Patient List</p></button>
                        <div className="bg-gradient-to-br from-primary-end to-primary-start rounded-lg shadow-lg p-6 mb-6">
                            <div className="flex items-center gap-6">
                                <div className="w-24 h-24 bg-white rounded-full flex items-center justify-center">
                                    <User className="w-12 h-12 text-black"/>
                                </div>
                                <div className="flex-1">
                                    <h1 className="text-3xl font-bold text-white">{patientInfo.firstName} {patientInfo.lastName}</h1>
                                    <div className="mt-3.5 grid grid-cols-3 gap-4 font-semibold">
                                        <div className="flex items-center gap-2 text-white">
                                            <Calendar className="w-6 h-6"/>
                                            <span>{patientInfo.birthDate} ({calculateAge(patientInfo.birthDate)} years old)</span>
                                        </div>
                                        <div className="flex items-center gap-2 text-white">
                                            <MapPin className="w-6 h-6"/>
                                            <span>{patientInfo.address}</span>
                                        </div>
                                        <div className="flex items-center gap-2 text-white">
                                            <Phone className="w-6 h-6"/>
                                            <span>{patientInfo.phoneNumber}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
                            <div className="bg-gradient-to-r from-primary-end to-primary-start p-4">
                                <h2 className="ml-5 text-2xl font-bold text-white flex items-center gap-2">
                                    <FileText className="w-7 h-7"/>
                                    Medical Parameters
                                </h2>
                            </div>
                            <form onSubmit={handleSubmit} className="mt-4 p-6 space-y-14">
                                <div className="grid grid-cols-2 gap-12 mb-5">

                                    {/* Biometric parameters */}
                                    <div className="space-y-4">
                                        <h3 className="text-xl font-bold">Biometric Parameters</h3>
                                        <div className="grid grid-cols-2 gap-4">
                                            <div>
                                                <label className="text-md font-medium mb-2">Weight</label>
                                                <div className="relative">
                                                    <input
                                                        type="number"
                                                        name="weight"
                                                        value={parameters.weight}
                                                        onChange={handleChange}
                                                        required
                                                        className={`${applyInputStyle()} ${errors.weight ? 'border-red-500' : 'border-gray-400'}`}
                                                        placeholder="Weight"
                                                    />
                                                    <Weight className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                                    <span className="absolute right-3 top-2 text-gray-500">Kg</span>
                                                </div>
                                                {errors.weight && <p className="mt-1 text-sm font-bold text-red-500">{errors.weight}</p>}
                                            </div>
                                            <div>
                                                <label  className="text-md font-medium mb-2">Height</label>
                                                <div className="relative">
                                                    <input
                                                        type="number"
                                                        step="0.01"
                                                        name="height"
                                                        value={parameters.height}
                                                        onChange={handleChange}
                                                        className={`${applyInputStyle()} ${errors.height ? 'border-red-500' : 'border-gray-400'}`}
                                                        placeholder="Height"
                                                        required
                                                    />
                                                    <Ruler className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                                    <span className="absolute right-3 top-2 text-gray-500">m</span>
                                                </div>
                                                {errors.height && <p className="mt-1 text-sm font-bold text-red-500">{errors.height}</p>}
                                            </div>
                                        </div>
                                        <div>
                                            <label
                                                className="text-md font-medium mb-2">Temperature</label>
                                            <div className="relative">
                                                <input
                                                    type="number"
                                                    step="0.1"
                                                    name="temperature"
                                                    required
                                                    value={parameters.temperature}
                                                    onChange={handleChange}
                                                    className={`${applyInputStyle()} ${errors.temperature ? 'border-red-500' : 'border-gray-400'}`}
                                                    placeholder="Temperature"
                                                />
                                                <Thermometer className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                                <span className="absolute right-3 top-2 text-gray-500">°C</span>
                                            </div>
                                            {errors.temperature && <p className="mt-1 text-sm font-bold text-red-500">{errors.temperature}</p>}
                                        </div>
                                        <div>
                                            <label className="text-md font-medium mb-2">BMI (Body Mass Index)</label>
                                            <div className="relative">
                                                <input
                                                    type="text"
                                                    value={bmi}
                                                    readOnly
                                                    className={`${applyInputStyle()} bg-gray-100  border-gray-400`}
                                                />
                                                <Activity className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                                <span className="absolute right-3 top-2 text-gray-500">kg/m²</span>
                                            </div>
                                        </div>
                                    </div>

                                    {/* Cardiovascular parameters */}
                                    <div className="space-y-4">
                                        <h3 className="text-xl font-bold">Cardiovascular
                                            Parameters</h3>
                                        <div>
                                            <label className="text-md font-medium mb-2">Blood Pressure</label>
                                            <div className="relative">
                                                <input
                                                    type="text"
                                                    name="bloodPressure"
                                                    required
                                                    value={parameters.bloodPressure}
                                                    onChange={handleChange}
                                                    className={`${applyInputStyle()} ${errors.bloodPressure ? 'border-red-500' : 'border-gray-400'}`}
                                                    placeholder="e.g. 120/80"
                                                />
                                                <Heart className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                                <span className="absolute right-3 top-2 text-gray-500">mmHg</span>
                                            </div>
                                            {errors.bloodPressure && <p className="mt-1 text-sm font-bold text-red-500">{errors.bloodPressure}</p>}
                                        </div>
                                        <div>
                                            <label className="text-md font-medium mb-2">Heart Rate</label>
                                                <div className="relative">
                                                <input
                                                    type="number"
                                                    name="heartRate"
                                                    value={parameters.heartRate}
                                                    onChange={handleChange}
                                                    className={`${applyInputStyle()} ${errors.heartRate ? 'border-red-500' : 'border-gray-400'}`}
                                                    placeholder="Heart Rate"
                                                />
                                                <Activity className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                                <span className="absolute right-3 top-2 text-gray-500">bpm</span>
                                            </div>
                                            {errors.heartRate && <p className="mt-1 text-sm font-bold text-red-500">{errors.heartRate}</p>}
                                        </div>
                                    </div>
                                </div>

                                {/* Medical history */}
                                <div className="space-y-4">
                                    <h3 className="text-xl font-bold">Medical History</h3>
                                    <div className="grid md:grid-cols-2 gap-4">
                                        <div>
                                            <label className="text-md font-medium mb-2">Chronic
                                                Diseases</label>
                                            <div className="relative">
                                                <textarea
                                                    name="chronicDiseases"
                                                    value={parameters.chronicalDiseases}
                                                    onChange={handleChange}
                                                    rows={2}
                                                    className={`${applyInputStyle()} border-gray-400`}
                                                    placeholder="List chronic diseases"
                                                />
                                                <FileText className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                            </div>
                                        </div>
                                        <div>
                                            <label className="text-md font-medium mb-2">Allergies</label>
                                            <div className="relative">
                                                <textarea
                                                    name="allergies"
                                                    value={parameters.allergies}
                                                    onChange={handleChange}
                                                    rows={2}
                                                    className={`${applyInputStyle()} border-gray-400`}
                                                    placeholder="List allergies"
                                                />
                                                <AlertCircle className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                            </div>
                                        </div>
                                        <div>
                                            <label className="text-md font-medium mb-2">Surgeries</label>
                                            <div className="relative">
                                                <textarea
                                                    name="surgeries"
                                                    value={parameters.surgeries}
                                                    onChange={handleChange}
                                                    rows={2}
                                                    className={`${applyInputStyle()} border-gray-400`}
                                                    placeholder="List surgeries"
                                                />
                                                <Scissors className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                            </div>
                                        </div>
                                        <div>
                                            <label className="text-md font-medium mb-2">Current Medications</label>
                                            <div className="relative">
                                                <textarea
                                                    name="currentMedication"
                                                    value={parameters.currentMedication}
                                                    onChange={handleChange}
                                                    rows={2}
                                                    className={`${applyInputStyle()} border-gray-400`}
                                                    placeholder="List current medications"
                                                />
                                                <Pill className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* Family history */}
                                <div className="space-y-4">
                                    <h3 className="text-xl font-bold">Family History</h3>
                                    <div>
                                        <label className="text-md font-medium mb-2">Family Medical
                                            History</label>
                                        <div className="relative">
                                              <textarea
                                                  name="familyMedicalHistory"
                                                  value={parameters.familyMedicalHistory}
                                                  onChange={handleChange}
                                                  rows={2}
                                                  className={`${applyInputStyle()} border-gray-400`}
                                                  placeholder="Describe family medical history"
                                              />
                                            <Users className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"/>
                                        </div>
                                    </div>
                                </div>

                                <div className="flex gap-4 justify-center">
                                    <button type="submit"
                                            className="px-6 py-4 bg-gradient-to-r from-primary-end to-primary-start font-bold hover:text-xl text-md text-white rounded-md hover:opacity-70 transition-all duration-300 flex items-center justify-center gap-2"
                                    >
                                        <Save className="w-5 h-5"/>
                                        Preview
                                    </button>
                                    <button
                                        type="button"
                                        disabled={!canActivatePrescribeDoctorBtn}
                                        onClick={()=>{setCanPrescribeDoctor(true)}}
                                        className={` py-4 px-6 rounded-md flex items-center justify-center gap-2 ${canActivatePrescribeDoctorBtn ? 'bg-green-500 text-white hover:bg-green-600' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
                                    >
                                        <UserPlus className="w-5 h-5"/>
                                        Prescribe a Doctor
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
            </NurseNavBar>
            <ConfirmSaveParameters isOpen={canOpenConfirmSaveParameters} onClose={() => setCanOpenConfirmSaveParameters(false)} parameters={parameters} bmi={bmi} action={ async() => {await saveParameters()}} patientInfos={patientInfo}/>
            <ErrorModal isOpen={canOpenErrorMessageModal} onCloseErrorModal={() => setCanOpenErrorMessageModal(false)} message={errorMessage}/>
            <SuccessModal isOpen={canOpenSuccessModal} canOpenSuccessModal={() => setCanOpenSuccessModal(false)} message={successMessage}/>
            <PrescribeDoctor isOpen={canPrescribeDoctor} onClose={()=>setCanPrescribeDoctor(false)} patientInfos={patientInfo} setCanOpenSuccessModal={setCanOpenSuccessModal} setSuccessMessage={setSuccessMessage}/>
            {isLoading && <Wait/>}

        </DashBoard>

    )
}

// END OF FILE: src/Pages/Nurse/PatientParameters.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Nurse/PrescribeDoctor.jsx

import PropTypes from "prop-types";
import {useEffect, useState} from "react";
import {Calendar, Clock, User, FileText, X} from 'lucide-react';
import axiosInstance from "../../Utils/axiosInstance.js";
import Wait from "../Modals/wait.jsx";
import {useAuthentication} from "../../Utils/Provider.jsx";

export function PrescribeDoctor({isOpen, onClose, patientInfos, setCanOpenSuccessModal, setSuccessMessage}) {


    PrescribeDoctor.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        patientInfos: PropTypes.object.isRequired,
        setCanOpenSuccessModal: PropTypes.func,
        setSuccessMessage:PropTypes.func,
    }


    const [doctors, setDoctors] = useState([]);
    const idMedicalFolderPage = localStorage.getItem('current_medical_folder_page');
    const [error, setError] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const {userData} = useAuthentication();
    const [consultationData, setConsultationData] = useState({
        consultationReason: '',
        consultationNotes: '',
        paymentStatus:'Invalid',
        state:'Pending',
        idMedicalFolderPage:'',
        idPatient: patientInfos.id,
        idMedicalStaffGiver:'',
        idMedicalStaffSender:'',
    });



    useEffect(() => {
        async function fetchDoctors () {
            try {
                const response = await axiosInstance("/medical-staff/all-doctors/");
                if (response.status === 200)
                {
                    console.log(response.data);
                    setDoctors(response.data);
                }
            } catch (error) {
                console.error("Error when retrieving doctor list", error)
            }
        }
        fetchDoctors()
    }, [])



    function handleDateChange(e) {
        setConsultationData(prevState => ({
            ...prevState,
            [e.name]: e.value
        }))
    }


    async function handleSubmit (e){

        e.preventDefault();
        setIsLoading(true);
        if(idMedicalFolderPage !== null && userData.id)
        {
            consultationData.idMedicalFolderPage = idMedicalFolderPage;
            consultationData.idMedicalStaffSender  = userData.id;
        }
        try
        {
            console.log(consultationData);
            const response = await axiosInstance.post("/consultation/", consultationData);
            setIsLoading(false);
            if (response.status === 201)
            {
                setError("");
                localStorage.removeItem('current_medical_folder_page');
                setSuccessMessage("Consultation created successfully !");
                setCanOpenSuccessModal(true);
                onClose();
            }
        }
        catch (error)
        {
            setIsLoading(false);
            console.log(error);
            setError("Something when wrong when prescribing a doctor");
        }
       console.log(consultationData);
    }


    if (!isOpen) return;

    if (isLoading) return <Wait/>

    return (

        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
            <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto p-6">
                <div className="flex justify-between">
                    <h1 className="text-3xl font-bold text-gray-800 mb-6">Prescribe a Doctor</h1>

                    <button onClick={onClose} className="w-8 h-8 bg-red-100 text-red-500  rounded-full flex items-center justify-center">
                        <X className="w-6 h-6 hover:h-7 hover:w-7 transition-all duration-500"/>
                    </button>
                </div>


                {error && <div className = "text-red-500 font-bold text-xl mb-4">{error}</div>}

                <form onSubmit={handleSubmit} className="space-y-6">
                        <div>
                            <label htmlFor="doctor" className="block text-md font-medium text-gray-700 mb-2">
                                Select one doctor
                            </label>
                            <div className="relative">
                                <select
                                    id="doctor"
                                    name = "idMedicalStaffGiver"
                                    value={consultationData.idMedicalStaffGiver}
                                    onChange={(e) => handleDateChange(e.target)}
                                    className="block w-full pl-10 pr-4 py-2 text-base border-gray-300 border-2 focus:border-2 focus:border-primary-end transition-all duration-500 focus:outline-none  rounded-md"

                                >
                                    <option value="">Select a doctor</option>
                                    {doctors.map((doctor) => (
                                        <option key={doctor.id} value={doctor.id}>
                                            Dr. {doctor.first_name} {doctor.last_name}  ({doctor.role === 'Doctor' ? 'General Practitioner' : doctor.role})
                                        </option>
                                    ))}
                                </select>
                                <User
                                    className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400"/>
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label htmlFor="appointmentDate"
                                       className="block text-sm font-medium text-gray-700 mb-2">
                                    Date of Consultation
                                </label>
                                <div className="relative">
                                    <input
                                        type="date"
                                        id="appointmentDate"
                                        value={new Date().toISOString().split('T')[0]}
                                        className="block w-full pl-10 pr-4 py-2 text-base border-gray-300 border-2 focus:border-2 focus:border-primary-end transition-all duration-500 focus:outline-none  rounded-md"
                                        readOnly
                                    />
                                    <Calendar
                                        className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400"/>
                                </div>
                            </div>

                            <div>
                                <label htmlFor="appointmentTime"
                                       className="block text-sm font-medium text-gray-700 mb-2">
                                    Meeting time
                                </label>
                                <div className="relative">
                                    <input
                                        type="time"
                                        id="appointmentTime"
                                        value={new Date().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})}
                                        className="block w-full pl-10 pr-4 py-2 text-base border-gray-300 border-2  focus:border-2 focus:border-primary-end transition-all duration-500 focus:outline-none rounded-md"
                                        readOnly
                                    />
                                    <Clock
                                        className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400"/>
                                </div>
                            </div>
                        </div>

                        <div>
                            <label htmlFor="prescriptionDetails"
                                   className="block text-sm font-medium text-gray-700 mb-2">
                                Détails de la Prescription
                            </label>
                            <div className="relative">
            <textarea
                id="prescriptionDetails"
                value={consultationData.consultationNotes}
                name="consultationNotes"
                onChange={(e) => handleDateChange(e.target)}
                rows={4}
                className="block w-full pl-10 pr-4 py-2 text-base border-gray-300 border-2 focus:border-2 focus:border-primary-end transition-all duration-500 focus:outline-none rounded-md"
                placeholder="Entrez les détails de la prescription ici..."
                required
            />
            <FileText className="absolute left-3 top-3 h-5 w-5 text-gray-400"/>
            </div>
            </div>

                <div className="justify-center flex">
                    <button
                        type="submit"
                        className="flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-end  focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                        Submit Prescription
                    </button>
                </div>
            </form>
        </div>
    </div>
    )
}// END OF FILE: src/Pages/Nurse/PrescribeDoctor.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Pharmacy/PharmacyBoard.jsx

/* eslint-disable no-unused-vars */
import React from 'react';

export function PharmacyBoard ()  {
  const medicines = [
    { id: 1, name: 'para', quantity: 8, price: 2000, status: 'Valid', expirationDate: 'Dec,12,2001', description: 'Head ache' },
    { id: 1, name: 'para', quantity: 8, price: 2000, status: 'Valid', expirationDate: 'Dec,12,2001', description: 'Head ache' },
    { id: 1, name: 'para', quantity: 8, price: 2000, status: 'Valid', expirationDate: 'Dec,12,2001', description: 'Head ache' },
    { id: 1, name: 'para', quantity: 8, price: 2000, status: 'Valid', expirationDate: 'Dec,12,2001', description: 'Head ache' },
    { id: 1, name: 'para', quantity: 8, price: 2000, status: 'Valid', expirationDate: 'Dec,12,2001', description: 'Head ache' },
    
  ];

  return (
    <div className="overflow-x-auto rounded-lg">
      <table className="w-full">
        <thead className="bg-gradient-to-r from-[#1A73A3] to-[#50C2B9] text-white">
          <tr>
            <th className="p-3 text-left">No.</th>
            <th className="p-3 text-left">Medicines Name</th>
            <th className="p-3 text-left">Quantity</th>
            <th className="p-3 text-left">Price</th>
            <th className="p-3 text-left">Status</th>
            <th className="p-3 text-left">Expiration Date</th>
            <th className="p-3 text-left">Description</th>
          </tr>
        </thead>
        <tbody>
          {medicines.map((medicine, index) => (
            <tr key={medicine.id} className={index % 2 === 0 ? 'bg-[#F4F6FF]' : 'bg-white'}>
              <td className="p-3">{medicine.id}</td>
              <td className="p-3">{medicine.name}</td>
              <td className="p-3">{medicine.quantity}</td>
              <td className="p-3">{medicine.price}</td>
              <td className="p-3">
                <span className="px-3 py-1 rounded-full bg-[#0CA73F] text-white text-sm">
                  {medicine.status}
                </span>
              </td>
              <td className="p-3">{medicine.expirationDate}</td>
              <td className="p-3">{medicine.description}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};
// END OF FILE: src/Pages/Pharmacy/PharmacyBoard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Pharmacy/PharmacyDashboard.jsx

import { FiGrid, FiPlusCircle, FiList, FiFileText } from 'react-icons/fi';
import { NavLink } from 'react-router-dom';
import PropTypes from "prop-types";

export const PharmacyDashboard = ({ children }) => {
  const getLinkClass = ({ isActive }) => {
    return `flex items-center gap-2 p-2 rounded transition-colors ${
      isActive ? 'bg-white/20 font-medium' : 'hover:bg-white/10'
    }`;
  };

  return (
    <div className="flex h-screen">
      {/* Sidebar */}
      <div className="h-screen w-64 bg-gradient-to-b from-[#1A73A3] to-[#50C2B9] text-white p-4 fixed">
        <div className="text-2xl font-bold mb-8">Fultang P</div>
        <nav className="space-y-4">
          <NavLink to="/dashboard" className={getLinkClass}>
            <FiGrid />
            <span>Dashboard</span>
          </NavLink>
          
          <NavLink to="/pharmacyList" className={getLinkClass}>
            <FiPlusCircle />
            <span>Add Medications</span>
          </NavLink>
          
          <NavLink to="/pharmacyMedication" className={getLinkClass}>
            <FiList />
            <span>List of Medications</span>
          </NavLink>
          
          <NavLink to="/prescriptions" className={getLinkClass}>
            <FiFileText />
            <span>Prescriptions</span>
          </NavLink>
        </nav>
      </div>

      {/* Main content */}
      <div className="flex-1 min-h-screen overflow-x-hidden ml-[256px]">
        {children}
      </div>
    </div>
  );
};

PharmacyDashboard.propTypes = {
  children: PropTypes.node.isRequired,
};

export default PharmacyDashboard;// END OF FILE: src/Pages/Pharmacy/PharmacyDashboard.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Pharmacy/PharmacyFilter.jsx

/* eslint-disable no-unused-vars */
import React from 'react';
import { FiFilter } from 'react-icons/fi';

export function PharmacyFilter() {
    return (
      <div className="flex justify-between items-center p-4">
        <h2 className="text-xl font-semibold">Recently Added Medicine</h2>
        <div className="flex gap-2">
          <button className="flex items-center gap-2 px-4 py-2 bg-[#F4F6FF] rounded-lg">
            <span>Filter</span>
            <FiFilter />
          </button>
        </div>
      </div>
    );
  }
  // END OF FILE: src/Pages/Pharmacy/PharmacyFilter.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Pharmacy/Pharmacy.jsx

/* eslint-disable no-unused-vars */
import React from 'react';
import { PharmacyDashboard } from './PharmacyDashboard.jsx';
import { PharmacyNavbar } from './PharmacyNavBar.jsx';
import { PharmacyFilter } from './PharmacyFilter.jsx';
import { PharmacyBoard } from './PharmacyBoard.jsx';
import { PharmacyOperations } from './PharmacyOperations.jsx';


export  function Pharmacy() {


  return (
    <>
      <PharmacyDashboard>
        <div className="h-full flex flex-col">
          <PharmacyNavbar username="Username.N" />
          <div className="flex-1 flex">
            <div className="flex-1 p-4 space-y-4">
              <PharmacyFilter />
              <PharmacyBoard />
            </div>
            <div className="w-80 border-l">
              <PharmacyOperations />
            </div>
          </div>
        </div>
      </PharmacyDashboard>
    </>
    
  );
}// END OF FILE: src/Pages/Pharmacy/Pharmacy.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Pharmacy/PharmacyList.jsx

import React, { useState } from 'react';
import { Search, Edit2, Trash2, Settings } from 'lucide-react';

export default function PharmacistPage() {
    const [medications] = useState([
        {
            id: 1,
            name: 'para',
            quantity: 8,
            price: 2000,
            status: 'Valid',
            expirationDate: 'Dec,12,2001',
            description: 'Head ache'
        },
        {
            id: 2,
            name: 'para',
            quantity: 8,
            price: 2000,
            status: 'Valid',
            expirationDate: 'Dec,12,2001',
            description: 'Head ache'
        },
        {
            id: 3,
            name: 'para',
            quantity: 8,
            price: 2000,
            status: 'Valid',
            expirationDate: 'Dec,12,2001',
            description: 'Head ache'
        },
        {
            id: 4,
            name: 'para',
            quantity: 8,
            price: 2000,
            status: 'Valid',
            expirationDate: 'Dec,12,2001',
            description: 'Head ache'
        },
        {
            id: 5,
            name: 'para',
            quantity: 8,
            price: 2000,
            status: 'Valid',
            expirationDate: 'Dec,12,2001',
            description: 'Head ache'
        }
    ]);

    return (
        <div className="p-6 max-w-full min-h-screen bg-gray-50">
            {/* Header */}
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-bold text-gray-800">Pharmacist</h1>
                <div className="flex items-center gap-4">
                    <button className="p-2 rounded-full bg-gray-100">
                        <Settings className="w-5 h-5 text-gray-600" />
                    </button>
                    <button className="p-2 rounded-full bg-gray-100">
                        <Search className="w-5 h-5 text-gray-600" />
                    </button>
                    <div className="flex items-center gap-2">
                        <span className="text-gray-700">Username.N</span>
                        <div className="w-8 h-8 bg-blue-500 rounded-full"></div>
                    </div>
                </div>
            </div>

            {/* Search Bar */}
            <div className="flex items-center justify-between mb-6">
                <div className="relative flex-1 max-w-2xl">
                    <input
                        type="text"
                        placeholder="Search by Name/description/date & price"
                        className="w-full pl-4 pr-12 py-2 border rounded-lg"
                    />
                    <button className="absolute right-2 top-1/2 -translate-y-1/2 px-4 py-1 bg-blue-600 text-white rounded-lg">
                        Search
                    </button>
                </div>
                <button className="ml-4 p-2 border rounded-lg">
                    <span className="font-medium">Filter</span>
                </button>
            </div>

            {/* Medication List */}
            <div className="bg-white rounded-lg shadow overflow-hidden">
                <div className="flex justify-between items-center p-4 border-b">
                    <h2 className="text-lg font-medium">List of All Medication (5)</h2>
                </div>

                {/* Table */}
                <div className="overflow-x-auto">
                    <table className="w-full">
                        <thead>
                            <tr className="bg-gradient-to-r from-teal-500 to-blue-500 text-white">
                                <th className="py-3 px-4 text-left">No.</th>
                                <th className="py-3 px-4 text-left">Medicines Name</th>
                                <th className="py-3 px-4 text-left">Quantity</th>
                                <th className="py-3 px-4 text-left">Price</th>
                                <th className="py-3 px-4 text-left">Status</th>
                                <th className="py-3 px-4 text-left">Expiration Date</th>
                                <th className="py-3 px-4 text-left">Description</th>
                                <th className="py-3 px-4 text-left"></th>
                            </tr>
                        </thead>
                        <tbody>
                            {medications.map((med) => (
                                <tr key={med.id} className="border-b bg-gray-50">
                                    <td className="py-3 px-4">{med.id}</td>
                                    <td className="py-3 px-4">{med.name}</td>
                                    <td className="py-3 px-4">{med.quantity}</td>
                                    <td className="py-3 px-4">{med.price}</td>
                                    <td className="py-3 px-4">
                                        <span className="px-3 py-1 rounded-full bg-green-100 text-green-800">
                                            {med.status}
                                        </span>
                                    </td>
                                    <td className="py-3 px-4">{med.expirationDate}</td>
                                    <td className="py-3 px-4">{med.description}</td>
                                    <td className="py-3 px-4">
                                        <div className="flex gap-2">
                                            <button className="text-blue-600 hover:text-blue-800">
                                                <Edit2 className="w-4 h-4" />
                                            </button>
                                            <button className="text-red-600 hover:text-red-800">
                                                <Trash2 className="w-4 h-4" />
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>

                {/* Pagination */}
                <div className="flex justify-center items-center p-4 border-t">
                    <button className="p-1 rounded hover:bg-gray-100">
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                        </svg>
                    </button>
                    <span className="mx-4">1/2</span>
                    <button className="p-1 rounded hover:bg-gray-100">
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    );
}// END OF FILE: src/Pages/Pharmacy/PharmacyList.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Pharmacy/PharmacyListMedication.jsx

// END OF FILE: src/Pages/Pharmacy/PharmacyListMedication.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Pharmacy/PharmacyMedication.jsx

import React, { useState } from 'react';
import { PharmacyDashboard } from './PharmacyDashboard';
import { PharmacyNavbar } from './PharmacyNavBar';

export function PharmacyMedication () {
  const [formData, setFormData] = useState({
    medicineName: '',
    quantity: '',
    price: '',
    status: 'Valid',
    expirationDate: {
      dd: '',
      mm: '',
      yyyy: ''
    },
    description: ''
  });

  const [showPreview, setShowPreview] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    // Handle form submission
  };

  return (
    <PharmacyDashboard >
      <div className="min-h-screen bg-gray-50">
        <PharmacyNavbar username="Username.N" />
        
        <div className="p-6">
          <h2 className="text-xl font-semibold mb-6">Add Medications</h2>
          
          <div className="flex gap-6">
            {/* Form Section */}
            <div className="flex-1 bg-white rounded-lg p-6 shadow-sm">
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Medicine Name
                  </label>
                  <input
                    type="text"
                    className="w-full p-2 border rounded-md"
                    value={formData.medicineName}
                    onChange={(e) => setFormData({...formData, medicineName: e.target.value})}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Quantity
                  </label>
                  <input
                    type="number"
                    className="w-full p-2 border rounded-md"
                    value={formData.quantity}
                    onChange={(e) => setFormData({...formData, quantity: e.target.value})}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Price
                  </label>
                  <input
                    type="number"
                    className="w-full p-2 border rounded-md"
                    value={formData.price}
                    onChange={(e) => setFormData({...formData, price: e.target.value})}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Status
                  </label>
                  <input
                    type="text"
                    className="w-full p-2 border rounded-md"
                    value={formData.status}
                    readOnly
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Expiration Date
                  </label>
                  <div className="flex gap-4">
                    <input
                      type="text"
                      placeholder="DD"
                      className="w-20 p-2 border rounded-md"
                      value={formData.expirationDate.dd}
                      onChange={(e) => setFormData({
                        ...formData,
                        expirationDate: {...formData.expirationDate, dd: e.target.value}
                      })}
                    />
                    <input
                      type="text"
                      placeholder="MM"
                      className="w-20 p-2 border rounded-md"
                      value={formData.expirationDate.mm}
                      onChange={(e) => setFormData({
                        ...formData,
                        expirationDate: {...formData.expirationDate, mm: e.target.value}
                      })}
                    />
                    <input
                      type="text"
                      placeholder="YYYY"
                      className="w-24 p-2 border rounded-md"
                      value={formData.expirationDate.yyyy}
                      onChange={(e) => setFormData({
                        ...formData,
                        expirationDate: {...formData.expirationDate, yyyy: e.target.value}
                      })}
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Description
                  </label>
                  <textarea
                    className="w-full p-2 border rounded-md h-24"
                    value={formData.description}
                    onChange={(e) => setFormData({...formData, description: e.target.value})}
                  />
                </div>

                <button
                  type="button"
                  onClick={() => setShowPreview(true)}
                  className="w-full py-2 px-4 bg-gradient-to-r from-primary-start to-primary-end text-white rounded-md hover:opacity-90 transition-opacity"
                >
                  Preview
                </button>
              </form>
            </div>

            {/* Preview Section */}
            {showPreview && (
              <div className="flex-1 bg-white rounded-lg p-6 shadow-sm">
                <div className="space-y-4 bg-gray-50 p-4 rounded-lg">
                  <div className="flex justify-between">
                    <span className="font-medium">Medicine Name</span>
                    <span>{formData.medicineName || 'Para'}</span>
                  </div>

                  <div className="flex justify-between">
                    <span className="font-medium">Quantity</span>
                    <span>{formData.quantity || '80'}</span>
                  </div>

                  <div className="flex justify-between">
                    <span className="font-medium">Price</span>
                    <span>{formData.price || '5000'} XAF</span>
                  </div>

                  <div className="flex justify-between items-center">
                    <span className="font-medium">Status</span>
                    <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">
                      Valid
                    </span>
                  </div>

                  <div className="flex justify-between">
                    <span className="font-medium">Description</span>
                    <span>{formData.description || 'Head Ache'}</span>
                  </div>

                  <div className="flex justify-between">
                    <span className="font-medium">Expiration</span>
                    <span>12/12/2024</span>
                  </div>

                  <div className="flex justify-between">
                    <span className="font-medium">Registered On</span>
                    <span>12/12/2024</span>
                  </div>

                  <div className="space-y-3 pt-4">
                    <button className="w-full py-2 px-4 bg-gradient-to-r from-primary-start to-primary-end text-white rounded-md hover:opacity-90 transition-opacity">
                      Submit
                    </button>
                    <button className="w-full py-2 px-4 border border-red-500 text-red-500 rounded-md hover:bg-red-50 transition-colors">
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </PharmacyDashboard>
  );
};

// END OF FILE: src/Pages/Pharmacy/PharmacyMedication.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Pharmacy/PharmacyNavBar.jsx

import React from 'react';
import { FiSettings, FiRefreshCw } from 'react-icons/fi';

export function PharmacyNavbar({ username }) {
  return (
    <div className="flex justify-between items-center px-4 py-3 bg-white border-b ">
      <h1 className="text-xl font-semibold" style={{ color: '#2F4B8F' }}>Pharmacist</h1>
      <div className="flex items-center gap-4">
        <div className="p-2 rounded-lg shadow-sm hover:shadow-md bg-white transition-shadow">
          <button className="text-gray-500 hover:text-gray-700">
            <FiSettings className="w-5 h-5 text-blue" />
          </button>
        </div>
        <div className="p-2 rounded-lg shadow-sm hover:shadow-md bg-white transition-shadow">
          <button className="text-gray-500 hover:text-gray-700">
            <FiRefreshCw className="w-5 h-5" />
          </button>
        </div>
        <div className="flex items-center gap-2 ml-2">
          <span className="text-sm text-gray-600">Username.N</span>
          <div className="w-8 h-8 rounded-full shadow-sm overflow-hidden">
            <img 
              src="/doctor.png" 
              alt="Profile" 
              className="w-full h-full object-cover"
            />
          </div>
        </div>
      </div>
    </div>
  );
}

export default PharmacyNavbar;// END OF FILE: src/Pages/Pharmacy/PharmacyNavBar.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Pharmacy/PharmacyOperations.jsx

import React from 'react';
import { FiPlusCircle, FiList, FiFileText } from 'react-icons/fi';

export function PharmacyOperations() {
  return (
    <div className="p-6 space-y-4">
      <h3 className="text-xl font-medium text-gray-900">Quick Operations</h3>
      
      <div className="space-y-3">
        <button className="flex items-center gap-3 w-full p-4 bg-white shadow-sm hover:shadow-md rounded-xl transition-shadow">
          <div className="p-2 rounded-full bg-[#3244BD] text-white">
            <FiPlusCircle className="w-5 h-5" />
          </div>
          <span className="text-[#3244BD]">Add Medicines</span>
        </button>

        <button className="flex items-center gap-3 w-full p-4 bg-white shadow-sm hover:shadow-md rounded-xl transition-shadow">
          <div className="p-2 rounded-full bg-[#3244BD] text-white">
            <FiFileText className="w-5 h-5" />
          </div>
          <span className="text-[#3244BD]">Add a New Bill</span>
        </button>

        <button className="flex items-center gap-3 w-full p-4 bg-white shadow-sm hover:shadow-md rounded-xl transition-shadow">
          <div className="p-2 rounded-full bg-[#3244BD] text-white">
            <FiList className="w-5 h-5" />
          </div>
          <span className="text-[#3244BD]">List of Bills</span>
        </button>
      </div>

      
      <div className="mt-8 p-4 bg-gradient-to-r from-primary-start to-primary-end rounded-lg text-white">
        <h3 className="text-xl font-bold">Save, Secured and Efficient Medications</h3>
        <img 
                        src="/doctorimage.png" 
                        alt="doctor" 
                        className="w-full h-full object-cover"
                    />
      
      </div>
    </div>
  );
}

export default PharmacyOperations;// END OF FILE: src/Pages/Pharmacy/PharmacyOperations.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Pharmacy/PharmacyPrescription.jsx

// END OF FILE: src/Pages/Pharmacy/PharmacyPrescription.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Receptionist/addNewPatientModal.jsx

import {XIcon} from "lucide-react";
import {useState} from "react";
import PropTypes from "prop-types";
import axiosInstance from "../../Utils/axiosInstance.js";
import {useAuthentication} from "../../Utils/Provider.jsx";


export function AddNewPatientModal({isOpen, onClose, setCanOpenSuccessModal, setSuccessMessage, setIsLoading})
{
    AddNewPatientModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        setCanOpenSuccessModal: PropTypes.func.isRequired,
        setSuccessMessage: PropTypes.func.isRequired,
        setIsLoading: PropTypes.func.isRequired
    }

    const {userData} = useAuthentication();
     const [formData, setFormData] = useState({
            firstName: '',
            lastName: '',
            birthDate: '',
            gender: 'Male',
            address: '',
            cniNumber: '',
            phoneNumber: '',
            email: '',
            idMedicalStaff:'',
        });
    const [error, setError] = useState("");
    const [isYears, setIsYears] = useState(false);
    const [isMonth, setIsMonth] = useState(false);
    const [isWeeks, setIsWeeks] = useState(false);
    const [isDay, setIsDay] = useState(false);
    const [age, setAge] = useState(0);
    const [dateError, setDateError] =useState("");





    function calculateAge(birthDate)
    {
        const today = new Date();
        const birth = new Date(birthDate);
        const diffTime = Math.abs(today - birth);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        if (diffDays < 7) {
            setIsDay(true);
            setIsWeeks(false);
            setIsMonth(false);
            setIsYears(false);
            return Math.floor(diffDays);
        }
        else if (diffDays < 30) {
            setIsDay(false);
            setIsWeeks(true);
            setIsMonth(false);
            setIsYears(false);
            return Math.floor(diffDays / 7);
        }
        else if (diffDays < 365) {
            setIsDay(false);
            setIsWeeks(false);
            setIsMonth(true);
            setIsYears(false);
            return Math.floor(diffDays / 30);
        } else {
            setIsDay(false);
            setIsWeeks(false);
            setIsMonth(false);
            setIsYears(true);
            let _age = today.getFullYear() - birth.getFullYear();
            const monthDiff = today.getMonth() - birth.getMonth();
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                _age--;
            }
            return _age;
        }
    }


    function handleChange(e) {
        const { name, value } = e.target;
        if (name === 'birthDate') {
            const selectedDate = new Date(value);
            const today = new Date();
            if (selectedDate > today) {
                setDateError('The birth date cannot be in the future');
                setFormData({
                    firstName: '',
                    lastName: '',
                    birthDate: '',
                    gender: 'Male',
                    address: '',
                    cniNumber: '',
                    phoneNumber: '',
                    email: '',
                });
            } else {
                setDateError('');
                setFormData(prevData => ({ ...prevData, [name]: value}));
                setAge(calculateAge(value));
            }
        }
        else {
            setFormData(prevData => ({ ...prevData, [name]: value }));
        }
    }




    async function handleSubmit (e)  {
        e.preventDefault();
        setIsLoading(true);
        if(!dateError)
        {
            formData.idMedicalStaff = userData.id;
            console.log(formData);
            console.log(userData);
            try
            {
                const response = await axiosInstance.post("/patient/", formData);
                if (response.status === 201)
                {
                    setIsLoading(false);
                    setSuccessMessage("Patient added successfully !");
                    setCanOpenSuccessModal(true);
                    onClose();
                }
            }
            catch (error)
            {
                setIsLoading(false);
                setSuccessMessage("");
                setCanOpenSuccessModal(false);
               // setError(error.response.data.email);
                setError("something went wrong, try later please !");
                console.log(error);
            }
        }
    }

    function applyFormStyle()
    {
        return "w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-2 focus:border-primary-end";
    }

    function applyAgeStyle()
    {
        return "w-1/4 text-gray-500 text-md mr-1";
    }


    if (!isOpen) return null;

    return (
        <>
            <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
                <div className="bg-white rounded-lg shadow-xl w-full max-w-3xl mx-4">
                    <div className="bg-gradient-to-r from-primary-end to-primary-start px-6 py-4 rounded-t-lg flex-col flex justify-center items-center">
                        <h3 className="text-4xl font-bold text-white">Add New Patient</h3>
                    </div>

                    <button onClick={onClose} className="text-white hover:text-gray-200">
                        <XIcon className="w-6 h-6"/>
                    </button>

                    {dateError && <p className="text-red-500  font-bold text-md ml-4">Error : {dateError}</p>}
                    {error && <p className="text-red-500  font-bold text-md ml-4">{error}</p>}
                    <form onSubmit={handleSubmit} className="p-4 space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label htmlFor="firstName"
                                       className="block text-sm font-medium text-gray-700 mb-1">Firstname</label>
                                <input
                                    type="text"
                                    id="firstName"
                                    name="firstName"
                                    placeholder={"enter patient's first name"}
                                    value={formData.firstName}
                                    onChange={handleChange}
                                    className={applyFormStyle()}
                                    required={true}
                                />
                            </div>
                            <div>
                                <label htmlFor="lastName"
                                       className="block text-sm font-medium text-gray-700 mb-1">Lastname</label>
                                <input
                                    type="text"
                                    id="lastName"
                                    name="lastName"
                                    placeholder={"enter patient's last name"}
                                    value={formData.lastName}
                                    onChange={handleChange}
                                    className={applyFormStyle()}
                                    required={true}
                                />
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <label htmlFor="birthDate" className="block text-sm font-medium text-gray-700 mb-1">Birth
                                    Date</label>
                                    <input
                                        type="date"
                                        id="birthDate"
                                        name="birthDate"
                                        placeholder={"enter patient's birth date"}
                                        value={formData.birthDate}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={true}
                                    />
                            </div>
                            <div>
                                <label htmlFor="age" className="block text-sm font-medium text-gray-700 mb-1">Age</label>
                                <div className={`${applyFormStyle()} flex justify-between`}>
                                    <input
                                        id="age"
                                        name="age"
                                        value={age}
                                        readOnly={true}
                                        className={"w-3/4 outline-none focus:outline-none ring-0 focus:ring-0 "}
                                    />
                                    {isDay && <p className={applyAgeStyle()}> Day(s)</p>}
                                    {isWeeks && <p className={applyAgeStyle()}> Week(s)</p>}
                                    {isMonth && <p className={applyAgeStyle()}> Mount(s)</p>}
                                    {isYears && <p className={applyAgeStyle()}> Year(s)</p>}
                                </div>

                            </div>
                            <div>
                                <label htmlFor="gender"
                                       className="block text-sm font-medium text-gray-700 mb-1">Gender</label>
                                <select
                                    id="gender"
                                    name="gender"
                                    value={formData.gender}
                                    onChange={handleChange}
                                    className={applyFormStyle()}
                                    required={true}
                                >
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                </select>
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div className="col-span-1">
                                <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                                <input
                                    type="text"
                                    id="address"
                                    name="address"
                                    value={formData.address}
                                    placeholder={"enter patient's address"}
                                    onChange={handleChange}
                                    className={applyFormStyle()}
                                    required={true}
                                />
                            </div>
                            <div className="col-span-2">
                                <label htmlFor="email"
                                       className="block text-sm font-medium text-gray-700 mb-1">Identity Card Number</label>
                                <input
                                    type="text"
                                    id="idNumber"
                                    name="cniNumber"
                                    value={formData.cniNumber}
                                    placeholder={"enter patient's identity card number"}
                                    onChange={handleChange}
                                    className={applyFormStyle()}
                                    required={false}
                                />
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">Phone
                                    Number</label>
                                <input
                                    type="number"
                                    id="phone"
                                    name="phoneNumber"
                                    value={formData.phoneNumber}
                                    placeholder={"enter patient's phone number"}
                                    onChange={handleChange}
                                    className={applyFormStyle()}
                                    required={true}
                                />
                            </div>
                            <div>
                                <label htmlFor="email"
                                       className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                <input
                                    type="email"
                                    id="email"
                                    name="email"
                                    value={formData.email}
                                    placeholder={"enter patient's email"}
                                    onChange={handleChange}
                                    className={applyFormStyle()}
                                    required={false}
                                />
                            </div>
                        </div>

                        <div className="px-6 py-1 flex justify-center space-x-6">
                            <button
                                type="submit"
                                className="px-4 py-2 bg-primary-end  hover:text-xl text-md text-white rounded-lg font-bold transition-all duration-300"
                            >
                                Save
                            </button>
                            <button
                                type="button"
                                onClick={onClose}
                                className="px-4 py-2 border bg-red-400 text-md hover:text-xl hover:bg-red-500 text-white font-bold rounded-lg  transition-all duration-300"
                            >
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </>
    );
}// END OF FILE: src/Pages/Receptionist/addNewPatientModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Receptionist/Appointments.jsx

import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";
import {receptionistNavLink} from "./receptionistNavLink.js";
import {ReceptionistNavBar} from "./ReceptionistNavBar.jsx";
import {FaArrowLeft, FaArrowRight, FaSearch} from "react-icons/fa";
import {Tooltip} from "antd";


export const ScheduledAppointments =[
    {
        id: 1,
        doctor: "Dr. Emily Thompson",
        patient: "John Smith",
        reason: "Routine Checkup",
        atDate: "2024-03-15 10:30",
        requirements: "No specific requirements"
    },
    {
        id: 2,
        doctor: "Dr. Michael Rodriguez",
        patient: "Sarah Johnson",
        reason: "Cardiology Consultation",
        atDate: "2024-03-16 14:45",
        requirements: "Fasting required, bring recent ECG results"
    },
    {
         id: 3,
        doctor: "Dr. Alexandra Kim",
        patient: "David Lee",
        reason: "Orthopedic Evaluation",
        atDate: "2024-03-17 11:15",
        requirements: "X-ray images from previous visit"
    },
    {
        id: 4,
        doctor: "Dr. Robert Chen",
        patient: "Emma Wilson",
        reason: "Dermatology Follow-up",
        atDate: "2024-03-18 09:00",
        requirements: "Bring current medication list"
    },
    {
        id: 5,
        doctor: "Dr. Maria Garcia",
        patient: "Thomas Brown",
        reason: "Pediatric Wellness Check",
        atDate: "2024-03-19 13:20",
        requirements: "Child's vaccination record"
    },
    {
        id: 6,
        doctor: "Dr. Maria Garcia",
        patient: "Thomas Brown",
        reason: "Pediatric Wellness Check",
        atDate: "2024-03-19 13:20",
        requirements: "Child's vaccination record"
    },
];

export function Appointments() {
    return (
        <DashBoard requiredRole={"Receptionist"} linkList={receptionistNavLink}>
            <ReceptionistNavBar/>

            {/*Header content with search bar*/}
            <div className="flex justify-between mb-8 mt-5">
                <p className="font-bold text-xl mt-2 ml-5"> List Of Scheduled Appointments </p>
                <div className="flex mr-5">
                    <div className="flex w-[300px] h-10 border-2 border-secondary rounded-lg">
                        <FaSearch className="text-xl text-secondary m-2"/>
                        <input
                            type="text"
                            placeholder={"search for a specific appointment"}
                            className="w-full mr-2 border-none focus:outline-none focus:ring-0"
                        />
                    </div>
                    <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
                        Search
                    </button>
                </div>
            </div>


            {/*List of scheduled  appointments*/}

            <div className="ml-5 mr-5 ">
                <table className="w-full border-separate border-spacing-y-2">
                    <thead>
                    <tr className=" ">
                        <th className="text-center text-white p-4 text-xl font-bold bg-primary-end   rounded-l-2xl ">No</th>
                        <th className="text-center text-white p-4 text-xl font-bold bg-primary-end ">Doctor</th>
                        <th className="text-center text-white p-4 text-xl font-bold  bg-primary-end ">Patient
                        </th>
                        <th className="text-center text-white p-4 text-xl font-bold bg-primary-end  ">Reason</th>
                        <th className="text-center text-white p-4 text-xl font-bold bg-primary-end  ">Scheduled Time
                        </th>
                        <th className="text-center text-white p-4 text-xl font-bold bg-primary-end flex-col rounded-r-2xl">
                            <p>Requirements</p>
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    {ScheduledAppointments.map((patient, index) => (
                        <tr key={patient.id || index} className="">
                            <td className="p-4 text-md text-blue-900 rounded-l-lg bg-gray-100 text-center">{index + 1}</td>
                            <td className="p-4 text-md text-center bg-gray-100 font-bold">{patient.doctor}</td>
                            <td className="p-4 text-md  bg-gray-100 text-center">{patient.patient}</td>
                            <td className="p-4 text-md bg-gray-100 text-center">{patient.reason}</td>
                            <td className="p-4 text-center bg-gray-100 text-md">{patient.atDate}</td>
                            <td className="p-4 relative bg-gray-100 rounded-r-lg">
                                <div className="w-full items-center justify-center flex gap-6">
                                    <p>{patient.requirements}</p>
                                </div>
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </table>


                {/*Pagination content */}
                <div className="justify-center flex mt-6 mb-4">
                    <div className="flex gap-4">
                        <Tooltip placement={"left"} title={"previous slide"}>
                            <button
                                onClick={async ()=> {}}
                                className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                <FaArrowLeft/>
                            </button>
                        </Tooltip>
                        <p className="text-secondary text-2xl font-bold mt-4">1/10</p>
                        <Tooltip placement={"right"} title={"next slide"}>
                            <button
                                onClick={async ()=> {}}
                                className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                <FaArrowRight/>
                            </button>
                        </Tooltip>
                    </div>
                </div>
                  </div>
        </DashBoard>
    )
}// END OF FILE: src/Pages/Receptionist/Appointments.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Receptionist/EditPatientInfosModal.jsx

import { useState, useEffect } from "react";
import PropTypes from "prop-types";
import axiosInstance from "../../Utils/axiosInstance.js";

export function EditPatientInfosModal({ isOpen, onClose, setCanOpenSuccessModal, setSuccessMessage, setIsLoading, patientData }) {

    EditPatientInfosModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onClose: PropTypes.func.isRequired,
        setCanOpenSuccessModal: PropTypes.func.isRequired,
        setSuccessMessage: PropTypes.func.isRequired,
        setIsLoading: PropTypes.func.isRequired,
        patientData: PropTypes.object.isRequired
    };


    const [formData, setFormData] = useState({
        firstName: '',
        lastName: '',
        birthDate: '',
        gender: '',
        address: '',
        cniNumber: '',
        phoneNumber: '',
        email: '',
    });

    const [error, setError] = useState("");
    const [isYears, setIsYears] = useState(false);
    const [isMonth, setIsMonth] = useState(false);
    const [isWeeks, setIsWeeks] = useState(false);
    const [isDay, setIsDay] = useState(false);
    const [age, setAge] = useState(0);
    const [dateError, setDateError] = useState("");
    const [checkedFields, setCheckedFields] = useState({
        firstName: false,
        lastName: false,
        birthDate: false,
        gender: false,
        address: false,
        cniNumber: false,
        phoneNumber: false,
        email: false,
    });



    useEffect(() => {
        if (patientData) {
            setFormData(patientData);
            setAge(calculateAge(patientData.birthDate));
        }
    }, [patientData]);


    function calculateAge(birthDate) {
        const today = new Date();
        const birth = new Date(birthDate);
        const diffTime = Math.abs(today - birth);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        if (diffDays < 7) {
            setIsDay(true);
            setIsWeeks(false);
            setIsMonth(false);
            setIsYears(false);
            return Math.floor(diffDays);
        }
        else if (diffDays < 30) {
            setIsDay(false);
            setIsWeeks(true);
            setIsMonth(false);
            setIsYears(false);
            return Math.floor(diffDays / 7);
        }
        else if (diffDays < 365) {
            setIsDay(false);
            setIsWeeks(false);
            setIsMonth(true);
            setIsYears(false);
            return Math.floor(diffDays / 30);
        } else {
            setIsDay(false);
            setIsWeeks(false);
            setIsMonth(false);
            setIsYears(true);
            let _age = today.getFullYear() - birth.getFullYear();
            const monthDiff = today.getMonth() - birth.getMonth();
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                _age--;
            }
            return _age;
        }
    }



    function handleChange(e) {
        const { name, value } = e.target;
        if (name === 'birthDate') {
            const selectedDate = new Date(value);
            const today = new Date();
            if (selectedDate > today) {
                setDateError('The birth date cannot be in the future');
            } else {
                setDateError('');
                setFormData(prevData => ({ ...prevData, [name]: value }));
                setAge(calculateAge(value));
            }
        }
        else {
            setFormData(prevData => ({ ...prevData, [name]: value }));
        }
    }


    function handleCheckboxChange(e) {
        const { name, checked } = e.target;
        setCheckedFields(prev => ({ ...prev, [name]: checked }));
    }


    async function handleSubmit(e) {
        e.preventDefault();
        setIsLoading(true);
        if (!dateError) {
            const updatedData = Object.keys(checkedFields).reduce((acc, key) => {
                if (checkedFields[key]) {
                    acc[key] = formData[key];
                }
                return acc;
            }, {});

            try {
                const response = await axiosInstance.patch(`/patient/${patientData.id}/`, updatedData);
                if (response.status === 200) {
                    setIsLoading(false);
                    setSuccessMessage("Patient information updated successfully!");
                    setCanOpenSuccessModal(true);
                    onClose();
                }
            } catch (error) {
                setIsLoading(false);
                setSuccessMessage("");
                setCanOpenSuccessModal(false);
                setError("Something went wrong, please try again later!");
                console.log(error);
            }
        }
        setIsLoading(false);
    }

    function applyFormStyle() {
        return "w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-2 focus:border-primary-end";
    }

    function applyAgeStyle() {
        return "w-1/4 text-gray-500 text-md mr-1";
    }

    function applyCheckboxStyle() {
        return "form-checkbox h-3 w-3 mt-4 text-primary-end";
    }

    if (!isOpen) return null;

    return (
        <>
            <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
                <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
                    <div className="bg-gradient-to-r from-primary-end to-primary-start px-6 py-4 rounded-t-lg flex-col flex justify-center items-center">
                        <h3 className="text-4xl font-bold text-white">Edit Patient Information</h3>
                        <div className="flex mt-3">
                            <p className="text-white font-semibold ml-3 italic">(Please check the fields you want to modify)</p>
                        </div>
                    </div>
                    {dateError && <p className="text-red-500 font-bold text-md ml-4">Error: {dateError}</p>}
                    {error && <p className="text-red-500 font-bold text-md ml-4">{error}</p>}
                    <form onSubmit={handleSubmit} className="p-4 space-y-6">
                        <div className="flex space-x-3">
                            <div className="w-full flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkFirstName"
                                    name="firstName"
                                    checked={checkedFields.firstName}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="firstName"
                                           className="block text-sm font-medium text-gray-700 mb-1">Firstname</label>
                                    <input
                                        type="text"
                                        id="firstName"
                                        name="firstName"
                                        placeholder="Enter patient's first name"
                                        value={formData.firstName}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.firstName}
                                        disabled={!checkedFields.firstName}
                                    />
                                </div>
                            </div>


                            <div className="w-full flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkLastName"
                                    name="lastName"
                                    checked={checkedFields.lastName}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="lastName"
                                           className="block text-sm font-medium text-gray-700 mb-1">Lastname</label>
                                    <input
                                        type="text"
                                        id="lastName"
                                        name="lastName"
                                        placeholder="Enter patient's last name"
                                        value={formData.lastName}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.lastName}
                                        disabled={!checkedFields.lastName}
                                    />
                                </div>
                            </div>
                        </div>


                        <div className="flex space-x-2">
                            <div className="flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkBirthDate"
                                    name="birthDate"
                                    checked={checkedFields.birthDate}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="birthDate" className="block text-sm font-medium text-gray-700 mb-1">Birth
                                        Date</label>
                                    <input
                                        type="date"
                                        id="birthDate"
                                        name="birthDate"
                                        placeholder="Enter patient's birth date"
                                        value={formData.birthDate}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.birthDate}
                                        disabled={!checkedFields.birthDate}
                                    />
                                </div>
                            </div>

                            <div className="flex items-center">
                                <div>
                                    <label htmlFor="age"
                                           className="block text-sm font-medium text-gray-700 mb-1">Age</label>
                                    <div className={`${applyFormStyle()} flex justify-between`}>
                                        <input
                                            id="age"
                                            name="age"
                                            value={age}
                                            readOnly={true}
                                            className="w-3/4 outline-none focus:outline-none ring-0 focus:ring-0"
                                        />
                                        {isDay && <p className={applyAgeStyle()}> Day(s)</p>}
                                        {isWeeks && <p className={applyAgeStyle()}> Week(s)</p>}
                                        {isMonth && <p className={applyAgeStyle()}> Month(s)</p>}
                                        {isYears && <p className={applyAgeStyle()}> Year(s)</p>}
                                    </div>
                                </div>
                            </div>


                            <div className="flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkGender"
                                    name="gender"
                                    checked={checkedFields.gender}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="gender"
                                           className="block text-sm font-medium text-gray-700 mb-1">Gender</label>
                                    <select
                                        id="gender"
                                        name="gender"
                                        value={formData.gender}
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.gender}
                                        disabled={!checkedFields.gender}
                                    >
                                        <option value="Male">Male</option>
                                        <option value="Female">Female</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div className="grid grid-cols-3 space-x-2">
                            <div className="col-span-1 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkAddress"
                                    name="address"
                                    checked={checkedFields.address}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="address"
                                           className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                                    <input
                                        type="text"
                                        id="address"
                                        name="address"
                                        value={formData.address}
                                        placeholder="Enter patient's address"
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.address}
                                        disabled={!checkedFields.address}
                                    />
                                </div>
                            </div>

                            <div className="col-span-2 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkEmail"
                                    name="email"
                                    checked={checkedFields.email}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="email"
                                           className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                    <input
                                        type="email"
                                        id="email"
                                        name="email"
                                        value={formData.email}
                                        placeholder="Enter patient's email"
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.email}
                                        disabled={!checkedFields.email}
                                    />
                                </div>
                            </div>
                        </div>


                        <div className="grid grid-cols-3 space-x-2">

                            <div className="col-span-2 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkCniNumber"
                                    name="cniNumber"
                                    checked={checkedFields.cniNumber}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="cniNumber" className="block text-sm font-medium text-gray-700 mb-1">Identity
                                        Card Number</label>
                                    <input
                                        type="text"
                                        id="cniNumber"
                                        name="cniNumber"
                                        value={formData.cniNumber}
                                        placeholder="Enter patient's identity card number"
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.cniNumber}
                                        disabled={!checkedFields.cniNumber}
                                    />
                                </div>
                            </div>


                            <div className="col-span-1 flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    id="checkPhoneNumber"
                                    name="phoneNumber"
                                    checked={checkedFields.phoneNumber}
                                    onChange={handleCheckboxChange}
                                    className={applyCheckboxStyle()}
                                />
                                <div className="flex-1">
                                    <label htmlFor="phoneNumber"
                                           className="block text-sm font-medium text-gray-700 mb-1">Phone
                                        Number</label>
                                    <input
                                        type="tel"
                                        id="phoneNumber"
                                        name="phoneNumber"
                                        value={formData.phoneNumber}
                                        placeholder="Enter patient's phone number"
                                        onChange={handleChange}
                                        className={applyFormStyle()}
                                        required={checkedFields.phoneNumber}
                                        disabled={!checkedFields.phoneNumber}
                                    />
                                </div>
                            </div>
                        </div>


                        <div className="px-6 py-1 flex justify-center space-x-6">
                            <button
                                type="submit"
                                className="px-4 py-2 bg-primary-end hover:text-xl text-md text-white rounded-lg font-bold transition-all duration-300"
                            >
                                Update
                            </button>
                            <button
                                type="button"
                                onClick={()=>{setError(""),onClose()}}
                                className="px-4 py-2 border bg-red-400 text-md hover:text-xl hover:bg-red-500 text-white font-bold rounded-lg transition-all duration-300"
                            >
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </>
    );
}



// END OF FILE: src/Pages/Receptionist/EditPatientInfosModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Receptionist/Receptionist.jsx

import {ReceptionistNavBar} from "./ReceptionistNavBar.jsx";
import {FaArrowLeft, FaArrowRight, FaEdit, FaEye, FaPlus, FaSearch,} from "react-icons/fa";
import {Tooltip} from "antd";
import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";
import {receptionistNavLink} from "./receptionistNavLink.js";
import {useEffect, useState} from "react";
import {AddNewPatientModal} from "./addNewPatientModal.jsx";
import {SuccessModal} from "../Modals/SuccessModal.jsx";
import Wait from "../Modals/wait.jsx";
import {ViewPatientDetailsModal} from "./ViewPatientDetailsModal.jsx";
import {EditPatientInfosModal} from "./EditPatientInfosModal.jsx";
import axiosInstance from "../../Utils/axiosInstance.js";
import Loader from "../../GlobalComponents/Loader.jsx";
import  noPatientImage from "../../assets/noPatients.png";
import ServerErrorPage from "../../GlobalComponents/ServerError.jsx";



export function Receptionist()
{


    const [canOpenAddNewPatientModal, setCanOpenAddNewPatientModal] = useState(false);
    const [canOpenSuccessModal, setCanOPenSuccessModal] = useState(false);
    const [canOpenViewPatientDetailModal, setCanOpenViewPatientDetailModal] = useState(false);
    const [successMessage, setSuccessMessage] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [selectedPatientDetails, setSelectedPatientDetails] = useState({});
    const [canOpenEditPatientDetailModal, setCanOpenEditPatientDetailModal] = useState(false);
    const [patients, setPatients] = useState([]);
    const [nexUrlForRenderPatientList, setNexUrlForRenderPatientList] = useState("");
    const [previousUrlForRenderPatientList, setPreviousUrlForRenderPatientList] = useState("");
    const [actualPageNumber, setActualPageNumber] = useState(0);
    const [numberOfPages, setNumberOfPages] = useState(0);
    const [waitData, setWaitData] = useState(false);
    const [errorStatus, setErrorStatus] = useState(null);
    const [errorMessage, setErrorMessage] = useState("");








    function updateActualPageNumber(action) {
        if (action === "next")
        {
            if(actualPageNumber < numberOfPages)
            {
                setActualPageNumber(actualPageNumber + 1);
            }
        }
        else
        {
            if(actualPageNumber > 1)
            {
                setActualPageNumber(actualPageNumber - 1);
            }
        }
    }




    useEffect(() => {
        async function fetchPatients () {
            setWaitData(true);
            try
            {
                const response = await axiosInstance.get("/patient/");
                setWaitData(false);
                if (response.status === 200)
                {
                    console.log(response)
                    setPatients(response.data.results);
                    setNexUrlForRenderPatientList(response.data.next);
                    setPreviousUrlForRenderPatientList(response.data.previous);
                    setActualPageNumber(response.data.current_page);
                    setNumberOfPages(response.data.total_pages);
                    setErrorStatus(null);
                    setErrorMessage("");
                }
            }
            catch (error)
            {
                setWaitData(false);
                console.log(error);
                if(error.status === 403 || error.status === 500 || error.status === 503)
                {
                    setErrorMessage("Something went wrong went retrieving patient list");
                    setErrorStatus(error.status);
                }
                else
                {
                    setErrorStatus(null);
                    setErrorMessage("");
                }
            }
        }
        fetchPatients();
    }, []);





    async function fetchNextOrPreviousPatientList (url) {
        if(url)
        {
            try {
                setWaitData(true);
                const response = await axiosInstance.get(url);
                if (response.status === 200)
                {
                    setWaitData(false);
                    //console.log(response)
                    setPatients(response.data.results);
                    setNexUrlForRenderPatientList(response.data.next);
                    setPreviousUrlForRenderPatientList(response.data.previous);
                    setActualPageNumber(response.data.current_page);
                    setNumberOfPages(response.data.total_pages);
                }
            } catch (error) {
                setWaitData(false);
                console.log(error);
            }
        }
    }






    return (
        <DashBoard linkList={receptionistNavLink} requiredRole={"Receptionist"}>
            <ReceptionistNavBar/>
            <div className="mt-5 flex flex-col relative">

                {/*Header content with search bar*/}
                <div className="flex justify-between mb-5">
                    <p className="font-bold text-xl mt-2 ml-5"> List Of Patient </p>
                    <div className="flex mr-5">
                        <div className="flex w-[300px] h-10 border-2 border-secondary rounded-lg">
                            <FaSearch className="text-xl text-secondary m-2"/>
                            <input
                                type="text"
                                placeholder={"search for a specific patient"}
                                className="border-none focus:outline-none focus:ring-0"
                            />
                        </div>
                        <button className="ml-2 w-20 h-10 text-white bg-secondary rounded-lg">
                            Search
                        </button>
                    </div>
                </div>

                {/*List of registered patients*/}

                <>
                    {waitData ? (
                        <div className="h-[500px] w-full flex justify-center items-center">
                            <Loader size={"medium"} color={"primary-end"}/>
                        </div>) :
                        errorStatus ?
                            <div className="mt-16">
                                <ServerErrorPage errorStatus={errorStatus} message={errorMessage}/>
                            </div>
                            : (patients.length>0 ?
                                (
                                    <div className="ml-5 mr-5 ">
                                        <table className="w-full border-separate border-spacing-y-2">
                                            <thead>
                                            <tr className="">
                                                <th className="text-center text-white p-4 text-xl font-bold bg-primary-end  border-gray-200 rounded-l-2xl ">No</th>
                                                <th className="text-center text-white p-4 text-xl font-bold bg-primary-end  border-gray-200">First
                                                    Name
                                                </th>
                                                <th className="text-center text-white p-4 text-xl font-bold bg-primary-end  border-gray-200 ">Last
                                                    Name
                                                </th>
                                                <th className="text-center text-white p-4 text-xl font-bold bg-primary-end  border-gray-200 ">Gender</th>
                                                <th className="text-center text-white p-4 text-xl font-bold bg-primary-end  border-gray-200 ">Address</th>
                                                <th className="text-center text-white p-4 text-xl font-bold bg-primary-end  flex-col rounded-r-2xl">
                                                    <p>Operations</p>
                                                </th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            {patients.map((patient, index) => (
                                                <tr key={patient.id || index} className="">
                                                    <td className="p-4 text-md text-blue-900 rounded-l-lg bg-gray-100 text-center">{index + 1}</td>
                                                    <td className="p-4 text-md text-center bg-gray-100 font-bold">{patient.firstName}</td>
                                                    <td className="p-4 text-md text-center bg-gray-100">{patient.lastName}</td>
                                                    <td className="p-4 text-md text-center bg-gray-100">{patient.gender}</td>
                                                    <td className="p-4 text-center text-md bg-gray-100 ">{patient.address}</td>
                                                    <td className="p-4 relative bg-gray-100 rounded-r-lg">
                                                        <div className="w-full items-center justify-center flex gap-6">
                                                            <Tooltip placement={"left"} title={"view details"}>
                                                                <button
                                                                    onClick={() => {
                                                                        setSelectedPatientDetails(patient), setCanOpenViewPatientDetailModal(true)
                                                                    }}
                                                                    className="flex items-center justify-center w-9 h-9 text-primary-end text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                                    <FaEye/>
                                                                </button>
                                                            </Tooltip>
                                                            <Tooltip placement={"right"} title={"Edit"}>
                                                                <button
                                                                    onClick={() => {
                                                                        setSelectedPatientDetails(patient), setCanOpenEditPatientDetailModal(true)
                                                                    }}
                                                                    className="flex items-center justify-center w-9 h-9 text-green-500 text-xl hover:bg-gray-300 hover:rounded-full transition-all duration-300">
                                                                    <FaEdit/>
                                                                </button>
                                                            </Tooltip>
                                                        </div>
                                                    </td>
                                                </tr>
                                            ))}
                                            </tbody>
                                        </table>


                                        {/*Pagination content */}
                                        <div className="fixed w-full justify-center -right-16 bottom-0 flex mt-6 mb-4">
                                            <div className="flex gap-4">
                                                <Tooltip placement={"left"} title={"previous slide"}>
                                                    <button
                                                        onClick={async () => {
                                                            await fetchNextOrPreviousPatientList(previousUrlForRenderPatientList), updateActualPageNumber("prev")
                                                        }}
                                                        className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                        <FaArrowLeft/>
                                                    </button>
                                                </Tooltip>
                                                <p className="text-secondary text-2xl font-bold mt-4">{actualPageNumber}/{numberOfPages}</p>
                                                <Tooltip placement={"right"} title={"next slide"}>
                                                    <button
                                                        onClick={async () => {
                                                            await fetchNextOrPreviousPatientList(nexUrlForRenderPatientList), updateActualPageNumber("next")
                                                        }}
                                                        className="w-14 h-14 border-2 rounded-lg hover:bg-secondary text-xl  text-secondary hover:text-2xl duration-300 transition-all  hover:text-white shadow-xl flex justify-center items-center mt-2">
                                                        <FaArrowRight/>
                                                    </button>
                                                </Tooltip>
                                            </div>
                                        </div>


                                        {/* Add new patient button & modal */}
                                        <Tooltip placement={"top"} title={"Add new patient"}>
                                            <button
                                                onClick={() => setCanOpenAddNewPatientModal(true)}
                                                className="fixed bottom-5 right-16 rounded-full w-14 h-14 bg-gradient-to-r text-3xl font-bold text-white from-primary-start to-primary-end hover:text-4xl transition-all duration-300  flex items-center justify-center">
                                                <FaPlus/>
                                            </button>
                                        </Tooltip>
                                    </div>
                                ) : (
                                    <div className="flex flex-col items-center justify-center py-12 px-4 text-center mt-20">
                                        <img src={noPatientImage} alt={"image"} className="w-36 h-36 rounded-lg"/>
                                        <h3 className="font-bold text-2xl mt-4 mb-2 text-gray-800">No patients recorded</h3>
                                        <p className="text-gray-600 mb-6 max-w-xl text-md font-medium">
                                            There are currently no patients registered in the system. Get started by adding a new patient.
                                        </p>
                                        <button
                                            onClick={() => setCanOpenAddNewPatientModal(true)}
                                            className="flex items-center px-4 py-2 bg-primary-start font-semibold text-white rounded-md hover:bg-primary-end transition-all duration-300"
                                        >
                                            <span className="mr-2 text-lg">+</span>
                                            Add a new patient
                                        </button>
                                    </div>

                                )
                        )}

                    {/* Modals content */}
                    <AddNewPatientModal isOpen={canOpenAddNewPatientModal}
                                        onClose={() => {
                                            setCanOpenAddNewPatientModal(false)
                                        }}
                                        setCanOpenSuccessModal={setCanOPenSuccessModal}
                                        setSuccessMessage={setSuccessMessage}
                                        setIsLoading={setIsLoading}
                    />
                    <EditPatientInfosModal isOpen={canOpenEditPatientDetailModal}
                                           onClose={() => {
                                               setCanOpenEditPatientDetailModal(false)
                                           }} setCanOpenSuccessModal={setCanOPenSuccessModal}
                                           setSuccessMessage={setSuccessMessage}
                                           setIsLoading={setIsLoading}
                                           patientData={selectedPatientDetails}
                    />
                    <SuccessModal isOpen={canOpenSuccessModal}
                                  message={successMessage}
                                  canOpenSuccessModal={setCanOPenSuccessModal}
                                  makeAction={() => window.location.reload()}
                    />
                    <ViewPatientDetailsModal
                        isOpen={canOpenViewPatientDetailModal}
                        patient={selectedPatientDetails}
                        onClose={() => {
                            setCanOpenViewPatientDetailModal(false)
                        }}
                    />
                    {isLoading && <Wait/>}
                </>
            </div>
        </DashBoard>
    )
}// END OF FILE: src/Pages/Receptionist/Receptionist.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Receptionist/ReceptionistMedicalStaffs.jsx

import {MedicalStaffList} from "../../GlobalComponents/MedicalStaffList.jsx";
import {receptionistNavLink} from "./receptionistNavLink.js";
import {DashBoard} from "../../GlobalComponents/DashBoard.jsx";
import {ReceptionistNavBar} from "./ReceptionistNavBar.jsx";



export function ReceptionistMedicalStaffs()
{
    return (
       <>
           <DashBoard requiredRole={"Receptionist"} linkList={receptionistNavLink}>
               <ReceptionistNavBar/>
               <div className="mt-5">
                   <MedicalStaffList/>
               </div>
           </DashBoard>
       </>
    )
}// END OF FILE: src/Pages/Receptionist/ReceptionistMedicalStaffs.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Receptionist/ReceptionistNavBar.jsx

import {FaCog, FaSignOutAlt} from "react-icons/fa";
import {Tooltip} from "antd";
import {useAuthentication} from "../../Utils/Provider.jsx";
import userIcon from "../../assets/userIcon.png";

export function ReceptionistNavBar()
{

    const {logout , userData} = useAuthentication();

    const applyNavLinkBtnStyle = () => {
        return " w-12 h-10 mt-1 border-2 bg-gray-100 flex justify-center items-center rounded-xl shadow-xl hover:bg-secondary text-secondary text-xl hover:text-white transition-all duration-300";
    }


    return (
        <>
            <div className="border-b-2 m-3  border-b-gray-300">
                <div className="w-full h-[70px] flex justify-between">
                    <h1 className="ml-3 text-4xl text-secondary mt-3.5 font-bold">
                        Receptionist
                    </h1>
                    <div className="flex gap-3 mt-3.5 mb-4 mr-5">
                        <Tooltip placement={"top"} title={"settings"}>
                            <button className={applyNavLinkBtnStyle()}>
                                <FaCog/>
                            </button>

                        </Tooltip>
                        <Tooltip placement={"top"} title={"LogOut"}>
                            <button
                                onClick={() => {logout()}}
                                className={" w-12 h-10 mt-1 border-2 bg-red-400 flex justify-center items-center rounded-xl shadow-xl hover:bg-white text-white text-xl hover:text-red-500 transition-all duration-300"}>
                                <FaSignOutAlt/>
                            </button>
                        </Tooltip>
                        <Tooltip placement={"top"} title={"Profile"}>
                            <button className="ml-3 flex">
                                <p className="font-bold text-secondary text-xl mt-2">{userData?.username}</p>
                                <img src={userIcon} alt={"user-icon"} className="w-12 h-12 ml-2 mr-3"/>

                            </button>
                        </Tooltip>
                    </div>
                </div>
            </div>
        </>
    )
}// END OF FILE: src/Pages/Receptionist/ReceptionistNavBar.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Receptionist/receptionistNavLink.js

import {Calendar, Users} from "lucide-react";
import {AppRoutesPaths as appRoutes} from "../../Router/appRouterPaths.js";
import {FaQuestionCircle, FaUserMd} from "react-icons/fa";

export const receptionistNavLink = [
    {
        name: 'Patient List',
        icon: Users,
        link: appRoutes.receptionistPage,
    },
    {
        name: 'Medical Staffs',
        icon: FaUserMd,
        link: appRoutes.receptionistMedicalStaffsPage,
    },
    {
        name: 'Appointments',
        icon: Calendar,
        link: appRoutes.appointmentsPage,
    },
    {
        name: 'Help Center',
        icon: FaQuestionCircle,
        link: appRoutes.helpCenterPage,
    }

    ]// END OF FILE: src/Pages/Receptionist/receptionistNavLink.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Pages/Receptionist/ViewPatientDetailsModal.jsx

import PropTypes from "prop-types";
import userIcon from "../../assets/userIcon.png";
import { Mail, Phone, MapPin, Calendar, CreditCard, User } from 'lucide-react';


export function ViewPatientDetailsModal({isOpen, patient, onClose})
{
    ViewPatientDetailsModal.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        patient: PropTypes.object.isRequired,
        onClose: PropTypes.func.isRequired
    };

    if(!isOpen) return null;
    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 backdrop-blur-sm transition-all duration-300">
            <div className="bg-white rounded-lg shadow-xl w-[600px] ">
                <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                    <div className="flex flex-row">
                        {/* Left Section - Avatar and Name */}
                        <div className="bg-gradient-to-br from-blue-50 to-blue-100 p-6 flex flex-col items-center text-center w-1/3">
                            <div className="w-40 h-40 rounded-full bg-sky-200 overflow-hidden mb-4">
                                <img
                                    src = {userIcon}
                                    alt="Profile avatar"
                                    className="w-full h-full object-cover"
                                />
                            </div>
                            <h1 className="text-2xl font-bold text-navy-900 mb-1">{patient.lastName}</h1>
                            <h2 className="text-xl text-navy-700 mb-4">{patient.firstName}</h2>
                            <div className="flex items-center text-gray-600">
                                <User className="w-4 h-4 mr-2"/>
                                <p className="text-xl font-bold">{patient.gender}</p>
                            </div>
                        </div>

                        {/* Right Section - Personal Information */}
                        <div className="p-6 md:w-2/3">
                            <div className="space-y-4">
                                <div className="flex items-start">
                                    <MapPin className="w-7 h-7 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-md text-gray-500 font-medium">Address</p>
                                        <p className="text-gray-700 font-bold">{patient.address}</p>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <Mail className="w-7 h-7 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Email</p>
                                        <p className="text-gray-700 font-bold">{patient.email}</p>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <CreditCard className="w-7 h-7 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">CNI Number</p>
                                        <p className="text-gray-700 font-bold">{patient.cniNumber}</p>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <Phone className="w-7 h-7 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Phone Number</p>
                                        <p className="text-gray-700 font-bold">{patient.phoneNumber}</p>
                                    </div>
                                </div>

                                <div className="flex items-start">
                                    <Calendar className="w-7 h-7 text-primary-start mt-1 mr-3"/>
                                    <div>
                                        <p className="text-sm text-gray-500 font-medium">Date of Birth</p>
                                        <p className="text-gray-700 font-bold">{patient.birthDate}</p>
                                    </div>
                                </div>
                            </div>

                            <div className="flex justify-end">
                                <button
                                    onClick={onClose}
                                    className="px-4 py-1 bg-primary-end text-md hover:text-xl font-bold text-md text-white rounded-md transition-all duration-300"
                                >
                                    Close
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}// END OF FILE: src/Pages/Receptionist/ViewPatientDetailsModal.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Router/AppRouter.jsx

import React from "react"
import { Route, Routes } from "react-router-dom";
import {Loading} from "../GlobalComponents/Loading.jsx";
import {AppRoutesPaths} from "./appRouterPaths.js";





export function AppRoute()
{
    const LoginPage = React.lazy(async () => ({default: (await import("../Pages/Authentication/Login.jsx")).LoginPage}));
    const ForgottenPage = React.lazy(async () => ({default: (await import("../Pages/Authentication/ForgottenPassword.jsx")).ForgottenPassword}));
    const LandingPage = React.lazy(async () => ({default: (await import("../Pages/LandingPage/LandingPage.jsx")).LandingPage}));
    const NursePage = React.lazy(async () => ({default: (await import("../Pages/Nurse/Nurse.jsx")).Nurse}));
    const NotFoundPage = React.lazy(async () => ({default: (await import("../GlobalComponents/NotFound.jsx")).NotFound}));
    const NurseMedicalStaffsPage = React.lazy(async () => ({default: (await import("../Pages/Nurse/MedicalStaffs.jsx")).MedicalStaffs}));
    const ConsultationHistoryPage = React.lazy(async () => ({default: (await import("../Pages/Nurse/ConsultationHistory.jsx")).ConsultationHistory}));
    const HelpCenterPage = React.lazy(async () => ({default: (await import("../Pages/HelpCenter/HelpCenter.jsx")).HelpCenter}));
    const PatientDetailsPage = React.lazy(async () => ({default: (await import("../Pages/Nurse/PatientParameters.jsx")).PatientParameters}));
    const PharmacyPage = React.lazy(async () => ({default: (await import("../Pages/Pharmacy/Pharmacy.jsx")).Pharmacy}));
    const ReceptionistPage = React.lazy(async () => ({default: (await import("../Pages/Receptionist/Receptionist.jsx")).Receptionist}));
    const DoctorPage = React.lazy(async () => ({default: (await import("../Pages/Doctor/Doctor.jsx")).Doctor}));
    /*const LaboratoryAssistantPage = React.lazy(async () => ({default: (await import("../Pages/Laboratory/LaboratoryAssistant.jsx")).LaboratoryAssistant}));*/
    const SpecialistPage = React.lazy(async () => ({default: (await import("../Pages/Doctor/Specialist.jsx")).Specialist}));
    const CashierPage = React.lazy(async () => ({default: (await import("../Pages/Cashier/Cashier.jsx")).Cashier}));
    const ExamsList = React.lazy(async () => ({default: (await import("../Pages/Cashier/ExamsList.jsx")).ExamsList}));
    const Hospitalisations = React.lazy(async () => ({default: (await import("../Pages/Cashier/Hospitalisations.jsx")).Hospitalisations}));
    const FinancialReport = React.lazy(async () => ({default: (await import("../Pages/Cashier/FinancialReport.jsx")).FinancialReport}));
    const HelpCenter= React.lazy(async () => ({default: (await import("../GlobalComponents/HelpCenter.jsx")).HelpCenter})); 
    const AdminHomePage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AdminHomePage.jsx")).AdminHomePage}));
    const ReceptionistMedicalStaffsPage = React.lazy(async () => ({default: (await import("../Pages/Receptionist/ReceptionistMedicalStaffs.jsx")).ReceptionistMedicalStaffs}));
    const ReceptionistAppointmentsPage = React.lazy(async () => ({default: (await import("../Pages/Receptionist/Appointments.jsx")).Appointments}));
    const AdminPatientListPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AdminPatientList.jsx")).AdminPatientList}));
    const AddMedicalStaffPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AddMedicalStaff.jsx")).AddMedicalStaff}));
    const AdminMedicalStaffListPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AdminMedicalStaffList.jsx")).AdminMedicalStaffList}));
    const AdminConsultationListPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AdminConsultationList.jsx")).AdminConsultationList}));
    const AdminAppointmentsListPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AdminAppointmentsList.jsx")).AdminAppointmentsList}));
    const AddExamPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AddExam.jsx")).AddExam}));
    const AdminExamsListPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AdminExamsList.jsx")).AdminExamsList}));
    const AddDrugPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AddDrug.jsx")).AddDrug}));
    const AdminDrugsListPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AdminDrugsList.jsx")).AdminDrugsList}));
    const AdminHospitalRoomPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AdminHospitalRooms.jsx")).AdminHospitalRooms}));
    const AdminFinancialReportsPage = React.lazy(async () => ({default: (await import("../Pages/AdminViews/AdminFinancialReports.jsx")).AdminFinancialReports}));
    const AccountantPage = React.lazy(async () => ({default: (await import("../Pages/Accountant/Accountant.jsx")).Accountant}));
    const AdminConsultationDetails = React.lazy(async () => ({default: (await import("../Pages/AdminViews/ConsultationDetails.jsx")).ConsultationDetails}));
    /*const CurrentExamsLaboratoryPage = React.lazy(async () => ({default: (await import("../Pages/Laboratory/CurrentExams.jsx")).CurrentExams}));
    const ExamsHistoryLaboratoryPage = React.lazy(async () => ({default: (await import("../Pages/Laboratory/ExamsHistory.jsx")).ExamHistory}));*/
    const FinancialHistory = React.lazy(async () => ({default: (await import("../Pages/Cashier/FinancialHistory.jsx")).FinancialHistory}));
    const AccountDetailsPage = React.lazy(async () => ({default: (await import("../Pages/Accountant/AccountDetailsPage.jsx")).AccountDetailsPage}));
    const AccountList = React.lazy(async () => ({default: (await import("../Pages/Accountant/AccountList.jsx")).AccountList}));

    const DoctorPatientList = React.lazy(async () => ({default: (await import("../Pages/Doctor/DoctorPatientList.jsx")).DoctorPatientList}));
    const DoctorConsultationList = React.lazy(async () => ({default: (await import("../Pages/Doctor/DoctorConsultationList.jsx")).DoctorConsultationList}));
    const DoctorAppointments = React.lazy(async () => ({default: (await import("../Pages/Doctor/AppointmentList.jsx")).AppointmentList}));
    const DoctorConsultationHistory = React.lazy(async () => ({default: (await import("../Pages/Doctor/ConsultationHistory.jsx")).ConsultationHistory}));
    const DoctorConsultationDetails = React.lazy(async () => ({default: (await import("../Pages/Doctor/DoctorConsultationDetail.jsx")).DoctorConsultationDetails}));
    const DoctorConsultationHistoryDetails = React.lazy(async () => ({default: (await import("../Pages/Doctor/ConsultationHistoryDetails.jsx")).ConsultationHistoryDetails}));
    const DoctorExamList = React.lazy(async () => ({default: (await import("../Pages/Doctor/DoctorExamsList.jsx")).DoctorExamsList}));
    const DoctorPatientMedicalFolder = React.lazy(async () => ({default: (await import("../Pages/Doctor/PatientMedicalFolder.jsx")).PatientMedicalFolder}));


    const FinancialContributions = React.lazy(async () => ({default: (await import("../Pages/Accountant/FinancialContribution.jsx")).FinancialContributions,}));
    const FinancialReportsAccountant = React.lazy(async () => ({default: (await import("../Pages/Accountant/FinancialReports.jsx")).FinancialReports,}));
    const PharmacyMedication = React.lazy(async () => ({default: (await import("../Pages/Pharmacy/PharmacyMedication.jsx")).PharmacyMedication,}));
    const CreateFactureAccountant = React.lazy(async () => ({default: (await import("../Pages/Accountant/CreateFacture.jsx")).CreateFacturePage,}));

    const LaboratoryHomePage = React.lazy(async () => ({default: (await import("../Pages/Laboratory/LaboratoryHomePage.jsx")).LaboratoryHomePage,}));
    const LaboratoryPatientList = React.lazy(async () => ({default: (await import("../Pages/Laboratory/LaboratoryPatientList.jsx")).LaboratoryPatientList,}));
    const LaboratoryExamenList = React.lazy(async () => ({default: (await import("../Pages/Laboratory/LaboratoryExamList.jsx")).ExamenList,}));
    const LaboratoryExamenDetails = React.lazy(async () => ({default: (await import("../Pages/Laboratory/ExamenDetails.jsx")).ExamDetails,}));
    const LaboratoryExamenHistories = React.lazy(async () => ({default: (await import("../Pages/Laboratory/LaboratoryExamHistory.jsx")).ExamHistory,}));
    const LaboratoryExamResulDetails = React.lazy(async () => ({default: (await import("../Pages/Laboratory/ExamResultDetail.jsx")).ExamResultDetails,}));
    const LaboratoryNotifications = React.lazy(async () => ({default: (await import("../Pages/Laboratory/Notification.jsx")).Notification,}));


    const FinancialAccountantHome = React.lazy(async () => ({default: (await import("../Pages/AccountantNew/Home/HomePage.jsx")).FinancialAccountantHomePage,}));
    const FinancialAccountantChartOfAccount = React.lazy(async () => ({default: (await import("../Pages/AccountantNew/Comptabilité de Base/PlanComptable.jsx")).ChartOfAccounts,}));
    const FinancialAccountantJournalEntries = React.lazy(async () => ({default: (await import("../Pages/AccountantNew/Comptabilité de Base/JournalsEntries.jsx")).JournalEntries,}));
    const FinancialAccountingJournal = React.lazy(async () => ({default: (await import("../Pages/AccountantNew/Comptabilité de Base/AccountingJornal.jsx")).JournauxComptables,}));
    const FinancialGrandLivre = React.lazy(async () => ({default: (await import("../Pages/AccountantNew/Comptabilité de Base/GrandLivre.jsx")).GrandLivreBalance}));
    const FinancialPayrollJournal = React.lazy(async () => ({default: (await import("../Pages/AccountantNew/Payroll & Social Charge/PayrollJournal.jsx")).SocialChargesCalculator}));
    const FinancialCostAnalytic = React.lazy(async () => ({default: (await import("../Pages/AccountantNew/Payroll & Social Charge/CostAnalytic.jsx")).HRAnalyticsDashboard}));







    return (
        <React.Suspense fallback={<Loading />}>
            <Routes>
                <Route path={AppRoutesPaths.welcomePage} element={<LandingPage />}/>
                <Route path={AppRoutesPaths.loginPage} element={<LoginPage />}/>
                <Route path={AppRoutesPaths.forgottenPasswordPage} element={<ForgottenPage />}/>
                <Route path={AppRoutesPaths.nursePage} element={<NursePage />}/>
                <Route path={AppRoutesPaths.pharmacyPage} element={<PharmacyPage />}/>
                <Route path={AppRoutesPaths.nurseMedicalStaffsPage} element={<NurseMedicalStaffsPage />}/>
                <Route path={AppRoutesPaths.consultationHistoryPage} element={<ConsultationHistoryPage/>}/>
                <Route path={AppRoutesPaths.helpCenterPage} element={<HelpCenterPage/>}/>
                <Route path={AppRoutesPaths.patientDetailsPage} element={<PatientDetailsPage />} />
                <Route path={AppRoutesPaths.cashierPage} element={<CashierPage />} />
                <Route path={AppRoutesPaths.examsList} element={<ExamsList/>} />
                <Route path={AppRoutesPaths.hospitalisations} element={<Hospitalisations/>} />
                <Route path={AppRoutesPaths.financialReport} element={<FinancialReport/>} />
                <Route path={AppRoutesPaths.helpCenter} element={<HelpCenter/>} />
                <Route path={AppRoutesPaths.receptionistPage} element={<ReceptionistPage />} />
                <Route path={AppRoutesPaths.doctorPage} element={<DoctorPage />} />
                {/*<Route path={AppRoutesPaths.laboratoryAssistantPage} element={<LaboratoryAssistantPage />} />*/}
                <Route path={AppRoutesPaths.specialistPage} element={<SpecialistPage />} />
                <Route path={AppRoutesPaths.adminHomePage} element={<AdminHomePage />} />
                <Route path={AppRoutesPaths.receptionistMedicalStaffsPage} element={<ReceptionistMedicalStaffsPage />} />
                <Route path={AppRoutesPaths.appointmentsPage} element={<ReceptionistAppointmentsPage />} />
                <Route path={AppRoutesPaths.adminPatientListPage} element={<AdminPatientListPage />} />
                <Route path={AppRoutesPaths.addMedicalStaff} element={<AddMedicalStaffPage />} />
                <Route path={AppRoutesPaths.adminMedicalStaffListPage} element={<AdminMedicalStaffListPage />} />
                <Route path={AppRoutesPaths.adminConsultationListPage} element={<AdminConsultationListPage />} />
                <Route path={AppRoutesPaths.adminAppointmentsListPage} element={<AdminAppointmentsListPage />} />
                <Route path={AppRoutesPaths.addExam} element={<AddExamPage />} />
                <Route path={AppRoutesPaths.adminExamsListPage} element={<AdminExamsListPage />} />
                <Route path={AppRoutesPaths.addDrug} element={<AddDrugPage />} />
                <Route path={AppRoutesPaths.adminDrugsListPage} element={<AdminDrugsListPage />} />
                <Route path={AppRoutesPaths.adminHospitalRoomPage} element={<AdminHospitalRoomPage />} />
                <Route path={AppRoutesPaths.adminFinancialReportsPage} element={<AdminFinancialReportsPage />} />
                <Route path={AppRoutesPaths.accountantPage} element={<AccountantPage />} />
                <Route path={AppRoutesPaths.adminConsultationDetailsPage} element={<AdminConsultationDetails />} />
                {/*<Route path={AppRoutesPaths.laboratoryHistory} element={<ExamsHistoryLaboratoryPage />} />*/}
                {/*<Route path={AppRoutesPaths.laboratoryCurrent} element={<CurrentExamsLaboratoryPage />} />*/}
                <Route path={AppRoutesPaths.financialHistory} element={<FinancialHistory />} />
                <Route  path={AppRoutesPaths.accountDetails}   element={<AccountDetailsPage />} />
                <Route path={AppRoutesPaths.accountList} element={<AccountList />} />
                <Route path={AppRoutesPaths.notFound} element={<NotFoundPage />} />

                <Route path={AppRoutesPaths.doctorExamList} element={<DoctorExamList />} />
                <Route path={AppRoutesPaths.doctorConsultationHistory} element={<DoctorConsultationHistory />} />
                <Route path={AppRoutesPaths.doctorAppointment} element={<DoctorAppointments />} />
                <Route path={AppRoutesPaths.doctorPatientList} element={<DoctorPatientList />} />
                <Route path={AppRoutesPaths.doctorConsultationList} element={<DoctorConsultationList />} />
                <Route path={AppRoutesPaths.doctorConsultationDetailsPage} element={<DoctorConsultationDetails />} />
                <Route path={AppRoutesPaths.doctorConsultationHistoryDetails} element={<DoctorConsultationHistoryDetails />} />
                <Route path={AppRoutesPaths.doctorPatientMedicalFolderPage} element={<DoctorPatientMedicalFolder />} />


                <Route path={AppRoutesPaths.financialContributions} element={<FinancialContributions />}/>
                <Route path={AppRoutesPaths.financialReportsAccountant} element={<FinancialReportsAccountant />}/>
                <Route path={AppRoutesPaths.PharmacyMedication} element ={<PharmacyMedication/>}/>
                <Route path={AppRoutesPaths.createFactureAccountant} element={<CreateFactureAccountant/>}/>

                <Route path={AppRoutesPaths.laboratoryAssistantPage} element={<LaboratoryHomePage/>}/>
                <Route path={AppRoutesPaths.laboratoryPatientList} element={<LaboratoryPatientList/>}/>
                <Route path={AppRoutesPaths.laboratoryExamenList} element={<LaboratoryExamenList/>}/>
                <Route path={AppRoutesPaths.laboratoryExamenDetail} element={<LaboratoryExamenDetails/>}/>
                <Route path={AppRoutesPaths.laboratoryExamenHistories} element={<LaboratoryExamenHistories/>}/>
                <Route path={AppRoutesPaths.laboratoryExamResultDetails} element={<LaboratoryExamResulDetails/>}/>
                <Route path={AppRoutesPaths.laboratoryNotification} element={<LaboratoryNotifications/>}/>


                <Route path={AppRoutesPaths.financialAccountantHome} element={<FinancialAccountantHome/>}/>
                <Route path={AppRoutesPaths.financialAccountantChartOfAccount} element={<FinancialAccountantChartOfAccount/>}/>
                <Route path={AppRoutesPaths.financialAccountantJournalEntries} element={<FinancialAccountantJournalEntries/>}/>
                <Route path={AppRoutesPaths.financialAccountantAccountingJournals} element={<FinancialAccountingJournal/>}/>
                <Route path={AppRoutesPaths.financialAccountantAccountingGrandLivre} element={<FinancialGrandLivre/>}/>
                <Route path={AppRoutesPaths.financialAccountPayroll} element={<FinancialPayrollJournal/>}/>
                <Route path={AppRoutesPaths.financialAccountantCostAnalytic} element={<FinancialCostAnalytic/>}/>







            </Routes>
        </React.Suspense>
    )
}
// END OF FILE: src/Router/AppRouter.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Router/appRouterPaths.js


export const AppRoutesPaths = {
    notFound: "*",
    adminHomePage: "/admin/home",
    welcomePage: "/",
    loginPage: "/login",
    forgottenPasswordPage: "/forgotten-password",
    pharmacyPage:"/pharmacy",
    doctorPage: "/doctor/dashboard",
    laboratoryAssistantPage: "/laboratory-assistant/home",
    receptionistPage: "/receptionist/patients",
    cashierPage: "/cashier/consultation-list",
    consultationsList: "/cashier/consultations-list",
    examsList: "/cashier/exams-list",
    hospitalisations: "/cashier/hospitalisations-list",
    financialReport: "/cashier/financial-report",
    helpCenter: "/cashier/help-center",
    specialistPage: "/specialist",
    nursePage:"/nurse/patients",
    nurseMedicalStaffsPage: "/nurse/medical-staff",
    consultationHistoryPage: "/nurse/patients/consultation-history/:id",
    helpCenterPage: "/help-center",
    patientDetailsPage:"/nurse/patients/take-parameters/:id",
    receptionistMedicalStaffsPage: "/receptionist/medical-staffs",
    appointmentsPage: "/receptionist/appointments",
    adminPatientListPage: "/admin/patient-list",
    addDrug: "/admin/add-drug",
    adminDrugsListPage : "/admin/drugs-list",
    addMedicalStaff: "/admin/add-medical-staff",
    adminMedicalStaffListPage: "/admin/medical-staff-list",
    adminConsultationListPage: "/admin/consultation-list",
    adminAppointmentsListPage: "/admin/appointments-list",
    addExam: "/admin/add-exam",
    adminExamsListPage: "/admin/exams-list",
    adminHospitalRoomPage: "/admin/room-list",
    adminFinancialReportsPage: "/admin/financial-report",
    accountantPage: "/accountant/dashboard",
    adminConsultationDetailsPage: "/admin/consultation-list/details",
    laboratoryHistory:"/laboratory/exams-history",
    laboratoryCurrent:"/laboratory/current-exams",
    financialHistory:"/cashier/financial-history",
    accountDetails: "/accountant/account-details/:accountId",
    accountList: "/accountant/account-list",
    doctorPatientList: "/doctor/patients",
    doctorConsultationList: "/doctor/consultation-list",
    doctorConsultationDetailsPage: "/doctor/consultation-list/details/:id",
    doctorAppointment: "/doctor/appointments",
    doctorConsultationHistory: "/doctor/consultation-history",
    doctorConsultationHistoryDetails: "/doctor/consultation-history/details/:id",
    doctorExamList: "/doctor/exams-list",
    doctorPatientMedicalFolderPage:"/doctor/patients/medical-folder/:id",
    financialContributions: "/accountant/financial-contributions",
    financialReportsAccountant: "/accountant/financial-reports",
    PharmacyMedication:"/pharmacyMedication",
    createFactureAccountant: "/accountant/create-facture",

    laboratoryPatientList: "/laboratory-assistant/patient-list",
    laboratoryExamenList: "/laboratory-assistant/exams-list",
    laboratoryExamenDetail: "/laboratory-assistant/exams-list/details/:id",
    laboratoryExamenHistories: "/laboratory-assistant/exams-history",
    laboratoryExamResultDetails: "/laboratory-assistant/exams-history/details/:id",
    laboratoryNotification: "/laboratory-assistant/notifications",

    financialAccountantHome: "/accountant-financial/home",
    financialAccountantChartOfAccount : "/accountant-financial/chart-account",
    financialAccountantJournalEntries: "/accountant-financial/journat-entries",
    financialAccountantAccountingJournals: "/accountant-financial/accounting-journals",
    financialAccountantAccountingGrandLivre: "/accountant-financial/accounting-grand-livre",
    financialAccountantInvoices: "/accountant-financial/invoices",
    financialAccountantPayments: "/accountant-financial/payments",
    financialAccountantBudgets: "/accountant-financial/budgets",
    financialAccountantReports: "/accountant-financial/reports",
    financialAccountPayroll : "/accountant-financial/payroll-journal",
    financialAccountantCostAnalytic : "/accountant-financial/cost-analytic"


}
// END OF FILE: src/Router/appRouterPaths.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Utils/axiosInstanceAccountant.js

import axios from "axios";


const token = localStorage.getItem("token_key_fultang");


const axiosInstanceAccountant = axios.create(
    {
        baseURL: import.meta.env.VITE_BACKEND_FULTANG_API_BASE_ACCOUNTANT_URL,
        headers:
            {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
    }
);

export default axiosInstanceAccountant;// END OF FILE: src/Utils/axiosInstanceAccountant.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Utils/axiosInstance.js

import axios from "axios";



/*const ErrorInterceptor = (axiosInstance) => {

    axiosInstance.interceptors.response.use(
        res => {
            return res;
        },
        error => {
            console.group("Error");
            console.log(error);
            console.groupEnd();

            return error.response
        }
    )
}
*/


const token = localStorage.getItem("token_key_fultang");


const axiosInstance = axios.create(
    {
    baseURL: import.meta.env.VITE_BACKEND_FULTANG_API_BASE_MEDICALSTAFF_URL,
    headers:
        {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
        }
    }
);

//ErrorInterceptor(axiosInstance);
export default axiosInstance;// END OF FILE: src/Utils/axiosInstance.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Utils/compute.js

export function useCalculateAge() {



    function calculateAge(birthDate) {
        const today = new Date();
        const birth = new Date(birthDate);
        const diffTime = Math.abs(today - birth);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        if (diffDays < 7) {
            return { value: diffDays, unit: "day(s)" };
        } else if (diffDays < 30) {
            return { value: Math.floor(diffDays / 7), unit: "week(s)" };
        } else if (diffDays < 365) {
            return { value: Math.floor(diffDays / 30), unit: "month(s)" };
        } else {
            let age = today.getFullYear() - birth.getFullYear();
            const monthDiff = today.getMonth() - birth.getMonth();
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                age--;
            }
            return { value: age, unit: "year(s)" };
        }
    }


    return { calculateAge };
}
// END OF FILE: src/Utils/compute.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Utils/formatDateMethods.js

export function formatDurationSimple(isoDuration) {
  const hours = isoDuration.match(/(\d+)H/)?.[1] || 0;
  const minutes = isoDuration.match(/(\d+)M/)?.[1] || 0;

  return `${hours}:${minutes}`;
}

export function formatDateToTime(dateString) {
  const date = new Date(dateString);
  return date.toLocaleTimeString("en-US", {
    hour: "2-digit",
    minute: "2-digit",
    hour12: true,
  });
}



export function formatFullDateTime(dateString) {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
    hour12: true,
  }).format(new Date(dateString));
}

export function formatDateOnly(dateString) {
  return new Intl.DateTimeFormat("en-US", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  }).format(new Date(dateString));
}


export function formatDateOnlyWithoutWeekDay(dateString) {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  }).format(new Date(dateString));
}


export function combineToISOString(date, time) {
  const combinedDateTime = new Date(`${date}T${time}`);
  combinedDateTime.setHours(combinedDateTime.getHours() + 1);
  return combinedDateTime.toISOString();
}
// END OF FILE: src/Utils/formatDateMethods.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Utils/paginationFunctions.js

export function calculateNumberOfSlides(totalItems, itemsPerSlide = 5) {
    return totalItems % itemsPerSlide === 0
        ? totalItems / itemsPerSlide
        : Math.floor(totalItems / itemsPerSlide) + 1;
}


// END OF FILE: src/Utils/paginationFunctions.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/src/Utils/Provider.jsx

import constate from "constate";
import {useEffect, useMemo, useState} from "react";
import axios from "axios";





export const [FultangProvider, useAuthentication] = constate(useLogin, value => value.authMethods);



function useLogin() {

    const [isLogged, setIsLogged] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [userData, setUserData] = useState({});
    const [userRole, setUserRole] = useState("");


    function saveAuthParameters(token, refreshToken) {
        localStorage.setItem("token_key_fultang", token);
        localStorage.setItem("refresh_token_fultang", refreshToken);
    }


    function clearLocalStorage()
    {
        localStorage.removeItem("token_key_fultang");
        localStorage.removeItem("refresh_token_fultang");
    }


    async function login (data)
    {
        try
        {
            const response = await axios.post("http://fultang.ddns.net:8009/api/v1/auth/login/", data);
            if (response.status === 200)
            {
                setIsLoading(false);
                console.log("logged user data: ",response);
                saveAuthParameters(response.data.access, response.data.refresh);
                setUserData(response.data.user);
                setUserRole(response.data.user.role);
                await getCurrentUserInfos();
                setIsLogged(true);
                return response.data.user.role;
            }
        }
        catch (error)
        {
            setIsLoading(false);
            console.error("Authentication error:", error);
            return error.status;
        }
    }


    async function getCurrentUserInfos  ()
    {
        const token = localStorage.getItem("token_key_fultang");
        if (token)
        {
            try
            {
                const response = await axios.get("http://fultang.ddns.net:8009/api/v1/auth/me/", {headers: {"Authorization": `Bearer ${token}`}});
                if (response.status === 200)
                {
                    console.log(response.data);
                    setIsLogged(true);
                    setUserData(response.data);
                    setUserRole(response.data.role);
                }
            }
            catch (error)
            {
                console.log(error);
                setIsLogged(false);
            }
        }

    }



    useEffect(() => {
        const token = localStorage.getItem("token_key_fultang");
        if (token)
        {
            setIsLogged(true);
            getCurrentUserInfos()
        }
        else
        {
            setIsLogged(false);
            setUserData({});
            setUserRole("");
            clearLocalStorage();
        }
    }, []);



    function isAuthenticated()
    {
        return isLogged;
    }




    function hasRole(requiredRole)
    {
        if (isLogged)
        {
            if(userData.role)
            {
                return userData?.role === requiredRole;
            }
            return false;
        }
        else
        {
            return false;
        }
    }




    function logout()
    {
        clearLocalStorage();
        setIsLogged(false);
        setUserData({});
        setUserRole("");
        //window.location.href = "/login";
    }



    const authMethods = useMemo(() => ({
        login,
        setIsLoading,
        isLoading,
        userData,
        isLogged,
        isAuthenticated,
        hasRole,
        userRole,
        logout,
    }), [isLoading, userData, isLogged, userRole, logout]);
    return {authMethods}
}// END OF FILE: src/Utils/Provider.jsx

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/tailwind.config.js

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'primary-start': '#1A73A3',
        'primary-end': '#50C2B9',
         secondary : "#051161"
      }
    },
  },
  plugins: []
}// END OF FILE: tailwind.config.js

//---> PATH: /home/ngoupaye/projets-scolaires/frontend-fulltang/ihm_fultang/vite.config.js

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
/*export default defineConfig({
  plugins: [react()],
})*/

export default defineConfig({
  base: "/",
  plugins: [react()],
  preview: {
    port: 9000,
    strictPort: true,
    host: true,
    allowedHosts: ['fultang.ddns.net'],
  },
  server: {
    port: 9000,
    strictPort: true,
    host: true,
  }
})// END OF FILE: vite.config.js

